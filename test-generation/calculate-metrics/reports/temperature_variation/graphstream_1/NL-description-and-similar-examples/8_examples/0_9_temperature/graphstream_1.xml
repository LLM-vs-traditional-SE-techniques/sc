<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="JaCoCo Coverage Report"><sessioninfo id="workhorse-f3fc79b" start="1680698831116" dump="1680698831384"/><package name="org/graphstream/graph"><class name="org/graphstream/graph/Path" sourcefilename="Path.java"><method name="&lt;init&gt;" desc="()V" line="80"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRoot" desc="()Lorg/graphstream/graph/Node;" line="110"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setRoot" desc="(Lorg/graphstream/graph/Node;)V" line="120"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="contains" desc="(Lorg/graphstream/graph/Node;)Z" line="136"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="contains" desc="(Lorg/graphstream/graph/Edge;)Z" line="147"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="empty" desc="()Z" line="156"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="size" desc="()I" line="163"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getPathWeight" desc="(Ljava/lang/String;)Ljava/lang/Double;" line="175"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEdgePath" desc="()Ljava/util/List;" line="188"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNodePath" desc="()Ljava/util/List;" line="197"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lorg/graphstream/graph/Node;Lorg/graphstream/graph/Edge;)V" line="213"><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lorg/graphstream/graph/Edge;)V" line="245"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="push" desc="(Lorg/graphstream/graph/Node;Lorg/graphstream/graph/Edge;)V" line="256"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="push" desc="(Lorg/graphstream/graph/Edge;)V" line="263"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="popEdge" desc="()Lorg/graphstream/graph/Edge;" line="273"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="popNode" desc="()Lorg/graphstream/graph/Node;" line="284"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peekNode" desc="()Lorg/graphstream/graph/Node;" line="295"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peekEdge" desc="()Lorg/graphstream/graph/Edge;" line="306"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="clear" desc="()V" line="313"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getACopy" desc="()Lorg/graphstream/graph/Path;" line="326"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="removeLoops" desc="()V" line="339"><counter type="INSTRUCTION" missed="59" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Lorg/graphstream/graph/Path;)Z" line="369"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="390"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNodeCount" desc="()I" line="399"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEdgeCount" desc="()I" line="408"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNodeIterator" desc="()Ljava/util/Iterator;" line="418"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEdgeIterator" desc="()Ljava/util/Iterator;" line="428"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEachNode" desc="()Ljava/lang/Iterable;" line="438"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEachEdge" desc="()Ljava/lang/Iterable;" line="448"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNodeSet" desc="()Ljava/util/Collection;" line="458"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEdgeSet" desc="()Ljava/util/Collection;" line="468"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="73"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="359" covered="0"/><counter type="BRANCH" missed="34" covered="0"/><counter type="LINE" missed="82" covered="0"/><counter type="COMPLEXITY" missed="49" covered="0"/><counter type="METHOD" missed="32" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="Path.java"><line nr="73" mi="5" ci="0" mb="0" cb="0"/><line nr="80" mi="3" ci="0" mb="0" cb="0"/><line nr="97" mi="2" ci="0" mb="0" cb="0"/><line nr="98" mi="5" ci="0" mb="0" cb="0"/><line nr="99" mi="5" ci="0" mb="0" cb="0"/><line nr="100" mi="1" ci="0" mb="0" cb="0"/><line nr="110" mi="3" ci="0" mb="0" cb="0"/><line nr="120" mi="3" ci="0" mb="2" cb="0"/><line nr="121" mi="3" ci="0" mb="0" cb="0"/><line nr="122" mi="6" ci="0" mb="0" cb="0"/><line nr="124" mi="3" ci="0" mb="0" cb="0"/><line nr="126" mi="1" ci="0" mb="0" cb="0"/><line nr="136" mi="5" ci="0" mb="0" cb="0"/><line nr="147" mi="5" ci="0" mb="0" cb="0"/><line nr="156" mi="4" ci="0" mb="0" cb="0"/><line nr="163" mi="4" ci="0" mb="0" cb="0"/><line nr="175" mi="2" ci="0" mb="0" cb="0"/><line nr="176" mi="11" ci="0" mb="2" cb="0"/><line nr="177" mi="9" ci="0" mb="0" cb="0"/><line nr="178" mi="1" ci="0" mb="0" cb="0"/><line nr="179" mi="3" ci="0" mb="0" cb="0"/><line nr="188" mi="3" ci="0" mb="0" cb="0"/><line nr="197" mi="3" ci="0" mb="0" cb="0"/><line nr="213" mi="3" ci="0" mb="2" cb="0"/><line nr="214" mi="2" ci="0" mb="2" cb="0"/><line nr="215" mi="5" ci="0" mb="0" cb="0"/><line nr="217" mi="3" ci="0" mb="0" cb="0"/><line nr="221" mi="2" ci="0" mb="2" cb="0"/><line nr="222" mi="5" ci="0" mb="0" cb="0"/><line nr="225" mi="24" ci="0" mb="8" cb="0"/><line nr="230" mi="7" ci="0" mb="0" cb="0"/><line nr="231" mi="6" ci="0" mb="0" cb="0"/><line nr="233" mi="3" ci="0" mb="0" cb="0"/><line nr="235" mi="1" ci="0" mb="0" cb="0"/><line nr="245" mi="4" ci="0" mb="2" cb="0"/><line nr="246" mi="5" ci="0" mb="0" cb="0"/><line nr="248" mi="7" ci="0" mb="0" cb="0"/><line nr="250" mi="1" ci="0" mb="0" cb="0"/><line nr="256" mi="4" ci="0" mb="0" cb="0"/><line nr="257" mi="1" ci="0" mb="0" cb="0"/><line nr="263" mi="3" ci="0" mb="0" cb="0"/><line nr="264" mi="1" ci="0" mb="0" cb="0"/><line nr="273" mi="4" ci="0" mb="0" cb="0"/><line nr="274" mi="5" ci="0" mb="0" cb="0"/><line nr="284" mi="4" ci="0" mb="0" cb="0"/><line nr="285" mi="5" ci="0" mb="0" cb="0"/><line nr="295" mi="5" ci="0" mb="0" cb="0"/><line nr="306" mi="5" ci="0" mb="0" cb="0"/><line nr="313" mi="3" ci="0" mb="0" cb="0"/><line nr="314" mi="3" ci="0" mb="0" cb="0"/><line nr="316" mi="3" ci="0" mb="0" cb="0"/><line nr="317" mi="1" ci="0" mb="0" cb="0"/><line nr="326" mi="4" ci="0" mb="0" cb="0"/><line nr="327" mi="4" ci="0" mb="0" cb="0"/><line nr="328" mi="6" ci="0" mb="0" cb="0"/><line nr="329" mi="6" ci="0" mb="0" cb="0"/><line nr="331" mi="2" ci="0" mb="0" cb="0"/><line nr="339" mi="4" ci="0" mb="0" cb="0"/><line nr="341" mi="7" ci="0" mb="2" cb="0"/><line nr="344" mi="9" ci="0" mb="2" cb="0"/><line nr="346" mi="9" ci="0" mb="2" cb="0"/><line nr="349" mi="9" ci="0" mb="2" cb="0"/><line nr="350" mi="7" ci="0" mb="0" cb="0"/><line nr="351" mi="5" ci="0" mb="0" cb="0"/><line nr="353" mi="6" ci="0" mb="0" cb="0"/><line nr="354" mi="2" ci="0" mb="0" cb="0"/><line nr="358" mi="1" ci="0" mb="0" cb="0"/><line nr="369" mi="7" ci="0" mb="2" cb="0"/><line nr="370" mi="2" ci="0" mb="0" cb="0"/><line nr="372" mi="9" ci="0" mb="2" cb="0"/><line nr="373" mi="9" ci="0" mb="2" cb="0"/><line nr="374" mi="2" ci="0" mb="0" cb="0"/><line nr="378" mi="2" ci="0" mb="0" cb="0"/><line nr="390" mi="4" ci="0" mb="0" cb="0"/><line nr="399" mi="4" ci="0" mb="0" cb="0"/><line nr="408" mi="4" ci="0" mb="0" cb="0"/><line nr="418" mi="4" ci="0" mb="0" cb="0"/><line nr="428" mi="4" ci="0" mb="0" cb="0"/><line nr="438" mi="3" ci="0" mb="0" cb="0"/><line nr="448" mi="3" ci="0" mb="0" cb="0"/><line nr="458" mi="3" ci="0" mb="0" cb="0"/><line nr="468" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="359" covered="0"/><counter type="BRANCH" missed="34" covered="0"/><counter type="LINE" missed="82" covered="0"/><counter type="COMPLEXITY" missed="49" covered="0"/><counter type="METHOD" missed="32" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="359" covered="0"/><counter type="BRANCH" missed="34" covered="0"/><counter type="LINE" missed="82" covered="0"/><counter type="COMPLEXITY" missed="49" covered="0"/><counter type="METHOD" missed="32" covered="0"/><counter type="CLASS" missed="1" covered="0"/></package><counter type="INSTRUCTION" missed="359" covered="0"/><counter type="BRANCH" missed="34" covered="0"/><counter type="LINE" missed="82" covered="0"/><counter type="COMPLEXITY" missed="49" covered="0"/><counter type="METHOD" missed="32" covered="0"/><counter type="CLASS" missed="1" covered="0"/></report>