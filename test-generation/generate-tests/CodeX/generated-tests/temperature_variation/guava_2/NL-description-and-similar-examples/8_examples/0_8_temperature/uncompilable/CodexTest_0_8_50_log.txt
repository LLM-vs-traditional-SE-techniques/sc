isCompilable => false
CodexTest_0_8_50.java:26: error: cannot find symbol
      byte[] bytes = new byte[4 * (1 + RANDOM.nextInt(100))];
                                       ^
  symbol:   variable RANDOM
  location: class CodexTest_0_8_50
CodexTest_0_8_50.java:27: error: cannot find symbol
      Random random = new Random(i);
      ^
  symbol:   class Random
  location: class CodexTest_0_8_50
CodexTest_0_8_50.java:27: error: cannot find symbol
      Random random = new Random(i);
                          ^
  symbol:   class Random
  location: class CodexTest_0_8_50
CodexTest_0_8_50.java:29: error: cannot find symbol
      ByteArrayDataInput in = ByteStreams.newDataInput(bytes);
      ^
  symbol:   class ByteArrayDataInput
  location: class CodexTest_0_8_50
CodexTest_0_8_50.java:29: error: cannot find symbol
      ByteArrayDataInput in = ByteStreams.newDataInput(bytes);
                              ^
  symbol:   variable ByteStreams
  location: class CodexTest_0_8_50
CodexTest_0_8_50.java:34: error: cannot find symbol
      ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
      ^
  symbol:   class ByteArrayInputStream
  location: class CodexTest_0_8_50
CodexTest_0_8_50.java:34: error: cannot find symbol
      ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                                      ^
  symbol:   class ByteArrayInputStream
  location: class CodexTest_0_8_50
CodexTest_0_8_50.java:36: error: no suitable method found for assertThat(int[])
      assertThat(actual).isEqualTo(expected);
      ^
    method org.junit.Assert.<T>assertThat(java.lang.String,T,org.hamcrest.Matcher<? super T>) is not applicable
      (cannot infer type-variable(s) T
        (actual and formal argument lists differ in length))
    method org.junit.Assert.<T>assertThat(T,org.hamcrest.Matcher<? super T>) is not applicable
      (cannot infer type-variable(s) T
        (actual and formal argument lists differ in length))