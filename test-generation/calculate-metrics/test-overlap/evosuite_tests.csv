test,file,project
"      IndexRequest var = new IndexRequest("""");      assertFalse(var.isRetry());      assertEquals((-3L), var.version());      assertEquals((-1L), var.getAutoGeneratedTimestamp());",./IndexRequest_ESTest_2.java,elasticsearch_1
"      IndexRequest var = new IndexRequest();      assertEquals((-1L), var.getAutoGeneratedTimestamp());      assertEquals((-3L), var.version());      assertFalse(var.isRetry());",./IndexRequest_ESTest_3.java,elasticsearch_1
"      IndexRequest var = new IndexRequest(""WM\""GvzGn='(Czut$D"", """", ""ALLOW_COMMENTS"");      assertEquals(""ALLOW_COMMENTS"", var.id());      assertEquals(""WM\""GvzGn='(Czut$D"", var.index());      assertEquals((-1L), var.getAutoGeneratedTimestamp());      assertFalse(var.isRetry());      assertEquals((-3L), var.version());      assertEquals("""", var.type());",./IndexRequest_ESTest_0.java,elasticsearch_1
"      IndexRequest var = new IndexRequest(""`j3NY+Vv0P;$"", ""`j3NY+Vv0P;$"");      var.parent();      assertEquals((-3L), var.version());      assertEquals((-1L), var.getAutoGeneratedTimestamp());      assertFalse(var.isRetry());",./IndexRequest_ESTest_4.java,elasticsearch_1
"      IndexRequest var = new IndexRequest(""opType must be 'create' or 'index', found: ["", """");      assertEquals(""opType must be 'create' or 'index', found: ["", var.index());      assertEquals((-1L), var.getAutoGeneratedTimestamp());      assertEquals((-3L), var.version());      assertEquals("""", var.type());      assertFalse(var.isRetry());",./IndexRequest_ESTest_1.java,elasticsearch_1
"      double[] var = new double[2];      doubleArray0[0] = (-886.973);      AlgVector var = new AlgVector(doubleArray0);      AlgVector var = var.add(algVector0);      assertNotSame(var, algVector0);      assertEquals(1773.946, var.norm(), 0.01);",./AlgVector_ESTest_5.java,weka_1
"      double[] var = new double[2];      AlgVector var = new AlgVector(doubleArray0);      AlgVector var = var.add(algVector0);      double[] var = new double[4];      var.m_Elements = doubleArray1;      // Undeclared exception!      try {         var.add(algVector0);        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");            } catch(ArrayIndexOutOfBoundsException e) {         //         // 2         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_7.java,weka_1
"      BinarySparseInstance var = new BinarySparseInstance(0);      AlgVector var = null;      try {        var = new AlgVector(binarySparseInstance0);        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // No numeric attributes in data!         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_2.java,weka_1
"      AlgVector var = new AlgVector(37);      // Undeclared exception!      try {         var.add((AlgVector) null);        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_10.java,weka_1
"      ArrayList<Attribute> var = new ArrayList<Attribute>();      Instances var = new Instances(""DJn{+mw|lOSxc#"", var, 8);      MockRandom var = new MockRandom();      AlgVector var = new AlgVector(var, mockRandom0);      AlgVector var = var.add(algVector0);      assertNull(algVector1);",./AlgVector_ESTest_9.java,weka_1
"      double[] var = new double[1];      BinarySparseInstance var = new BinarySparseInstance(4.6, doubleArray0);      AlgVector var = null;      try {        var = new AlgVector(binarySparseInstance0);        fail(""Expecting exception: RuntimeException"");            } catch(RuntimeException e) {         //         // Instance doesn't have access to a dataset!         //         verifyException(""weka.core.AbstractInstance"", e);      }",./AlgVector_ESTest_1.java,weka_1
"      double[] var = new double[1];      AlgVector var = new AlgVector(doubleArray0);      int var = var.numElements();      assertEquals(1, int0);",./AlgVector_ESTest_8.java,weka_1
"      ArrayList<Attribute> var = new ArrayList<Attribute>();      Instances var = new Instances(""13ONjDr"", var, 1);      MockRandom var = new MockRandom(1);      AlgVector var = new AlgVector(var, mockRandom0);      // Undeclared exception!      try {         var.numElements();        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_6.java,weka_1
"      AlgVector var = new AlgVector(0);      AlgVector var = var.add(algVector0);      assertNotSame(var, algVector0);      assertEquals(0, var.numElements());",./AlgVector_ESTest_4.java,weka_1
"      AlgVector var = new AlgVector(0);      int var = var.numElements();      assertEquals(0, int0);",./AlgVector_ESTest_3.java,weka_1
"      int[] var = new int[7];      BinarySparseInstance var = new BinarySparseInstance(0.0, var, (-1336));      AlgVector var = null;      try {        var = new AlgVector(binarySparseInstance0);        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // No numeric attributes in data!         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_0.java,weka_1
"      AlgVector var = new AlgVector(110);      ArrayList<Attribute> var = new ArrayList<Attribute>();      Instances var = new Instances((String) null, var, 110);      MockRandom var = new MockRandom();      var.m_ClassIndex = 1620;      Instance var = var.getAsInstance(var, mockRandom0);      assertNotNull(instance0);      assertEquals(110, var.numElements());      assertEquals(0.0, var.norm(), 0.01);",./AlgVector_ESTest_5.java,weka_2
"      ArrayList<Attribute> var = new ArrayList<Attribute>();      Instances var = new Instances("""", var, 3999);      MockRandom var = new MockRandom();      AlgVector var = new AlgVector(var, mockRandom0);      double[] var = new double[7];      var.m_Elements = doubleArray0;      Instance var = var.getAsInstance(var, mockRandom0);      assertEquals(0, var.numValues());",./AlgVector_ESTest_7.java,weka_2
"      BinarySparseInstance var = new BinarySparseInstance(0.0, (int[]) null, 0);      AlgVector var = null;      try {        var = new AlgVector(binarySparseInstance0);        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // No numeric attributes in data!         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_2.java,weka_2
"      ArrayList<Attribute> var = new ArrayList<Attribute>();      Instances var = new Instances("""", var, 3999);      MockRandom var = new MockRandom();      AlgVector var = new AlgVector(var, mockRandom0);      // Undeclared exception!      try {         var.numElements();        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_9.java,weka_2
"      double[] var = new double[1];      SparseInstance var = new SparseInstance(1983.39378825, doubleArray0);      AlgVector var = null;      try {        var = new AlgVector(sparseInstance0);        fail(""Expecting exception: RuntimeException"");            } catch(RuntimeException e) {         //         // Instance doesn't have access to a dataset!         //         verifyException(""weka.core.AbstractInstance"", e);      }",./AlgVector_ESTest_1.java,weka_2
"      ArrayList<Attribute> var = new ArrayList<Attribute>();      Instances var = new Instances("""", var, 3999);      MockRandom var = new MockRandom();      AlgVector var = new AlgVector(var, mockRandom0);      Instance var = var.getAsInstance(var, mockRandom0);      assertNull(instance0);",./AlgVector_ESTest_8.java,weka_2
"      double[] var = new double[6];      AlgVector var = new AlgVector(doubleArray0);      MockRandom var = new MockRandom();      try {         var.getAsInstance((Instances) null, mockRandom0);        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_6.java,weka_2
"      AlgVector var = new AlgVector(110);      int var = var.numElements();      assertEquals(110, int0);      assertEquals(0.0, var.norm(), 0.01);",./AlgVector_ESTest_4.java,weka_2
"      AlgVector var = new AlgVector(0);      int var = var.numElements();      assertEquals(0, int0);",./AlgVector_ESTest_3.java,weka_2
"      double[] var = new double[5];      SparseInstance var = new SparseInstance((-1.0), doubleArray0);      var.m_NumAttributes = (-159);      AlgVector var = null;      try {        var = new AlgVector(sparseInstance0);        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // No numeric attributes in data!         //         verifyException(""weka.core.AlgVector"", e);      }",./AlgVector_ESTest_0.java,weka_2
      GWT var = new GWT();      assertFalse(var.isScript());,./GWT_ESTest_0.java,gwt_1
"      GWTBridge var = mock(GWTBridge.class, new ViolatedAssumptionAnswer());      doReturn(true).when(gWTBridge0).isClient();      com.google.gwt.core.shared.GWT.setBridge(gWTBridge0);      boolean var = GWT.isClient();      assertTrue(boolean0);",./GWT_ESTest_1.java,gwt_1
      boolean var = GWT.isClient();      assertFalse(boolean0);,./GWT_ESTest_2.java,gwt_1
    // EvoSuite did not generate any tests,./HashCode_ESTest.java,guava_2
"      Vector1D var = new Vector1D((-1.0));      double var = var.getX();      assertEquals((-1.0), var, 0.01);",./Vector1D_ESTest_9.java,math_2
"      Vector1D var = new Vector1D((-1.0));      Vector1D var = new Vector1D((-2919.562706480771), var, 140.615, vector1D0);      Vector1D var = new Vector1D(Double.NaN, var, 140.615, vector1D0);      assertEquals(2778.9477064807706, var.getX(), 0.01);      assertEquals(7722550.355354736, var.getNormSq(), 0.01);",./Vector1D_ESTest_7.java,math_2
"      Vector1D var = Vector1D.ZERO;      Vector1D var = new Vector1D(1271.72427645257, var, 1271.72427645257, vector1D0);      Vector1D var = new Vector1D((-819.573), var, 0.0, var, (-1.0), var, 0.0, vector1D0);      assertEquals(0.0, var.getNormSq(), 0.01);",./Vector1D_ESTest_2.java,math_2
"      Vector1D var = Vector1D.ONE;      double var = var.getX();      assertEquals(1.0, var, 0.01);",./Vector1D_ESTest_8.java,math_2
"      Vector1D var = Vector1D.POSITIVE_INFINITY;      Vector1D var = new Vector1D((-1698.08407280118), vector1D0);      Vector1D var = new Vector1D(0.0, var, (-1698.08407280118), var, 0.0, vector1D0);      assertEquals(Double.NEGATIVE_INFINITY, var.getX(), 0.01);      assertFalse(var.equals((Object)vector1D1));",./Vector1D_ESTest_4.java,math_2
"      Vector1D var = new Vector1D((-1.0));      Vector1D var = new Vector1D(Double.NEGATIVE_INFINITY, vector1D0);      Vector1D var = new Vector1D(Double.POSITIVE_INFINITY, var, Double.POSITIVE_INFINITY, var, 0.0, var, (-3285.96543), vector1D1);      assertEquals(Double.POSITIVE_INFINITY, var.getX(), 0.01);      assertEquals(Double.NaN, var.getNormSq(), 0.01);",./Vector1D_ESTest_1.java,math_2
"      Vector1D var = Vector1D.ZERO;      double var = var.getX();      assertEquals(0.0, var, 0.01);",./Vector1D_ESTest_12.java,math_2
"      Vector1D var = new Vector1D((-2921.1576926572925));      Vector1D var = new Vector1D(0.0, var, 0.0, var, (-2921.1576926572925), var, (-2921.1576926572925), vector1D0);      assertEquals(1.7066324530741755E7, var.getX(), 0.01);",./Vector1D_ESTest_3.java,math_2
"      Vector1D var = Vector1D.ZERO;      Vector1D var = Vector1D.ONE;      Vector1D var = new Vector1D(2660.35821267, var, 2660.35821267, var, 2660.35821267, var, 2660.35821267, vector1D1);      double var = Vector1D.distanceSq(var, vector1D0);      assertEquals(6.369755237748644E7, var, 0.01);",./Vector1D_ESTest_10.java,math_2
"      Vector1D var = Vector1D.ONE;      Vector1D var = Vector1D.ZERO;      Vector1D var = new Vector1D(0.0, var, 1.0, var, 1.0, vector1D1);      assertEquals(1.0, var.getX(), 0.01);",./Vector1D_ESTest_5.java,math_2
"      Vector1D var = new Vector1D((-1.0));      Vector1D var = new Vector1D((-2919.562706480771), var, 140.615, vector1D0);      Vector1D var = new Vector1D(Double.NaN, var, (-1.0), vector1D1);      assertEquals(2778.9477064807706, var.getX(), 0.01);",./Vector1D_ESTest_6.java,math_2
"      Vector1D var = new Vector1D((-1.0));      // Undeclared exception!      try {         Vector1D.distanceSq((Vector1D) null, vector1D0);        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""org.apache.commons.math3.geometry.euclidean.oned.Vector1D"", e);      }",./Vector1D_ESTest_11.java,math_2
"      Vector1D var = Vector1D.ZERO;      Vector1D var = new Vector1D(2660.35821267, var, 2660.35821267, var, 2660.35821267, var, 2660.35821267, vector1D0);      double var = Vector1D.distanceSq(var, vector1D1);      assertEquals(0.0, var, 0.01);      assertEquals(0.0, var.getX(), 0.01);",./Vector1D_ESTest_0.java,math_2
      Path var = new Path();      Path var = new Path();      boolean var = var.equals(path0);      assertTrue(boolean0);,./Path_ESTest_0.java,graphstream_2
"      Path var = new Path();      Path var = new Path();      var.nodePath = null;      // Undeclared exception!      try {         var.equals(path0);        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""org.graphstream.graph.Path"", e);      }",./Path_ESTest_1.java,graphstream_2
"      ArrayList<Object> var = new ArrayList<Object>();      assertEquals(0, var.size());",./ArrayList_ESTest_3.java,jdk_2
      ArrayList<Object> var = new ArrayList<Object>(518);      assertFalse(var.contains(518));,./ArrayList_ESTest_1.java,jdk_2
"      ArrayList<Object> var = null;      try {        var = new ArrayList<Object>((-3651));        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // Illegal Capacity: -3651         //         verifyException(""newjdkname.ArrayList"", e);      }",./ArrayList_ESTest_0.java,jdk_2
      ArrayList<ArrayList<Object>> var = new ArrayList<ArrayList<Object>>(0);      ArrayList<ArrayList<Object>> var = new ArrayList<ArrayList<Object>>(arrayList0);      assertTrue(var.isEmpty());,./ArrayList_ESTest_2.java,jdk_2
"      ArrayList<Object> var = new ArrayList<Object>();      Object[] var = new Object[4];      var.elementData = objectArray0;      // Undeclared exception!      try {         var.remove(0);        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");            } catch(ArrayIndexOutOfBoundsException e) {         //         // -1         //         verifyException(""newjdkname.ArrayList"", e);      }",./ArrayList_ESTest_3.java,jdk_1
"      ArrayList<Object> var = null;      try {        var = new ArrayList<Object>((-1226));        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // Illegal Capacity: -1226         //         verifyException(""newjdkname.ArrayList"", e);      }",./ArrayList_ESTest_1.java,jdk_1
      ArrayList<Object> var = new ArrayList<Object>(0);      assertFalse(var.contains(0));,./ArrayList_ESTest_0.java,jdk_1
"      ArrayList<Object> var = new ArrayList<Object>();      ArrayList<Object> var = new ArrayList<Object>(arrayList0);      assertEquals(0, var.size());",./ArrayList_ESTest_2.java,jdk_1
"      ArrayList<Object> var = new ArrayList<Object>(1);      var.elementData = null;      // Undeclared exception!      try {         var.remove((-429));        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""newjdkname.ArrayList"", e);      }",./ArrayList_ESTest_4.java,jdk_1
"      GWT var = new GWT();      assertEquals("""", var.getUniqueThreadId());",./GWT_ESTest_0.java,gwt_2
"      IndexRequest var = new IndexRequest();      assertFalse(var.isRetry());      assertEquals((-3L), var.version());      assertEquals((-1L), var.getAutoGeneratedTimestamp());",./IndexRequest_ESTest_2.java,elasticsearch_2
"      XContentType var = XContentType.JSON;      HashMap<XContentType, XContentType> var = new HashMap<XContentType, XContentType>();      IndexRequest var = new IndexRequest("".[+r%E(X 4[v!"", "".[+r%E(X 4[v!"");      IndexRequest var = var.source((Map) var, xContentType0);      assertFalse(var.isRetry());      assertEquals((-3L), var.version());      assertEquals((-1L), var.getAutoGeneratedTimestamp());",./IndexRequest_ESTest_3.java,elasticsearch_2
"      IndexRequest var = new IndexRequest("""", """", ""n/a, actual length: ["");      assertEquals((-3L), var.version());      assertFalse(var.isRetry());      assertEquals("""", var.type());      assertEquals(""n/a, actual length: ["", var.id());      assertEquals((-1L), var.getAutoGeneratedTimestamp());      assertEquals("""", var.index());",./IndexRequest_ESTest_0.java,elasticsearch_2
"      HashMap<XContentType, XContentType> var = new HashMap<XContentType, XContentType>();      IndexRequest var = new IndexRequest(""+5%'MEu!rx"");      // Undeclared exception!      try {         var.source((Map) var, (XContentType) null);        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // No matching content type for null         //         verifyException(""org.elasticsearch.common.xcontent.XContentFactory"", e);      }",./IndexRequest_ESTest_5.java,elasticsearch_2
"      IndexRequest var = new IndexRequest(""e"", ""_na_"", ""_na_"");      HashMap<XContentType, XContentType> var = new HashMap<XContentType, XContentType>();      XContentType var = XContentType.CBOR;      Requests.INDEX_CONTENT_TYPE = xContentType0;      // Undeclared exception!      try {         var.source((Map) var, Requests.INDEX_CONTENT_TYPE);        fail(""Expecting exception: NoClassDefFoundError"");            } catch(NoClassDefFoundError e) {         //         // com/fasterxml/jackson/dataformat/cbor/CBORParser         //         verifyException(""org.elasticsearch.common.xcontent.XContentFactory"", e);      }",./IndexRequest_ESTest_4.java,elasticsearch_2
"      IndexRequest var = new IndexRequest(""org.elasticsearch.indices.breaker.AllCircuitBreakerStats"", """");      assertFalse(var.isRetry());      assertEquals(""org.elasticsearch.indices.breaker.AllCircuitBreakerStats"", var.index());      assertEquals((-1L), var.getAutoGeneratedTimestamp());      assertEquals((-3L), var.version());      assertEquals("""", var.type());",./IndexRequest_ESTest_1.java,elasticsearch_2
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(0);      DoubleMatrix2D var = var.like2D(0, 0);      assertEquals(0, var.rows());      assertEquals(0, var.columns());",./DenseDoubleMatrix1D_ESTest_0.java,colt_2
"      double[] var = new double[8];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(doubleArray0);      DoubleMatrix2D var = var.like2D(9, 3);      assertEquals(27, var.size());",./DenseDoubleMatrix1D_ESTest_2.java,colt_2
"      double[] var = new double[4];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(1, var, 1, (-241));      // Undeclared exception!      try {         var.like2D((-241), (-241));        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // negative size         //         verifyException(""cern.colt.matrix.impl.AbstractMatrix2D"", e);      }",./DenseDoubleMatrix1D_ESTest_1.java,colt_2
"      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      Boolean var = var.fromString(""]Ox68z"");      assertFalse(boolean0);",./BooleanTypeDescriptor_ESTest_1.java,hibernate_2
"      BooleanTypeDescriptor var = new BooleanTypeDescriptor('u', 'z');",./BooleanTypeDescriptor_ESTest_0.java,hibernate_2
"      HashCode var = HashCode.fromLong((-44L));      long var = var.padToLong();      assertEquals((-44L), long0);",./HashCode_ESTest_2.java,guava_1
"      HashCode var = HashCode.fromLong(1978L);      long var = var.padToLong();      assertEquals(1978L, long0);",./HashCode_ESTest_1.java,guava_1
"      HashCode var = HashCode.fromLong(0L);      long var = var.padToLong();      assertEquals(0L, long0);",./HashCode_ESTest_0.java,guava_1
"      Path var = new Path();      // Undeclared exception!      try {         var.popEdge();        fail(""Expecting exception: EmptyStackException"");            } catch(EmptyStackException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""java.util.Stack"", e);      }",./Path_ESTest_2.java,graphstream_1
      Path var = new Path();      boolean var = var.contains((Edge) null);      assertFalse(boolean0);,./Path_ESTest_3.java,graphstream_1
"      Path var = new Path();      var.nodePath = null;      // Undeclared exception!      try {         var.popEdge();        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""org.graphstream.graph.Path"", e);      }",./Path_ESTest_0.java,graphstream_1
"      Path var = new Path();      var.edgePath = null;      // Undeclared exception!      try {         var.contains((Edge) null);        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""org.graphstream.graph.Path"", e);      }",./Path_ESTest_1.java,graphstream_1
"      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // Undeclared exception!      try {         var.toShort((Boolean) null);        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""org.hibernate.type.descriptor.java.BooleanTypeDescriptor"", e);      }",./BooleanTypeDescriptor_ESTest_2.java,hibernate_1
"      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      Boolean var = Boolean.TRUE;      Short var = var.toShort(boolean0);      assertEquals((short)1, (short)short0);",./BooleanTypeDescriptor_ESTest_1.java,hibernate_1
"      BooleanTypeDescriptor var = new BooleanTypeDescriptor('c', 'c');",./BooleanTypeDescriptor_ESTest_0.java,hibernate_1
"      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      Boolean var = Boolean.FALSE;      Short var = var.toShort(boolean0);      assertEquals((short)0, (short)short0);",./BooleanTypeDescriptor_ESTest_3.java,hibernate_1
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(1523);      SparseDoubleMatrix1D var = new SparseDoubleMatrix1D(1523);      var.stride = 4;      // Undeclared exception!      try {         var.assign((DoubleMatrix1D) sparseDoubleMatrix1D0);        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");            } catch(ArrayIndexOutOfBoundsException e) {         //         // no message in exception (getMessage() returned null)         //      }",./DenseDoubleMatrix1D_ESTest_0.java,colt_1
"      double[] var = new double[3];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(doubleArray0);      var.size = (-1205);      DoubleMatrix1D var = var.assign((DoubleMatrix1D) denseDoubleMatrix1D0);      assertEquals((-1205), var.size());",./DenseDoubleMatrix1D_ESTest_4.java,colt_1
"      double[] var = new double[7];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(0, var, 2132, 1);      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(0, var, 1, 0);      DoubleMatrix1D var = var.assign((DoubleMatrix1D) denseDoubleMatrix1D1);      assertSame(var, doubleMatrix1D0);",./DenseDoubleMatrix1D_ESTest_9.java,colt_1
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(0);      // Undeclared exception!      try {         var.assign((DoubleMatrix1D) null);        fail(""Expecting exception: NullPointerException"");            } catch(NullPointerException e) {         //         // no message in exception (getMessage() returned null)         //      }",./DenseDoubleMatrix1D_ESTest_11.java,colt_1
"      double[] var = new double[7];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(0, var, 0, 0);      int[] var = new int[2];      SelectedDenseDoubleMatrix1D var = new SelectedDenseDoubleMatrix1D(0, var, 7, 0, var, 0);      WrapperDoubleMatrix1D var = new WrapperDoubleMatrix1D(selectedDenseDoubleMatrix1D0);      DoubleMatrix1D var = var.assign((DoubleMatrix1D) wrapperDoubleMatrix1D0);      assertSame(var, doubleMatrix1D0);",./DenseDoubleMatrix1D_ESTest_2.java,colt_1
"      double[] var = new double[8];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(4, var, 4, 4);      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(4);      // Undeclared exception!      try {         var.assign((DoubleMatrix1D) denseDoubleMatrix1D1);        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");            } catch(ArrayIndexOutOfBoundsException e) {         //         // no message in exception (getMessage() returned null)         //      }",./DenseDoubleMatrix1D_ESTest_7.java,colt_1
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(3240);      double[] var = new double[7];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(3240, var, 3240, 3240);      // Undeclared exception!      try {         var.assign((DoubleMatrix1D) denseDoubleMatrix1D1);        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");            } catch(ArrayIndexOutOfBoundsException e) {         //         // no message in exception (getMessage() returned null)         //      }",./DenseDoubleMatrix1D_ESTest_6.java,colt_1
"      double[] var = new double[8];      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(4, var, 4, 4);      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(4, (double[]) null, 1, Integer.MAX_VALUE);      // Undeclared exception!      try {         var.assign((DoubleMatrix1D) denseDoubleMatrix1D1);        fail(""Expecting exception: InternalError"");            } catch(InternalError e) {         //         // no message in exception (getMessage() returned null)         //         verifyException(""cern.colt.matrix.impl.DenseDoubleMatrix1D"", e);      }",./DenseDoubleMatrix1D_ESTest_8.java,colt_1
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(0);      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(0);      DoubleMatrix1D var = var.assign((DoubleMatrix1D) denseDoubleMatrix1D0);      assertEquals(0, var.size());",./DenseDoubleMatrix1D_ESTest_10.java,colt_1
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(544);      var.stride = (-5930);      WrapperDoubleMatrix1D var = new WrapperDoubleMatrix1D(denseDoubleMatrix1D0);      // Undeclared exception!      try {         var.assign((DoubleMatrix1D) wrapperDoubleMatrix1D0);        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");            } catch(ArrayIndexOutOfBoundsException e) {         //         // no message in exception (getMessage() returned null)         //      }",./DenseDoubleMatrix1D_ESTest_3.java,colt_1
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(1366);      double[] var = new double[8];      SparseDoubleMatrix1D var = new SparseDoubleMatrix1D(doubleArray0);      // Undeclared exception!      try {         var.assign((DoubleMatrix1D) sparseDoubleMatrix1D0);        fail(""Expecting exception: IllegalArgumentException"");            } catch(IllegalArgumentException e) {         //         // Incompatible sizes: 1366 matrix and 8 matrix         //         verifyException(""cern.colt.matrix.impl.AbstractMatrix1D"", e);      }",./DenseDoubleMatrix1D_ESTest_5.java,colt_1
"      DenseDoubleMatrix1D var = new DenseDoubleMatrix1D(1523);      SparseDoubleMatrix1D var = new SparseDoubleMatrix1D(1523);      DoubleMatrix1D var = var.assign((DoubleMatrix1D) sparseDoubleMatrix1D0);      assertSame(var, doubleMatrix1D0);",./DenseDoubleMatrix1D_ESTest_1.java,colt_1
"      Vector1D var = Vector1D.ZERO;      Vector1D var = var.POSITIVE_INFINITY.scalarMultiply((-1472.0));      assertEquals(Double.NEGATIVE_INFINITY, var.getX(), 0.01);",./Vector1D_ESTest_9.java,math_1
"      Vector1D var = Vector1D.NEGATIVE_INFINITY;      Vector1D var = new Vector1D((-1621.4281), vector1D0);      Vector1D var = new Vector1D((-1621.4281), var, (-1621.4281), var, (-1621.4281), var, (-1621.4281), vector1D0);      assertTrue(var.isNaN());      assertFalse(var.isNaN());",./Vector1D_ESTest_7.java,math_1
"      Vector1D var = Vector1D.NaN;      Vector1D var = new Vector1D(1.0, var, 0.0, var, 0.0, var, 91.3499831358, vector1D0);      Vector1D var = new Vector1D(1.0, var, 1.0, var, 1.0, vector1D1);      assertFalse(var.isInfinite());",./Vector1D_ESTest_2.java,math_1
      Vector1D var = Vector1D.ZERO;      Vector1D var = var.NaN.scalarMultiply((-812.2059537));      assertFalse(var.isInfinite());,./Vector1D_ESTest_8.java,math_1
"      Vector1D var = Vector1D.ONE;      Vector1D var = new Vector1D(1.0, vector1D0);      Vector1D var = new Vector1D(Double.NaN, var, (-1096.88866791279), var, 0.0, var, (-1096.88866791279), vector1D1);      assertEquals(1.0, var.getX(), 0.01);      assertEquals(Double.NaN, var.getX(), 0.01);",./Vector1D_ESTest_4.java,math_1
"      Vector1D var = Vector1D.POSITIVE_INFINITY;      Vector1D var = var.ONE.scalarMultiply(0.0);      Vector1D var = new Vector1D(0.0, var, 0.0, var, 0.0, vector1D0);      assertEquals(0.0, var.getX(), 0.01);",./Vector1D_ESTest_1.java,math_1
"      Vector1D var = Vector1D.ZERO;      double var = var.getX();      assertEquals(0.0, var, 0.01);",./Vector1D_ESTest_12.java,math_1
"      Vector1D var = Vector1D.ONE;      Vector1D var = new Vector1D(120.4, var, 120.4, var, 120.4, var, 0.0, vector1D0);      Vector1D var = new Vector1D(120.4, var, (-2149.9), vector1D0);      assertEquals(1.7088781964164007E9, var.getNormSq(), 0.01);",./Vector1D_ESTest_3.java,math_1
"      Vector1D var = Vector1D.POSITIVE_INFINITY;      double var = var.getX();      assertEquals(Double.POSITIVE_INFINITY, var, 0.01);",./Vector1D_ESTest_10.java,math_1
"      Vector1D var = Vector1D.ZERO;      Vector1D var = new Vector1D(1.0, var, 0.0, var, Double.NaN, vector1D0);      assertEquals(Double.NaN, var.getNormSq(), 0.01);",./Vector1D_ESTest_5.java,math_1
"      Vector1D var = Vector1D.NEGATIVE_INFINITY;      Vector1D var = new Vector1D((-1621.4281), var, (-1621.4281), vector1D0);      Vector1D var = new Vector1D((-1621.4281), vector1D1);      assertEquals(Double.NEGATIVE_INFINITY, var.getX(), 0.01);",./Vector1D_ESTest_6.java,math_1
"      Vector1D var = new Vector1D((-1470.72));      double var = var.getX();      assertEquals((-1470.72), var, 0.01);",./Vector1D_ESTest_11.java,math_1
"      Vector1D var = Vector1D.ONE;      Vector1D var = new Vector1D(1.0, vector1D0);      Vector1D var = new Vector1D(0.0, var, (-1096.88866791279), var, 796.49187634283, var, 0.0, vector1D0);      assertEquals((-300.39679156996), var.getX(), 0.01);",./Vector1D_ESTest_0.java,math_1
