test,file,project
"@Test
    public void testParent() {
        String parent = ""test"";
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        indexRequest.parent(parent);
        assertEquals(parent, indexRequest.parent());
    }",./CodexTest_0_3_5.java,elasticsearch_1
"@Test
    public void testParent() {
        String expected = ""test"";
        String actual = new String(expected);
        assertEquals(expected, actual);
    }",./CodexTest_0_5_8.java,elasticsearch_1
"@Test
    public void testGetParent() {
        String parent = """";
        String index = """";
        String type = """";
        String id = """";
        IndexRequest indexRequest = new IndexRequest(index, type, id);
        indexRequest.parent(parent);
        assertEquals(parent, indexRequest.parent());
    }",./CodexTest_0_5_5.java,elasticsearch_1
"@Test
    public void testParent() {
        assertEquals(null, new IndexRequest().parent());
    }",./CodexTest_0_4_7.java,elasticsearch_1
"@Test
    public void testParent() {
        assertEquals(""testParent"", ""testParent"");
    }",./CodexTest_0_6_5.java,elasticsearch_1
"@Test
    public void testParent() {
        String parent = ""parent"";
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        indexRequest.parent(parent);
        assertEquals(parent, indexRequest.parent());
    }",./CodexTest_0_0_1.java,elasticsearch_1
"@Test
    public void testParent() {
        assertEquals(""parent"", new IndexRequest().parent());
    }",./CodexTest_0_2_1.java,elasticsearch_1
"@Test
    public void testParent() {
        String parent = ""parent"";
        IndexRequest indexRequest = new IndexRequest("""");
        indexRequest.parent(parent);
        assertEquals(parent, indexRequest.parent());
    }",./CodexTest_0_1_3.java,elasticsearch_1
"@Test
    public void testParent() {
        String parent = ""parent"";
        IndexRequest indexRequest = new IndexRequest(parent, ""type"", ""id"");
        assertEquals(parent, indexRequest.parent());
    }",./CodexTest_0_3_7.java,elasticsearch_1
"@Test
    public void testParent() {
        String expected = ""bar"";
        String actual = new String(expected);
        assertEquals(expected, actual);
    }",./CodexTest_0_6_1.java,elasticsearch_1
"@Test
    public void testParent() {
        String expected = ""test"";
        String actual = ""test"";
        assertEquals(expected, actual);
    }",./CodexTest_0_7_2.java,elasticsearch_1
"@Test
    public void testParent() {
        assertEquals("""", new IndexRequest("""").parent());
    }",./CodexTest_0_6_2.java,elasticsearch_1
"@Test
    public void testParent() {
        assertEquals(""parent"", new IndexRequest(""index"").parent(""parent"").parent());
    }",./CodexTest_0_6_4.java,elasticsearch_1
"@Test
  public void testAdd() {
    AlgVector a = new AlgVector(new double[] {1, 2, 3});
    AlgVector b = new AlgVector(new double[] {4, 5, 6});
    AlgVector c = a.add(b);
    assertEquals(""Length differs"", 3, c.numElements());
    assertEquals(""1. value differs"", 5.0, c.getElement(0), 1e-7);
    assertEquals(""2. value differs"", 7.0, c.getElement(1), 1e-7);
    assertEquals(""3. value differs"", 9.0, c.getElement(2), 1e-7);
  }",./CodexTest_0_5_10.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[] {1, 2, 3});
    AlgVector v2 = new AlgVector(new double[] {4, 5, 6});
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", v1.numElements(), v3.numElements());
    for (int i = 0; i < v1.numElements(); i++) {
      assertEquals((i+1) + "". value differs"", v1.getElement(i) + v2.getElement(i), v3.getElement(i));
    }
  }",./CodexTest_0_3_5.java,weka_1
"@Test
  public void testAdd() {
    double[] data = {2.3, 1.2, 5.0};
    AlgVector v = new AlgVector(data);
    double[] data2 = {3.4, 1.1, 2.0};
    AlgVector v2 = new AlgVector(data2);
    AlgVector res = v.add(v2);
    assertEquals(""Length differs"", data.length, res.numElements());
    for (int i = 0; i < data.length; i++) {
      assertEquals((i+1) + "". value differs"", data[i]+data2[i], res.getElement(i));
    }
  }",./CodexTest_0_7_4.java,weka_1
"@Test
      public void testLengthConstructor() {
    int len = 22;
    AlgVector v = new AlgVector(len);
    assertEquals(""Length differs"", len, v.numElements());
  }",./CodexTest_0_7_6.java,weka_1
"@Test
   public void testAdd() {
			double[] data1 = {1.0, 2.0, 3.0};
			double[] data2 = {4.0, 5.0, 6.0};
			AlgVector v1 = new AlgVector(data1);
			AlgVector v2 = new AlgVector(data2);
			AlgVector v3 = v1.add(v2);
			double eps = 1e-9;
			for (int i = 0; i < v1.numElements(); i++) {
				assertEquals((i+1) + "". value differs"", data1[i] + data2[i], v3.getElement(i), eps);
			}
		}",./CodexTest_0_7_5.java,weka_1
"@Test
  public void testAdd() {
    double[] data = {2.3, 1.2, 5.0};
    AlgVector v = new AlgVector(data);
    AlgVector w = new AlgVector(data);
    AlgVector u = v.add(w);
    AlgVector expected = new AlgVector(new double[]{2.3*2, 1.2*2, 5.0*2});
    assertTrue(expected.equals(u));
  }",./CodexTest_0_5_8.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[] {1.0, 2.0, 3.0});
    AlgVector v2 = new AlgVector(new double[] {4.0, 5.0, 6.0});
    AlgVector v3 = v1.add(v2);
    assertEquals(5.0, v3.getElement(0));
    assertEquals(7.0, v3.getElement(1));
    assertEquals(9.0, v3.getElement(2));
  }",./CodexTest_0_5_5.java,weka_1
"@Test
  public void testLengthConstructor() {
    int len = 5;
    AlgVector v = new AlgVector(len);
    assertEquals(""Length differs"", len, v.numElements());
  }",./CodexTest_0_9_5.java,weka_1
"@Test
  public void testLengthConstructor() {
    int len = 22;
    AlgVector v = new AlgVector(len);
    assertEquals(""Length differs"", len, v.numElements());
  }",./CodexTest_0_7_1.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[]{1, 2, 3});
    AlgVector v2 = new AlgVector(new double[]{2, 3, 4});
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", v1.numElements(), v3.numElements());
    for (int i = 0; i < v1.numElements(); i++) {
      assertEquals((i+1) + "". value differs"", v1.getElement(i) + v2.getElement(i), v3.getElement(i));
    }
  }",./CodexTest_0_2_3.java,weka_1
"@Test
   public void testAdd() {
        double[] aData = {
                1, 2, 3
        };
        double[] bData = {
                4, 5, 6
        };
        double[] eData = {
                5, 7, 9
        };
        AlgVector a = new AlgVector(aData);
        AlgVector b = new AlgVector(bData);
        AlgVector expected = new AlgVector(eData);
        AlgVector e = (AlgVector) a.add(b);
        assertEquals(""Result does not match: "", expected, e);
    }",./CodexTest_0_9_6.java,weka_1
"@Test
  public void testAdd() {
    AlgVector a = new AlgVector(new double[] {1, 2, 3});
    AlgVector b = new AlgVector(new double[] {1, 2, 3});
    AlgVector c = a.add(b);
    assertTrue(""Vector not created"", (c != null));
    assertEquals(""Length differs"", 3, c.numElements());
    assertEquals(""1. value differs"", 2.0, c.getElement(0));
    assertEquals(""2. value differs"", 4.0, c.getElement(1));
    assertEquals(""3. value differs"", 6.0, c.getElement(2));
  }",./CodexTest_0_5_7.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[]{1.0, 2.0, 3.0});
    AlgVector v2 = new AlgVector(new double[]{4.0, 5.0, 6.0});
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", 3, v3.numElements());
    assertEquals(""1. value differs"", 5.0, v3.getElement(0));
    assertEquals(""2. value differs"", 7.0, v3.getElement(1));
    assertEquals(""3. value differs"", 9.0, v3.getElement(2));
  }",./CodexTest_0_2_7.java,weka_1
"@Test
    public void testAdd() {
        AlgVector v1 = new AlgVector(new double[] {1,2,3});
        AlgVector v2 = new AlgVector(new double[] {4,5,6});
        AlgVector v3 = v1.add(v2);
        assertEquals(5, v3.getElement(0), 0.0001);
        assertEquals(7, v3.getElement(1), 0.0001);
        assertEquals(9, v3.getElement(2), 0.0001);
    }",./CodexTest_0_4_7.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[] {1.0, 2.0});
    AlgVector v2 = new AlgVector(new double[] {3.0, 4.0});
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", v1.numElements(), v3.numElements());
    assertEquals(4.0, v3.getElement(0), 1e-10);
    assertEquals(6.0, v3.getElement(1), 1e-10);
  }",./CodexTest_0_3_1.java,weka_1
"@Test
  public void testAdd() {
    int len = 22;
    AlgVector v = new AlgVector(len);
    AlgVector w = new AlgVector(len);
    for (int i = 0; i < len; i++) {
      v.setElement(i, i);
      w.setElement(i, i+1);
    }
    AlgVector z = v.add(w);
    for (int i = 0; i < len; i++) {
      assertEquals((i+1) + "". value differs"", i+i+1, z.getElement(i));
    }
  }",./CodexTest_0_3_8.java,weka_1
"@Test
  public void testAdd() {
    double[] data = {2.3, 1.2, 5.0};
    AlgVector v = new AlgVector(data);
    AlgVector v2 = new AlgVector(data);
    AlgVector v3 = v.add(v2);
    for (int i = 0; i < data.length; i++) {
      assertEquals((i+1) + "". value differs"", data[i] + data[i], v3.getElement(i));
    }
  }",./CodexTest_0_4_3.java,weka_1
"@Test
  public void testAdd() {
    double[] data = {1.0, 2.0, 3.0};
    AlgVector v1 = new AlgVector(data);
    AlgVector v2 = new AlgVector(data);
    AlgVector v3 = v1.add(v2);
    for (int i = 0; i < data.length; i++) {
      assertEquals((i+1) + "". value differs"", 2.0 * data[i], v3.getElement(i));
    }
  }",./CodexTest_0_3_4.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v = new AlgVector(2);
    AlgVector v1 = new AlgVector(2);
    v.setElement(0, 1.0);
    v.setElement(1, 2.0);
    v1.setElement(0, 3.0);
    v1.setElement(1, 4.0);
    AlgVector v2 = v.add(v1);
    assertEquals(v2.getElement(0), 4.0, 0.0);
    assertEquals(v2.getElement(1), 6.0, 0.0);
  }",./CodexTest_0_5_3.java,weka_1
"@Test
  public void testSum() {
    double[] data = {1.5, -3.2, 2.3, 5.6};
    AlgVector v1 = new AlgVector(data);
    AlgVector v2 = new AlgVector(data);
    AlgVector v3 = v1.add(v2);
    for (int i = 0; i < v3.numElements(); i++) {
      assertEquals((i+1) + "". value differs"", data[i] * 2.0, v3.getElement(i), 0.0);
    }
  }",./CodexTest_0_7_7.java,weka_1
"@Test
    public void testAdd() {
        AlgVector v1 = new AlgVector(new double[]{1, 2, 3});
        AlgVector v2 = new AlgVector(new double[]{2, 3, 4});
        AlgVector v3 = v1.add(v2);
        assertEquals(3, v3.getElement(0), 1e-10);
        assertEquals(5, v3.getElement(1), 1e-10);
        assertEquals(7, v3.getElement(2), 1e-10);
    }",./CodexTest_0_4_9.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[]{1.0, 2.0, 3.0});
    AlgVector v2 = new AlgVector(new double[]{4.0, 5.0, 6.0});
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", 3, v3.numElements());
    assertEquals(""0. value differs"", 5.0, v3.getElement(0), 1e-7);
    assertEquals(""1. value differs"", 7.0, v3.getElement(1), 1e-7);
    assertEquals(""2. value differs"", 9.0, v3.getElement(2), 1e-7);
  }",./CodexTest_0_3_7.java,weka_1
"@Test
  public void testAdd() {
    AlgVector a = new AlgVector(new double[]{1, 2, 3});
    AlgVector b = new AlgVector(new double[]{4, 5, 6});
    AlgVector c = a.add(b);
    assertEquals(""Length differs"", 3, c.numElements());
    assertEquals(""1. value differs"", 5.0, c.getElement(0));
    assertEquals(""2. value differs"", 7.0, c.getElement(1));
    assertEquals(""3. value differs"", 9.0, c.getElement(2));
  }",./CodexTest_0_5_4.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[] {1.0, 2.0, 3.0});
    AlgVector v2 = new AlgVector(new double[] {4.0, 5.0, 6.0});
    AlgVector v3 = v1.add(v2);
    assertEquals(v3.getElement(0), 5.0, 0.0);
    assertEquals(v3.getElement(1), 7.0, 0.0);
    assertEquals(v3.getElement(2), 9.0, 0.0);
  }",./CodexTest_0_4_5.java,weka_1
"@Test
  public void testAdd() {
    double[] data = {2.3, 1.2, 5.0};
    AlgVector v1 = new AlgVector(data);
    AlgVector v2 = new AlgVector(data);
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", data.length, v3.numElements());
    for (int i = 0; i < data.length; i++)
      assertEquals((i+1) + "". value differs"", data[i] + data[i], v3.getElement(i));
  }",./CodexTest_0_3_2.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[]{2, 3, 4});
    AlgVector v2 = new AlgVector(new double[]{1, 2, 3});
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", 3, v3.numElements());
    assertEquals(""Element 1 differs"", 3, v3.getElement(0), 0.00001);
    assertEquals(""Element 2 differs"", 5, v3.getElement(1), 0.00001);
    assertEquals(""Element 3 differs"", 7, v3.getElement(2), 0.00001);
  }",./CodexTest_0_4_1.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v1 = new AlgVector(new double[]{1, 2, 3});
    AlgVector v2 = new AlgVector(new double[]{4, 5, 6});
    AlgVector v3 = v1.add(v2);
    assertEquals(""Length differs"", v1.numElements(), v3.numElements());
    for (int i = 0; i < v1.numElements(); i++)
      assertEquals((i+1) + "". value differs"", v1.getElement(i) + v2.getElement(i), v3.getElement(i));
  }",./CodexTest_0_3_10.java,weka_1
"@Test
     public void testAddition() {
	AlgVector m1 = new AlgVector(2);
	m1.setElement(0, 5);
	m1.setElement(1, 4);
	AlgVector m2 = new AlgVector(2);
	m2.setElement(0, 2);
	m2.setElement(1, 1);
	AlgVector m3 = new AlgVector(2);
	m3.setElement(0, 7);
	m3.setElement(1, 5);
	AlgVector result = m1.add(m2);
	assertEquals(m3, result);
    }",./CodexTest_0_9_8.java,weka_1
"@Test
  public void testAdd() {
    AlgVector v = new AlgVector(new double[]{1, 2, 3});
    AlgVector w = new AlgVector(new double[]{4, 5, 6});
    AlgVector x = v.add(w);
    assertEquals(""Length differs"", 3, x.numElements());
    assertEquals(""Value 1 differs"", 5, x.getElement(0), 1e-15);
    assertEquals(""Value 2 differs"", 7, x.getElement(1), 1e-15);
    assertEquals(""Value 3 differs"", 9, x.getElement(2), 1e-15);
  }",./CodexTest_0_6_7.java,weka_1
"@Test
    public void testAdd() {
    AlgVector v1 = new AlgVector(2);
    AlgVector v2 = new AlgVector(2);
    v1.setElement(0, 1.0);
    v1.setElement(1, 1.0);
    v2.setElement(0, 1.0);
    v2.setElement(1, 1.0);
    AlgVector v3 = v1.add(v2);
    assertEquals(""Sum differs"", 2.0, v3.getElement(0));
    assertEquals(""Sum differs"", 2.0, v3.getElement(1));
  }",./CodexTest_0_6_2.java,weka_1
"@Test
    public void testAdd() {
    AlgVector v1 = new AlgVector(new double[]{1, 2, 3, 4});
    AlgVector v2 = new AlgVector(new double[]{10, 20, 30, 40});
    v1.add(v2);
    AlgVector v3 = new AlgVector(new double[]{11, 22, 33, 44});
    assertEquals(""Result differs"", v3, v1);
  }",./CodexTest_0_5_9.java,weka_1
"@Test
  public void testAddMethod() {
    AlgVector a = new AlgVector(new double[]{0, 2, 4});
    AlgVector b = new AlgVector(new double[]{2, 0, 2});
    AlgVector c = new AlgVector(new double[]{2., 2., 6.});
    assertEquals(""Wrong addition result"", c, a.add(b));
  }",./CodexTest_0_9_10.java,weka_1
"@Test
  public void testAdd() {
    AlgVector a = new AlgVector(new double[]{1, 2, 3});
    AlgVector b = new AlgVector(new double[]{4, 5, 6});
    AlgVector c = a.add(b);
    assertEquals(""Length differs"", a.numElements(), c.numElements());
    for (int i = 0; i < a.numElements(); i++)
      assertEquals((i+1) + "". value differs"", a.getElement(i) + b.getElement(i), c.getElement(i));
  }",./CodexTest_0_2_6.java,weka_1
"@Test
  public void testGetAsInstance() {
    int numAtt = 3;
    int numInst = 10;
    int numClasses = 3;
    Instances model = new Instances(""Test"", 
				    new FastVector(numAtt), numInst);
    for (int i = 0; i < numAtt; i++) {
      if (i == numAtt - 1) {
	model.insertAttributeAt(new Attribute(""Att"" + i, numClasses), i);
      } else {
	model.insertAttributeAt(new Attribute(""Att"" + i), i);
      }
    }
    model.insertAttributeAt(new Attribute(""Class"", numClasses), numAtt);
    model.setClassIndex(numAtt);
    double[] values = new double[numAtt];
    for (int i = 0; i < numInst; i++) {
      for (int j = 0; j < numAtt; j++) {
	values[j] = i + j;
      }
      model.add(new DenseInstance(1.0, values));
    }
    AlgVector v = new AlgVector(values);
    try {
      Instance inst = v.getAsInstance(model, new Random(1));
      assertEquals(""Number of attributes differ"", numAtt, inst.numAttributes());
      for (int i = 0; i < numAtt; i++) {
	if (i == numAtt - 1) {
	  assertEquals(""Value differs"", (int) inst.value(i), 1);
	} else {
	  assertEquals(""Value differs"", inst.value(i), i + i);
	}
      }
    } catch (Exception ex) {
      fail(""Exception: "" + ex.getMessage());
    }
  }",./CodexTest_0_4_4.java,weka_2
"@Test
    public void testConstructor() {
    	
        assertNotNull(new AlgVector(3));
    }",./CodexTest_0_9_5.java,weka_2
"@Test
    public void testGetAsInstance() {
		double[] data = { 2.3, 1.2, 5.0 };
		AlgVector v = new AlgVector(data);
		Random random = new Random(1);
		try {
			Instance inst = v.getAsInstance(null, random);
			assertEquals(1.2, inst.value(1), 1e-15);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}",./CodexTest_0_6_6.java,weka_2
"@Test
  public void testGetAsInstance() {
    AlgVector v = new AlgVector(new double[]{1.0, 2.0, 3.0});
    try {
      v.getAsInstance(null, null);
      fail(""Exception expected, but not thrown"");
    } catch (Exception ex) {
      // expected
    }
  }",./CodexTest_0_5_4.java,weka_2
"@Test
  public void testIsClientWithoutGwt() {
    // GWT.isClient() should always be false if running with java -Dgwt.args=...
    assertFalse(GWT.isClient());
  }",./CodexTest_0_9_3.java,gwt_1
"@Test
    public void testIsClient() {
        assertTrue(GWT.isClient());
    }",./CodexTest_0_3_1.java,gwt_1
"@Test
  public void testIsClient() {
    assertEquals(true, GWT.isClient());
  }",./CodexTest_0_8_1.java,gwt_1
"@Test
    public void testIsClient() {
        assertTrue(GWT.isClient());
    }",./CodexTest_0_2_2.java,gwt_1
"@Test
  public void testIsClient() {
    assertTrue(GWT.isClient());
  }",./CodexTest_0_2_1.java,gwt_1
"@Test
  public void testIsClient() {
    if (!GWT.isClient()) {
      // TODO(user): deferred binding failure for requirement
      // com.google.gwt.user.client.ui.Widget
      return;
    }
    assertTrue(GWT.isClient());
  }",./CodexTest_0_6_1.java,gwt_1
"@Test
  public void testIsClient() {
    assertFalse(GWT.isClient());
  }",./CodexTest_0_4_1.java,gwt_1
"@Test
    public void testIsClient() {
        assertFalse(GWT.isClient());
    }",./CodexTest_0_6_2.java,gwt_1
"@Test
    public void testIsClient() {
      // Test if the method works well in your situation
      assertTrue(GWT.isClient());
    }",./CodexTest_0_8_2.java,gwt_1
"@Test
  public void testIsClient() {
    boolean isClient;
    if(GWT.isClient()) {
      isClient = true;
    } else {
      isClient = false;
    }
    assertFalse(isClient);
  }",./CodexTest_0_8_3.java,gwt_1
"@Test
  public void testIntsMin_null() {
    try {
      Ints.min(null);
      fail();
    } catch (NullPointerException expected) {
    }
  }",./CodexTest_0_7_4.java,guava_2
"@Test
    public void testWriteBytesToArray() {
		HashCode hash = HashCode.fromInt(0x1234);
		byte[] dest = new byte[8];
		assertEquals(1, hash.writeBytesTo(dest, 2, 8));
		byte[] expected = { 0, 0, 0x12, 0x34, 0, 0, 0, 0 };
		assertTrue(Arrays.equals(expected, dest));
	}",./CodexTest_0_9_3.java,guava_2
"@Test
  public void testWriteBytesTo() {
    byte[] dest = new byte[4];
    HashCode hashCode = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);
    int bytesWritten = hashCode.writeBytesTo(dest, 0, dest.length);
    assertEquals(4, bytesWritten);
    assertEquals(hashCode.asBytes()[0], dest[0]);
    assertEquals(hashCode.asBytes()[1], dest[1]);
    assertEquals(hashCode.asBytes()[2], dest[2]);
    assertEquals(hashCode.asBytes()[3], dest[3]);
  }",./CodexTest_0_3_1.java,guava_2
"@Test
  public void testWriteBytesTo() {
    byte[] dest = new byte[4];
    int offset = 1;
    int maxLength = 3;
    HashCode hashCode = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);
    int actualLength = hashCode.writeBytesTo(dest, offset, maxLength);
    assertEquals(maxLength, actualLength);
    assertEquals(0, dest[0]);
    assertEquals(0x9b, dest[1] & 0xff);
    assertEquals(0x98, dest[2] & 0xff);
    assertEquals(0x58, dest[3] & 0xff);
  }",./CodexTest_0_3_4.java,guava_2
"@Test
  public void testWriteBytesTo() {
    byte[] dest = new byte[3];
    int written = HashCode.fromInt(0x12345678).writeBytesTo(dest, 0, dest.length);
    assertEquals(3, written);
    assertEquals(0x12, dest[0]);
    assertEquals(0x34, dest[1]);
    assertEquals(0x56, dest[2]);
  }",./CodexTest_0_2_1.java,guava_2
"@Test
  public void testWriteBytesTo() {
    byte[] dest = new byte[10];
    byte[] expected = new byte[10];
    HashCode hashCode = Hashing.sha1().hashLong(42L);
    System.arraycopy(hashCode.asBytes(), 0, expected, 0, 5);
    int writtenBytes = hashCode.writeBytesTo(dest, 0, 5);
    assertEquals(5, writtenBytes);
    assertEquals(expected, dest);
  }",./CodexTest_0_4_8.java,guava_2
"@Test
     public void testRehashLong() {
    for (long i = 0; i < 1000000; i++) {
      HashCode hashCode = Hashing.goodFastHash(64)
          .hashLong(i);
      assertEquals(Long.valueOf(i).hashCode(), hashCode.asInt());
    }
  }",./CodexTest_0_8_8.java,guava_2
"@Test
  public void testRoundTripHashCodeUsingBaseEncoding() {
    HashCode hash1 = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);
    HashCode hash2 = HashCode.fromBytes(BaseEncoding.base16().lowerCase().decode(hash1.toString()));
    assertEquals(hash1, hash2);
  }",./CodexTest_0_6_1.java,guava_2
"@Test
    public void testArrays_equalityComparison() {
        assertTrue(Arrays.equals(new int[] { (int) 0 }, new int[] { (int) 0 }));
        assertFalse(Arrays.equals(new int[] { (int) 1 }, new int[] { (int) 0 }));
        assertFalse(Arrays.equals(new int[] { (int) 0 }, new int[] { (int) 1 }));
        assertFalse(Arrays.equals(new int[] { (int) 1 }, new int[] { (int) 2 }));
    }",./CodexTest_0_9_10.java,guava_2
"@Test
    public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_5_1.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 1.0e-12);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_7_6.java,math_2
"@Test
    public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_9_7.java,math_2
"@Test
    public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_7_5.java,math_2
"@Test
  public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0, Vector1D.distance(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector1D.distance(v1, v2), 1.0e-12);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_9_1.java,math_2
"@Test
    public void testDistanceSq() {
        final Vector1D v1 = new Vector1D(1);
        final Vector1D v2 = new Vector1D(4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(1), new Vector1D(1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_9_5.java,math_2
"@Test
     public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_7_1.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distance(v1, v2), 1.0e-12);
    }",./CodexTest_0_9_6.java,math_2
"@Test
    public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0, Vector1D.distance(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector1D.distance(v1, v2), 1.0e-12);
    }",./CodexTest_0_3_1.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_0_1.java,math_2
"@Test
    public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_8_6.java,math_2
"@Test
    public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0, Vector1D.distance(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector1D.distance(v1, v2), 1.0e-12);
    }",./CodexTest_0_7_3.java,math_2
"@Test
  public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_5_3.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0 * 5.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_8_4.java,math_2
"@Test
    public void testDistanceSq() {
    Vector1D v1 = new Vector1D(1);
    Vector1D v2 = new Vector1D(-4);
    Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
    Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_8_8.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 0);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 0);
    }",./CodexTest_0_6_1.java,math_2
"@Test
  public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_7_2.java,math_2
"@Test
      public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(25.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_9_2.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_5_2.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0, Vector1D.distanceSq(v1, v2), 0);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 0);
    }",./CodexTest_0_6_2.java,math_2
"@Test
    public void testDistance() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0, Math.abs(Vector1D.distanceSq(v1, v2) - 25), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_8_2.java,math_2
"@Test
  public void testDistanceSq() {
      Vector1D v1 = new Vector1D(1);
      Vector1D v2 = new Vector1D(-4);
      Assert.assertEquals(5.0 * 5.0, Vector1D.distanceSq(v1, v2), 1.0e-12);
  }",./CodexTest_0_9_10.java,math_2
"@Test
    public void testDistanceSq() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(25, Vector1D.distanceSq(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNormSq(), Vector1D.distanceSq(v1, v2), 1.0e-12);
    }",./CodexTest_0_8_3.java,math_2
"@Test
    public void testEquals() {
        Path p1 = new Path();
        Path p2 = new Path();
        assertTrue(p1.equals(p2));
    }",./CodexTest_0_4_4.java,graphstream_2
"@Test
    public void testEquals() {
        Path p = new Path();
        Assert.assertEquals(p, p);
    }",./CodexTest_0_9_3.java,graphstream_2
"@Test
    public void testEquals() {
        Path p1 = new Path();
        Path p2 = new Path();
        assertEquals(p1, p2);
        assertEquals(p1.hashCode(), p2.hashCode());
    }",./CodexTest_0_6_6.java,graphstream_2
"@Test
    public void testContains() {
        List<String> list = new ArrayList<String>();
        list.add(""foo"");
        assertTrue(list.contains(""foo""));
        assertFalse(list.contains(""bar""));
    }",./CodexTest_0_3_5.java,jdk_2
"@Test
    public void testContains() {
        List<Integer> list = new ArrayList<Integer>();
        for (int i = -2; i < 3; i++) {
            list.add(i);
        }
        assertTrue(list.contains(0));
        assertTrue(list.contains(-2));
        assertTrue(list.contains(2));
        assertFalse(list.contains(3));
        assertFalse(list.contains(-3));
    }",./CodexTest_0_4_4.java,jdk_2
"@Test
    public void testContains() {
        ArrayList<String> list = new ArrayList<String>();
        list.add(""a"");
        list.add(""b"");
        assertTrue(list.contains(""a""));
        assertFalse(list.contains(""c""));
    }",./CodexTest_0_7_4.java,jdk_2
"@Test
    public void testContainsShouldReturnTrueWhenItemIsInTheList() {
        // given
        List<String> underTest = new LinkedList<>();
        underTest.add(""item1"");
        underTest.add(""item2"");
        // when
        boolean result = underTest.contains(""item1"");
        // then
        assertTrue(result);
    }",./CodexTest_0_7_8.java,jdk_2
"@Test
  public void testContainsShouldReturnTrueWhenElementPresent() {
        // given
        List<String> underTest = new ArrayList<>();
        underTest.add(""A"");
        // when
        boolean result = underTest.contains(""A"");
        // then
        assertTrue(result);
    }",./CodexTest_0_5_5.java,jdk_2
"@Test
    public void testContains() {
        Random random = new Random();
        for (int i = 0; i < 100; i++) {
            int len = random.nextInt(100);
            List<Integer> list = new ArrayList<Integer>(len);
            for (int j = 0; j < len; j++) {
                list.add(j);
            }
            Collections.shuffle(list, random);
            for (int j = 0; j < len; j++) {
                assertTrue(""list should contain value "" + j, list.contains(j));
            }
        }
    }",./CodexTest_0_7_1.java,jdk_2
"@Test
    public void testContains() {
        // given
        List<Object> list = new ArrayList<>();
        list.add(""Y"");
        list.add(""N"");
        // when
        boolean result = list.contains(""Y"");
        // then
        assertTrue(result);
    }",./CodexTest_0_8_1.java,jdk_2
"@Test
    public void testContains() {
        // given
        List<String> underTest = new ArrayList<String>();
        underTest.add(""a"");
        underTest.add(""b"");
        underTest.add(""c"");
        // when
        boolean result = underTest.contains(""a"");
        // then
        assertTrue(result);
    }",./CodexTest_0_4_2.java,jdk_2
"@Test
    public void testContainsObject() {
        List<String> a = new ArrayList<String>();
        a.add(""a"");
        a.add(""b"");
        assertTrue(a.contains(""a""));
        assertTrue(a.contains(""b""));
        assertFalse(a.contains(""c""));
        a.add(null);
        assertTrue(a.contains(null));
        assertFalse(a.contains(new Object()));
    }",./CodexTest_0_8_6.java,jdk_2
"@Test
    public void testContainsShouldReturnTrueWhenContainsGivenElement() {
        // given
        List<String> underTest = new ArrayList<String>();
        underTest.add(""a"");
        underTest.add(""b"");
        // when
        boolean result = underTest.contains(""a"");
        // then
        assertTrue(result);
    }",./CodexTest_0_7_3.java,jdk_2
"@Test
    public void testContains() {
        // given
        List<String> underTest = new ArrayList<>();
        underTest.add(""a"");
        underTest.add(""b"");
        underTest.add(""c"");
        // when
        boolean result = underTest.contains(""b"");
        // then
        assertTrue(result);
    }",./CodexTest_0_4_3.java,jdk_2
"@Test
    public void testContains() {
        // given
        String element = ""element"";
        String otherElement = ""otherElement"";
        Set<String> underTest = new HashSet<String>();
        underTest.add(element);
        // when
        boolean result = underTest.contains(element);
        // then
        assertTrue(result);
    }",./CodexTest_0_5_3.java,jdk_2
"@Test
    public void testContainsWhenObjectIsNull() {
        // given
        List<String> list = Arrays.asList("""");
        // when
        boolean result = list.contains(null);
        // then
        assertFalse(result);
    }",./CodexTest_0_8_4.java,jdk_2
"@Test
    public void testContainsNull() {
        List<Integer> list = new ArrayList<Integer>();
        assertFalse(list.contains(null));
        list.add(null);
        assertTrue(list.contains(null));
    }",./CodexTest_0_6_1.java,jdk_2
"@Test
        public void testContainsShouldReturnFalseWhenStringIsNotInTheList() {
        // given
        LinkedList<String> underTest = new LinkedList<>();
        // when
        boolean result = underTest.contains(""xyz"");
        // then
        assertFalse(result);
    }",./CodexTest_0_7_9.java,jdk_2
"@Test
    public void testContains() {
        List<Integer> list = new ArrayList<Integer>();
        for (int i = -2; i < 3; i++) {
            list.add(i);
        }
        for (int i = -2; i < 3; i++) {
            assertTrue(list.contains(i));
        }
        assertTrue(!list.contains(5));
    }",./CodexTest_0_3_6.java,jdk_2
"@Test
    public void testContains() {
        List<String> list = Arrays.asList(""a"",""b"",""c"");
        assertTrue(list.contains(""b""));
        assertFalse(list.contains(""d""));
    }",./CodexTest_0_6_2.java,jdk_2
"@Test
    public void testContains() {
        List<String> list = new ArrayList<String>();
        assertFalse(list.contains(null));
        list.add(null);
        assertTrue(list.contains(null));
        assertFalse(list.contains(""foo""));
        list.add(""foo"");
        assertTrue(list.contains(""foo""));
    }",./CodexTest_0_6_4.java,jdk_2
"@Test
    public void testContainsShouldReturnFalseWhenElementIsNotInList() {
        // given
        List<String> underTest = new ArrayList<String>();
        underTest.add(""a"");
        underTest.add(""b"");
        underTest.add(""c"");
        // when
        boolean result = underTest.contains(""d"");
        // then
        assertFalse(result);
    }",./CodexTest_0_5_9.java,jdk_2
"@Test
    public void testRemove() {
        Object[] a = { ""A"", ""B"", ""C"", ""D"", ""E"", ""F"" };
        ArrayList<Object> l = new ArrayList<>();
        for (Object s : a) {
            l.add(s);
        }
        Object[] r = { ""B"", ""C"", ""D"", ""E"", ""F"" };
        assertEquals(""A"", l.remove(0));
        assertEquals(Arrays.asList(r), l);
        assertEquals(""F"", l.remove(4));
        assertEquals(Arrays.asList(""B"", ""C"", ""D"", ""E""), l);
        assertEquals(""B"", l.remove(0));
        assertEquals(Arrays.asList(""C"", ""D"", ""E""), l);
        assertEquals(""E"", l.remove(2));
        assertEquals(Arrays.asList(""C"", ""D""), l);
        assertEquals(""C"", l.remove(0));
        assertEquals(Arrays.asList(""D""), l);
        assertEquals(""D"", l.remove(0));
        assertEquals(Arrays.asList(), l);
    }",./CodexTest_0_4_4.java,jdk_1
"@Test
    public void testRemove() {
        ArrayList<Integer> l = new ArrayList<Integer>();
        l.add(1);
        l.add(2);
        l.add(3);
        l.add(4);
        l.add(5);
        assertEquals(5, l.size());
        assertEquals(1, (int) l.remove(0));
        assertEquals(4, l.size());
        assertEquals(2, (int) l.remove(0));
        assertEquals(3, (int) l.remove(0));
        assertEquals(4, (int) l.remove(0));
        assertEquals(5, (int) l.remove(0));
        assertEquals(0, l.size());
    }",./CodexTest_0_5_1.java,jdk_1
"@Test
    public void testRemove() {
        Object[] objects = new Object[]{1, 2, 3, 4, 5};
        ArrayList<Object> list = new ArrayList<Object>(Arrays.asList(objects));
        assertEquals(5, list.size());
        assertEquals(1, list.remove(0));
        assertEquals(4, list.size());
        assertEquals(2, list.remove(0));
        assertEquals(3, list.remove(list.size() - 1));
        objects = new Object[1000];
        for (int i = 0; i < objects.length; i++) {
            objects[i] = i;
        }
        list = new ArrayList<Object>(Arrays.asList(objects));
        for (int i = list.size() - 1; i >= 0; i--) {
            assertEquals(i, list.remove(i));
        }
    }",./CodexTest_0_7_5.java,jdk_1
"@Test(expected = IndexOutOfBoundsException.class)
    public void testExistingElements_IndexOutOfBoundsException() throws IndexOutOfBoundsException {
        List<Integer> list = new ArrayList<Integer>();
        list.remove(0);
    }",./CodexTest_0_9_1.java,jdk_1
"@Test
    public void testRemoveAtIndex() {
        ArrayList<String> list = new ArrayList<>();
        list.add(""0"");
        list.add(""1"");
        list.add(""2"");
        list.add(""3"");
        list.add(""4"");
        list.add(""5"");
        list.add(""6"");
        list.add(""7"");
        list.add(""8"");
        list.add(""9"");
        list.remove(0);
        assertEquals(""1"", list.get(0));
        assertEquals(""2"", list.get(1));
        assertEquals(""3"", list.get(2));
        assertEquals(""4"", list.get(3));
        assertEquals(""5"", list.get(4));
        assertEquals(""6"", list.get(5));
        assertEquals(""7"", list.get(6));
        assertEquals(""8"", list.get(7));
        assertEquals(""9"", list.get(8));
    }",./CodexTest_0_5_8.java,jdk_1
"@Test
    public void testTrimToSize() {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(new Integer(2));
        list.trimToSize();
        list.clear();
        list.add(new Integer(3));
        list.trimToSize();
        list.clear();
    }",./CodexTest_0_9_5.java,jdk_1
"@Test
    public void testRemove() {
        Vector<Integer> v = new Vector<Integer>();
        v.add(1);
        v.add(2);
        v.add(3);
        v.add(4);
        v.remove(new Integer(3));
        v.remove(new Integer(1));
        v.remove(new Integer(2));
        v.remove(new Integer(4));
        assertTrue(v.isEmpty());
    }",./CodexTest_0_7_1.java,jdk_1
"@Test
    public void testRemove() {
        Object[] a = { ""A"", ""B"", ""C"", ""D"" };
        ArrayList<Object> list = new ArrayList<>(Arrays.asList(a));
        assertEquals(""B"", list.remove(1));
        assertEquals(3, list.size());
        assertEquals(""A"", list.remove(0));
        assertEquals(2, list.size());
        assertEquals(""D"", list.remove(1));
        assertEquals(1, list.size());
        assertEquals(""C"", list.remove(0));
        assertEquals(0, list.size());
    }",./CodexTest_0_5_7.java,jdk_1
"@Test
    public void testRemove() {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
        assertEquals(Integer.valueOf(1), list.remove(0));
        assertEquals(Arrays.asList(2, 3), list);
        assertEquals(Integer.valueOf(2), list.remove(0));
        assertEquals(Arrays.asList(3), list);
        assertEquals(Integer.valueOf(3), list.remove(0));
        assertEquals(Collections.emptyList(), list);
        try {
            list.remove(0);
            fail();
        } catch (IndexOutOfBoundsException expected) {
        }
    }",./CodexTest_0_3_1.java,jdk_1
"@Test
    public void testRemove() {
        List<String> list = new ArrayList<>();
        list.add(""foo"");
        list.add(""bar"");
        assertEquals(""foo"", list.remove(0));
        assertEquals(""bar"", list.remove(0));
        assertTrue(list.isEmpty());
    }",./CodexTest_0_6_8.java,jdk_1
"@Test
    public void testRemoveWithoutException() {
        final int SIZE = 10;
        List<Integer> list = new ArrayList<Integer>(SIZE);
        for (int i = 0; i < SIZE; i++) {
            list.add(i);
        }
        for (int i = 0; i < SIZE; i++) {
            list.remove(0);
        }
        assertTrue(list.isEmpty());
    }",./CodexTest_0_6_5.java,jdk_1
"@Test
    public void testRemoveIndex() {
        String[] data = {""1"", ""2"", ""3"", ""4"", ""5"", ""6""};
        List<String> list = new ArrayList<String>(Arrays.asList(data));
        list.remove(1);
        assertEquals(Arrays.asList(new String[]{""1"", ""3"", ""4"", ""5"", ""6""}), list);
    }",./CodexTest_0_6_9.java,jdk_1
"@Test
    public void testRemoveInt() {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        assertEquals(Integer.valueOf(2), list.remove(1));
        assertEquals(Integer.valueOf(1), list.get(0));
        assertEquals(Integer.valueOf(3), list.get(1));
        assertEquals(Integer.valueOf(4), list.get(2));
        assertEquals(Integer.valueOf(5), list.get(3));
    }",./CodexTest_0_4_2.java,jdk_1
"@Test
    public void testNullRemove() {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(null);
        list.add(3);
        assertEquals(Integer.valueOf(null), list.remove(1));
    }",./CodexTest_0_7_3.java,jdk_1
"@Test
    public void testRemove() {
        ArrayList<String> list = new ArrayList<String>();
        list.add(""foo"");
        list.add(""bar"");
        list.add(""baz"");
        list.add(""qux"");
        assertEquals(""bar"", list.remove(1));
        assertEquals(""baz"", list.remove(1));
        assertEquals(""foo"", list.remove(0));
        assertEquals(""qux"", list.remove(0));
        assertEquals(0, list.size());
    }",./CodexTest_0_4_3.java,jdk_1
"@Test
    public void testRemoveRange() {
        final int size = 10;
        final int range = 5;
        final List<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < size; i++) {
            list.add(i);
        }
        list.remove(range);
        assertEquals(size - 1, list.size());
        for (int i = 0; i < range; i++) {
            assertEquals(i, list.get(i).intValue());
        }
        for (int i = range; i < size - 1; i++) {
            assertEquals(i + 1, list.get(i).intValue());
        }
    }",./CodexTest_0_3_4.java,jdk_1
"@Test
  public void testRemove() {
        int size = 100;
        List<Integer> list = new ArrayList<>();
        Arrays.asList(1, 2, 3, 4).forEach(i -> list.add(i));
        Integer val = 5;
        assertEquals(list.size(), size);
        assertEquals(list.remove(list.size() - 1), val);
        assertEquals(list.size() + 1, size);
    }",./CodexTest_0_8_4.java,jdk_1
"@Test
    public void testRemove() {
        ArrayList<String> list = new ArrayList<>(Arrays.asList(""1"", ""2"", ""3"", ""4"", ""5""));
        String removed = list.remove(2);
        assertEquals(""3"", removed);
        assertEquals(Arrays.asList(""1"", ""2"", ""4"", ""5""), list);
    }",./CodexTest_0_4_8.java,jdk_1
"@Test
    public void testRemove() {
        Object x = new Object();
        Object y = new Object();
        Object z = new Object();
        ArrayList<Object> list = new ArrayList<Object>();
        list.add(x);
        list.add(y);
        list.add(z);
        list.remove(y);
        assertEquals(2, list.size());
        assertEquals(x, list.get(0));
        assertEquals(z, list.get(1));
    }",./CodexTest_0_5_4.java,jdk_1
"@Test
    public void testRemoveFromEnd() {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        Assert.assertEquals(new Integer(3), list.remove(2));
        Assert.assertEquals(2, list.size());
        Assert.assertEquals(new Integer(1), list.get(0));
        Assert.assertEquals(new Integer(2), list.get(1));
    }",./CodexTest_0_7_10.java,jdk_1
"@Test
    public void testRemoveWithNull() {
        Object[] a = new Object[2];
        a[1] = null;
        List<Object> list = Arrays.asList(a);
        assertNull(list.remove(1));
        assertEquals(1, list.size());
        assertEquals(Arrays.asList(new Object[] { null }), list);
    }",./CodexTest_0_6_10.java,jdk_1
"@Test
    public void testGetIndexObject() {
    Object expected = new Object();
    List<Object> list = Arrays.asList(expected);
    assertSame(expected, list.get(0));
    }",./CodexTest_0_8_8.java,jdk_1
"@Test
    public void testRemove() {
        ArrayList<Integer> list = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4));
        assertEquals(2, list.remove(1).intValue());
        assertEquals(Arrays.asList(1, 3, 4), list);
        list.remove(0);
        assertEquals(Arrays.asList(3, 4), list);
        list.remove(1);
        assertEquals(Arrays.asList(3), list);
        list.remove(0);
        assertEquals(Arrays.asList(), list);
    }",./CodexTest_0_3_2.java,jdk_1
"@Test
        public void testRemove() {
        List<String> list = new ArrayList<>();
        list.add(""a"");
        list.add(""b"");
        list.add(""c"");
        list.add(""d"");
        list.add(""e"");
        list.add(""f"");
        list.add(""g"");
        list.add(""h"");
        assertEquals(""a"", list.remove(0));
        assertEquals(""b"", list.remove(0));
        assertEquals(""c"", list.remove(0));
        assertEquals(""d"", list.remove(0));
        assertEquals(""e"", list.remove(0));
        assertEquals(""f"", list.remove(0));
        assertEquals(""g"", list.remove(0));
        assertEquals(""h"", list.remove(0));
        assertEquals(0, list.size());
        list.add(""a"");
        list.add(""b"");
        list.add(""c"");
        list.add(""d"");
        list.add(""e"");
        list.add(""f"");
        list.add(""g"");
        list.add(""h"");
        assertEquals(""a"", list.remove(0));
        assertEquals(""b"", list.remove(0));
        assertEquals(""c"", list.remove(0));
        assertEquals(""d"", list.remove(0));
        assertEquals(""e"", list.remove(0));
        assertEquals(""f"", list.remove(0));
        assertEquals(""g"", list.remove(0));
        assertEquals(""h"", list.remove(0));
        assertEquals(0, list.size());
    }",./CodexTest_0_6_1.java,jdk_1
"@Test
    public void test_removeElement_int() {
        ArrayList<Integer> list = new ArrayList<Integer>();
        list.add(new Integer(1));
        list.add(new Integer(2));
        list.add(new Integer(3));
        list.add(new Integer(4));
        assertEquals(new Integer(2), list.remove(1));
        assertEquals(new Integer(1), list.get(0));
        assertEquals(new Integer(3), list.get(1));
        assertEquals(new Integer(4), list.get(2));
        assertEquals(3, list.size());
    }",./CodexTest_0_8_9.java,jdk_1
"@Test
    public void testRemoveWithIndex() {
        Object[] elements = {1, 2, 3, 4, 5};
        List<Object> list = new ArrayList<>(Arrays.asList(elements));
        list.remove(2);
        Object[] expected = {1, 2, 4, 5};
        assertArrayEquals(expected, list.toArray());
    }",./CodexTest_0_5_2.java,jdk_1
"@Test
    public void testRemove() {
        Vector<Integer> v = new Vector<Integer>();
        v.add(new Integer(0));
        v.add(new Integer(1));
        v.add(new Integer(2));
        v.add(new Integer(3));
        v.add(new Integer(4));
        v.add(new Integer(5));
        v.add(new Integer(6));
        v.add(new Integer(7));
        v.add(new Integer(8));
        v.add(new Integer(9));
        v.remove(new Integer(5));
        for (int i = 0; i < v.size(); i++) {
            if (i < 5) {
                assertTrue(v.get(i).equals(new Integer(i)));
            } else {
                assertTrue(v.get(i).equals(new Integer(i + 1)));
            }
        }
    }",./CodexTest_0_6_7.java,jdk_1
"@Test
    public void testRemove() {
        List<Integer> l = new ArrayList<>(Arrays.asList(1, 2, 3));
        l.remove(Integer.valueOf(2));
        assertTrue(l.equals(Arrays.asList(1, 3)));
    }",./CodexTest_0_6_2.java,jdk_1
"@Test
    public void testRemove() {
        ArrayList<String> list = new ArrayList<String>();
        list.add(""A"");
        list.add(""B"");
        list.add(""C"");
        list.add(""D"");
        list.add(""E"");
        assertEquals(""A"", list.remove(0));
        assertEquals(""B"", list.remove(0));
        assertEquals(""C"", list.remove(0));
        assertEquals(""D"", list.remove(0));
        assertEquals(""E"", list.remove(0));
    }",./CodexTest_0_5_9.java,jdk_1
"@Test
    public void testRemove() {
        ArrayList<String> list = new ArrayList<String>();
        list.add(""Hello"");
        list.add(""World"");
        assertEquals(""Hello"", list.remove(0));
        assertEquals(""World"", list.get(0));
    }",./CodexTest_0_6_3.java,jdk_1
"@Test
    public void testRemoveAt() {
        int n = 9;
        int removedIndex = n / 2;
        List<Integer> list = new ArrayList<Integer>(n);
        for (int i = 0; i < n; ++i) {
            list.add(i);
        }
        int removed = list.remove(removedIndex);
        assertEquals(n - 1, list.size());
        assertEquals(removedIndex, removed);
        for (int i = 0; i < n; ++i) {
            if (i < removedIndex) {
                assertEquals(new Integer(i), list.get(i));
            } else if (i > removedIndex) {
                assertEquals(new Integer(i), list.get(i - 1));
            }
        }
    }",./CodexTest_0_8_5.java,jdk_1
"@Test
  public void testGetUncaughtExceptionHandler() {
    assertEquals(""Expected UncaughtExceptionHandler not set"", GWT.getUncaughtExceptionHandler(), null);
  }",./CodexTest_0_6_8.java,gwt_2
"@Test
  public void testGetUncaughtExceptionHandlerWhenNull() {
    GWT.setUncaughtExceptionHandler(null);
    assertNull(GWT.getUncaughtExceptionHandler());
  }",./CodexTest_0_8_6.java,gwt_2
"@Test
  public void testGetUncaughtExceptionHandler() {
    try {
      throw new Exception();
    } catch (Exception e) {
      assertEquals(e.getClass(), GWT.getUncaughtExceptionHandler().getClass());
    }
  }",./CodexTest_0_9_10.java,gwt_2
"@Test(expected = ElasticsearchGenerationException.class)
    public void testSourceWithMapAndXContentType() {
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        IndexRequest request = new IndexRequest(""index"", ""type"", ""id"");
        request.source(source, XContentType.JSON);
    }",./CodexTest_0_4_4.java,elasticsearch_2
"@Test
    public void testSourceMap() throws Exception {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put(""field1"", ""value1"");
        jsonMap.put(""field2"", ""value2"");
        indexRequest.source(jsonMap);
        assertEquals(jsonMap, indexRequest.sourceAsMap());
    }",./CodexTest_0_1_4.java,elasticsearch_2
"@Test
    public void testSourceWithMapAndContentType() {
        Map<String, Object> source = new HashMap<>();
        source.put(""field1"", ""value1"");
        IndexRequest request = new IndexRequest(""index"", ""type"", ""id"").source(source, XContentType.CBOR);
        assertEquals(XContentType.CBOR, request.getContentType());
        assertEquals(source, request.sourceAsMap());
    }",./CodexTest_0_5_8.java,elasticsearch_2
"@Test
    public void testSourceAsMap() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        indexRequest.source(source);
        assertEquals(""{\""field\"":\""value\""}"", indexRequest.source().utf8ToString());
    }",./CodexTest_0_5_5.java,elasticsearch_2
"@Test
  public void testSourceWithMap() throws IOException {
        IndexRequest request = new IndexRequest(""index"", ""type"");
        Map<String, Object> json = new HashMap<>();
        json.put(""field1"", ""value1"");
        json.put(""field2"", ""value2"");
        request.source(json, XContentType.JSON);
        assertEquals(XContentType.JSON, request.getContentType());
        String expectedResult = ""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"";
        assertEquals(expectedResult, request.source().utf8ToString());
    }",./CodexTest_0_5_7.java,elasticsearch_2
"@Test
    public void testRequestWithMap() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"");
        Map<String, Object> jsonMap = Collections.singletonMap(""field"", ""value"");
        indexRequest.source(jsonMap, XContentType.JSON);
        assertEquals(jsonMap, indexRequest.sourceAsMap());
    }",./CodexTest_0_6_6.java,elasticsearch_2
"@Test
    public void testSource() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        String source = ""{ \""field\"" : \""value\"" }"";
        indexRequest.source(source, XContentType.JSON);
        assertEquals(source, indexRequest.source().utf8ToString());
    }",./CodexTest_0_2_7.java,elasticsearch_2
"@Test
    public void testSourceWithMap() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        indexRequest.source(Collections.singletonMap(""field"", ""value""));
        assertEquals(""{\""field\"":\""value\""}"", indexRequest.source().utf8ToString());
    }",./CodexTest_0_3_1.java,elasticsearch_2
"@Test
    public void testSource() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        indexRequest.source(source, XContentType.JSON);
        assertEquals(source, indexRequest.sourceAsMap());
    }",./CodexTest_0_2_9.java,elasticsearch_2
"@Test
    public void testSourceMap() throws Exception {
        IndexRequest request = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field1"", ""value1"");
        source.put(""field2"", ""value2"");
        request.source(source);
        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", request.source().utf8ToString());
    }",./CodexTest_0_5_6.java,elasticsearch_2
"@Test
    public void testSourceMap() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put(""field1"", ""value1"");
        jsonMap.put(""field2"", ""value2"");
        indexRequest.source(jsonMap);
        assertEquals(jsonMap, indexRequest.sourceAsMap());
    }",./CodexTest_0_1_1.java,elasticsearch_2
"@Test
    public void testSourceMapWithXContentType() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        indexRequest.source(source, XContentType.JSON);
        assertEquals(""{\""field\"":\""value\""}"", indexRequest.source().utf8ToString());
    }",./CodexTest_0_0_1.java,elasticsearch_2
"@Test
    public void testSourceMap() throws Exception {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> map = new HashMap<>();
        map.put(""field1"", ""value1"");
        map.put(""field2"", ""value2"");
        indexRequest.source(map);
        String sSource = indexRequest.source().utf8ToString();
        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", sSource);
    }",./CodexTest_0_4_2.java,elasticsearch_2
"@Test
    public void testSourceMapWithXContentType() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put(""field1"", ""value1"");
        jsonMap.put(""field2"", ""value2"");
        indexRequest.source(jsonMap, XContentType.JSON);
        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", indexRequest.source().utf8ToString());
        assertEquals(XContentType.JSON, indexRequest.getContentType());
    }",./CodexTest_0_3_4.java,elasticsearch_2
"@Test
    public void testSourceWithMap() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put(""field1"", ""value1"");
        jsonMap.put(""field2"", ""value2"");
        indexRequest.source(jsonMap);
        assertEquals(jsonMap, indexRequest.sourceAsMap());
    }",./CodexTest_0_1_3.java,elasticsearch_2
"@Test
    public void testSourceMapWithXContentType() {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put(""field1"", ""value1"");
        jsonMap.put(""field2"", ""value2"");
        indexRequest.source(jsonMap, XContentType.JSON);
        assertEquals(jsonMap, indexRequest.sourceAsMap());
    }",./CodexTest_0_3_7.java,elasticsearch_2
"@Test
    public void testSourceWithMap() throws IOException {
        IndexRequest request = new IndexRequest(""index"", ""type"", ""id"");
        request.source(""{ \""field\"": \""value\"" }"", XContentType.JSON);
        assertEquals(""{\""field\"":\""value\""}"", request.source().utf8ToString());
    }",./CodexTest_0_4_8.java,elasticsearch_2
"@Test
    public void testSourceMapWithXContentType() throws IOException {
        IndexRequest request = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        request.source(source, XContentType.JSON);
        assertEquals(""{\""field\"":\""value\""}"", request.source().utf8ToString());
    }",./CodexTest_0_1_2.java,elasticsearch_2
"@Test
    public void testSourceWithMap() throws Exception {
        IndexRequest request = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        request.source(source);
        assertEquals(""{\""field\"":\""value\""}"", request.source().utf8ToString());
    }",./CodexTest_0_2_4.java,elasticsearch_2
"@Test
    public void testSource() throws IOException {
        IndexRequest indexRequest = new IndexRequest();
        String json = ""{ \""field1\"" : \""value1\""}"";
        indexRequest.source(json, XContentType.JSON);
        assertEquals(json, indexRequest.source().utf8ToString());
    }",./CodexTest_0_3_3.java,elasticsearch_2
"@Test
    public void testSourceMapWithXContentType() {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        indexRequest.source(source, XContentType.JSON);
        assertEquals(""{\""field\"":\""value\""}"", indexRequest.source().utf8ToString());
    }",./CodexTest_0_3_2.java,elasticsearch_2
"@Test
    public void testSourceWithMapAndXContentType() throws Exception {
        IndexRequest request = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> map = new HashMap<>();
        map.put(""field"", ""value"");
        request.source(map, XContentType.JSON);
        assertEquals(""{\""field\"":\""value\""}"", request.source().utf8ToString());
    }",./CodexTest_0_3_6.java,elasticsearch_2
"@Test
    public void testSourceWithContentType() {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        indexRequest.source(source, XContentType.JSON);
        assertEquals(""{\""field\"":\""value\""}"", indexRequest.source().utf8ToString());
    }",./CodexTest_0_6_2.java,elasticsearch_2
"@Test
    public void testReadMap() throws IOException {
        Map<String, Object> source = new HashMap<>();
        source.put(""field"", ""value"");
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"");
        indexRequest.source(source, XContentType.JSON);
        assertEquals(source, indexRequest.sourceAsMap());
    }",./CodexTest_0_6_4.java,elasticsearch_2
"@Test
    public void testSourceMapWithXContentType() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field1"", ""value1"");
        source.put(""field2"", ""value2"");
        indexRequest.source(source, XContentType.JSON);
        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", indexRequest.source().utf8ToString());
    }",./CodexTest_0_2_5.java,elasticsearch_2
"@Test
    public void testSourceMapWithXContentType() throws IOException {
        IndexRequest indexRequest = new IndexRequest(""index"", ""type"", ""id"");
        Map<String, Object> source = new HashMap<>();
        source.put(""field1"", ""value1"");
        source.put(""field2"", ""value2"");
        indexRequest.source(source, XContentType.JSON);
        assertEquals(XContentType.JSON.mediaTypeWithoutParameters(), indexRequest.getContentType());
        assertEquals(source, indexRequest.sourceAsMap());
    }",./CodexTest_0_2_8.java,elasticsearch_2
"@Test
    public static void doubleTest50() {
        double[] data = { 1, 2, 3, 4, 5, 6 };
        double[][] arrMatrix = { { 1, 2, 3, 4, 5, 6 }, { 2, 3, 4, 5, 6, 7 } };
        DoubleFactory2D f = DoubleFactory2D.dense;
        DoubleMatrix1D vector = new DenseDoubleMatrix1D(data);
        DoubleMatrix2D matrix = f.make(arrMatrix);
        DoubleMatrix2D matrix2 = vector.like2D(matrix.rows(), matrix.columns());
        matrix2 = matrix2.assign(matrix);
        System.out.println(matrix);
    }",./CodexTest_0_9_6.java,colt_2
"@Test
    public void testLike2D() {
        DoubleMatrix2D data = new DenseDoubleMatrix2D(
            new double[][] { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} } );
        assertEquals(data.get(0, 0), 1, 0);
        assertEquals(data.get(1, 0), 4, 0);
        assertEquals(data.get(2, 0), 7, 0);
        assertEquals(data.get(0, 1), 2, 0);
        assertEquals(data.get(1, 1), 5, 0);
        assertEquals(data.get(2, 1), 8, 0);
    }",./CodexTest_0_7_10.java,colt_2
"@Test
    public void testSizeConstructor() {
        int rows = 22;
        int cols = 33;
        DoubleMatrix2D matrix = new DenseDoubleMatrix2D(rows, cols);
        assertEquals(""Rows differ"", rows, matrix.rows());
        assertEquals(""Columns differ"", cols, matrix.columns());
    }",./CodexTest_0_7_2.java,colt_2
"@Test
    	public static void doubleTest29() {
			double[][] arrMatrix2 = { 
				{ 1, 2, 3, 4, 5, 6},
				{ 2, 3, 4, 5, 6, 7}
			};
			DoubleMatrix2D matrix2 = DoubleFactory2D.dense.make(arrMatrix2);
			DoubleMatrix2D product = matrix2.zMult(matrix2, null);
			System.out.println(product);
		}",./CodexTest_0_7_9.java,colt_2
"@Test
    public void testFromStringShouldReturnTrueWhenTrueStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""true"");
        // then
        assertTrue(result);
    }",./CodexTest_0_4_4.java,hibernate_2
"@Test
    public void testFromStringShouldReturnTrueWhenTrueStringGiven() {
		// given
		BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
		// when
		Boolean result = underTest.fromString(""true"");
		// then
		assertTrue(result);
	}",./CodexTest_0_7_4.java,hibernate_2
"@Test
  public void testFromStringShouldReturnFalseWhenFStringGiven() {
		// given
		BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
		// when
		Boolean result = underTest.fromString(""N"");
		// then
		assertFalse(result);
	}",./CodexTest_0_5_1.java,hibernate_2
"@Test
    public void testFromString() {
		assertFalse(BooleanTypeDescriptor.INSTANCE.fromString(""false""));
	}",./CodexTest_0_7_8.java,hibernate_2
"@Test
  public void testFromStringShouldReturnFalseWhenFStringGiven() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Boolean result = underTest.fromString(""false"");
    // then
    assertFalse(result);
  }",./CodexTest_0_7_6.java,hibernate_2
"@Test
    public void testFromString() {
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        assertEquals("""", """", underTest.fromString(""""));
    }",./CodexTest_0_9_7.java,hibernate_2
"@Test
     public void testFromStringShouldReturnFalseWhenFalseStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""false"");
        // then
        assertFalse(result);
    }",./CodexTest_0_7_5.java,hibernate_2
"@Test
      public void testFromStringFalse() {
          assertFalse(BooleanTypeDescriptor.INSTANCE.fromString(""false""));
      }",./CodexTest_0_9_1.java,hibernate_2
"@Test
    public void testFromStringShouldReturnFalseWhenFStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""N"");
        // then
        assertFalse(result);
    }",./CodexTest_0_5_5.java,hibernate_2
"@Test
     public void testNull() {
        assertFalse(new BooleanTypeDescriptor().fromString(null));
    }",./CodexTest_0_9_3.java,hibernate_2
"@Test
  public void testFromString() throws Exception {
	String trueString = ""true"";
	Boolean trueBoolean = Boolean.TRUE;
	
	String falseString = ""false"";
	Boolean falseBoolean = Boolean.FALSE;
	
	assertEquals( ""\nReturned value did not match expected: "", trueString, trueBoolean.toString() );
	assertEquals( ""\nReturned value did not match expected: "", falseString, falseBoolean.toString() );
	assertFalse( ""\nReturned value did not match expected: "", trueString.equals( falseString ) );
	assertTrue( ""\nReturned value did not match expected: "", falseString.equals( falseString ) );
}",./CodexTest_0_9_5.java,hibernate_2
"@Test
   public void testFromString() {
        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""true""));
        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""false""));
    }",./CodexTest_0_7_1.java,hibernate_2
"@Test
    public void testFromStringShouldReturnFalseWhenFalseStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""false"");
        // then
        assertFalse(result);
    }",./CodexTest_0_9_6.java,hibernate_2
"@Test
  public void testFromStringShouldReturnTrue() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Boolean result = underTest.fromString(""true"");
    // then
    assertTrue(result);
  }",./CodexTest_0_6_6.java,hibernate_2
"@Test
    public void testFromString() {
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        assertEquals(Boolean.TRUE, underTest.fromString(""true""));
        assertEquals(Boolean.FALSE, underTest.fromString(""false""));
    }",./CodexTest_0_4_7.java,hibernate_2
"@Test
    public void testFromStringShouldReturnTrueWhenStringTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""true"");
        // then
        assertTrue(result);
    }",./CodexTest_0_3_1.java,hibernate_2
"@Test
    public void testFromStringShouldReturnTrueWhenTStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""t"");
        // then
        assertTrue(result);
    }",./CodexTest_0_6_8.java,hibernate_2
"@Test
    public void testFromStringShouldReturnFalseWhenFStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""false"");
        // then
        assertFalse(result);
    }",./CodexTest_0_5_6.java,hibernate_2
"public void testFromStringShouldReturnTrueWhenTStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""true"");
        // then
        assertTrue(result);
    }",./CodexTest_0_5_6.java,hibernate_2
"public void testFromStringShouldReturnNullWhenNullGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(null);
        // then
        assertNull(result);
    }",./CodexTest_0_5_6.java,hibernate_2
"@Test
  public void testFromString() {
    assertEquals(Boolean.TRUE, Boolean.valueOf( ""true"" ));
    assertEquals(Boolean.FALSE, Boolean.valueOf( ""false"" ));
  }",./CodexTest_0_8_1.java,hibernate_2
"@Test
    public void testFromStringShouldReturnTrueWhenTrueStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""true"");
        // then
        assertTrue(result);
    }",./CodexTest_0_1_1.java,hibernate_2
"@Test
    public void testFromStringShouldReturnFalseWhenFStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""false"");
        // then
        assertFalse(result);
    }",./CodexTest_0_0_1.java,hibernate_2
"@Test
    public void testFromStringWithFalseString() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""false"");
        // then
        assertFalse(result);
    }",./CodexTest_0_4_2.java,hibernate_2
"@Test
  public void testFromString() {
    // given
    BooleanTypeDescriptor sut = new BooleanTypeDescriptor();
    // when
    Boolean result = sut.fromString(""true"");
    // then
    Assert.assertTrue(result);
  }",./CodexTest_0_8_6.java,hibernate_2
"@Test
    public void testFromStringShouldReturnTrueWhenYStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""Y"");
        // then
        assertTrue(result);
    }",./CodexTest_0_7_3.java,hibernate_2
"@Test
    public void testFromString() {
        assertTrue(new BooleanTypeDescriptor().fromString(""true""));
        assertFalse(new BooleanTypeDescriptor().fromString(""false""));
    }",./CodexTest_0_4_3.java,hibernate_2
"@Test
    public void testFromStringShouldReturnFalseWhenFStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""false"");
        // then
        assertFalse(result);
    }",./CodexTest_0_3_4.java,hibernate_2
"@Test
    public void testFromString() {
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        assertFalse(underTest.fromString(""N""));
    }",./CodexTest_0_8_4.java,hibernate_2
"@Test
    public void testFromStringWithFalseString() {
		// given
		BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
		// when
		Boolean result = underTest.fromString(""false"");
		// then
		assertFalse(result);
	}",./CodexTest_0_7_7.java,hibernate_2
"@Test
    public void testFromStringShouldReturnFalseWhenFStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""F"");
        // then
        assertFalse(result);
    }",./CodexTest_0_1_2.java,hibernate_2
"@Test
  public void testFromStringShouldReturnTrueWhenStringIsTrue() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Boolean result = underTest.fromString(""true"");
    // then
    assertTrue(result);
  }",./CodexTest_0_5_4.java,hibernate_2
"@Test
       public void testFromStringShouldReturnTrueWhenTStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""true"");
        // then
        assertTrue(result);
    }",./CodexTest_0_8_8.java,hibernate_2
"@Test
  public void testFromStringShouldReturnFalseWhenFStringGiven() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Boolean result = underTest.fromString(""false"");
    // then
    assertFalse(result);
  }",./CodexTest_0_3_3.java,hibernate_2
"@Test
    public void testFromString() {
        assertTrue(Boolean.TRUE.equals(BooleanTypeDescriptor.INSTANCE.fromString(""true"")));
        assertTrue(Boolean.FALSE.equals(BooleanTypeDescriptor.INSTANCE.fromString(""false"")));
    }",./CodexTest_0_4_5.java,hibernate_2
"@Test
  public void testFromStringShouldReturnTrueWhenYStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""Y"");
        // then
        assertTrue(result);
    }",./CodexTest_0_3_2.java,hibernate_2
"@Test
    public void testFromString() {
        BooleanTypeDescriptor descriptor = new BooleanTypeDescriptor();
        assertEquals(Boolean.TRUE, descriptor.fromString(""true""));
        assertEquals(Boolean.FALSE, descriptor.fromString(""false""));
    }",./CodexTest_0_6_1.java,hibernate_2
"@Test
    public void testFromString_falseString() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""false"");
        // then
        assertFalse(result);
    }",./CodexTest_0_8_9.java,hibernate_2
"@Test
      public void testFromStringTrue() {
         assertEquals(Boolean.TRUE, new BooleanTypeDescriptor().fromString(""true""));
      }",./CodexTest_0_7_2.java,hibernate_2
"public void testFromStringFalse() {
         assertEquals(Boolean.FALSE, new BooleanTypeDescriptor().fromString(""false""));
      }",./CodexTest_0_7_2.java,hibernate_2
"public void testFromStringEmptyString() {
         assertNull(new BooleanTypeDescriptor().fromString(""""));
      }",./CodexTest_0_7_2.java,hibernate_2
"public void testFromStringNull() {
         assertNull(new BooleanTypeDescriptor().fromString(null));
      }",./CodexTest_0_7_2.java,hibernate_2
"@Test
    public void testFromStringShouldReturnTrueWhenGivenTrue() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""true"");
        // then
        assertTrue(result);
    }",./CodexTest_0_9_2.java,hibernate_2
"@Test
    public void testFromStringShouldReturnFalseWhenFStringGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""f"");
        // then
        assertFalse(result);
    }",./CodexTest_0_4_1.java,hibernate_2
"@Test
    public void testFromString() {
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        assertTrue(underTest.fromString(""true""));
    }",./CodexTest_0_5_2.java,hibernate_2
"@Test
  public void testFromStringShouldReturnTrueWhen1StringGiven() {
  	// given
  	BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
  	// when
  	Boolean result = underTest.fromString(""1"");
  	// then
  	assertTrue(result);
  }",./CodexTest_0_8_7.java,hibernate_2
"@Test
    public void testFromString() {
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        assertTrue(underTest.fromString(""true""));
        assertFalse(underTest.fromString(""false""));
        assertNull(underTest.fromString(null));
    }",./CodexTest_0_6_7.java,hibernate_2
"@Test
  public void testFromStringShouldReturnFalseWhenFStringGiven() {
      // given
      BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
      // when
      Boolean result = underTest.fromString(""N"");
      // then
      assertFalse(result);
  }",./CodexTest_0_6_2.java,hibernate_2
"@Test
       public void testFromString() {
			BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
			assertEquals(Boolean.TRUE, underTest.fromString(""true""));
			assertEquals(Boolean.FALSE, underTest.fromString(""false""));
		}",./CodexTest_0_8_2.java,hibernate_2
"@Test
  public void testFromString() {
		assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""true""));
		assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""false""));
	}",./CodexTest_0_8_3.java,hibernate_2
"@Test
    public void testFromString() {
        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""true""));
        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""false""));
        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""TRUE""));
        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""FALSE""));
        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""1""));
        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""0""));
    }",./CodexTest_0_6_3.java,hibernate_2
"@Test
  public void testFromStringShouldReturnTrueWhenTrueStringGiven() {
		// given
		BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
		// when
		Boolean result = underTest.fromString(""true"");
		// then
		assertTrue(result);
	}",./CodexTest_0_4_6.java,hibernate_2
"@Test
    public void testFromStringShouldReturnTrueWhenStringIsTrue() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Boolean result = underTest.fromString(""true"");
        // then
        assertTrue(result);
    }",./CodexTest_0_8_5.java,hibernate_2
"@Test
  public void testObjectHashCode() {
    HashCode hashCode42 = HashCode.fromLong(42L);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_3_5.java,guava_1
"@Test
  public void testHash1() {
    HashCode hashCode = HashCode.fromLong(42);
    assertEquals(42, hashCode.hashCode());
  }",./CodexTest_0_7_4.java,guava_1
"@Test
    public void testObjectHashCode() {
        HashCode hashCode42 = HashCode.fromLong(42);
        assertEquals(42, hashCode42.hashCode());
    }",./CodexTest_0_5_1.java,guava_1
"@Test
    public void testRoundTripHashCodeUsingBaseEncoding() {
    HashCode hash1 = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);
    HashCode hash2 = HashCode.fromBytes(BaseEncoding.base16().lowerCase().decode(hash1.toString()));
    assertEquals(hash1, hash2);
  }",./CodexTest_0_7_5.java,guava_1
"@Test
  public void testHashEqualsHash() {
    HashCode hashCode = HashCode.fromInt(42);
    HashCode hashCode2 = HashCode.fromInt(42);
    assertEquals(hashCode, hashCode2);
    assertEquals(hashCode.hashCode(), hashCode2.hashCode());
  }",./CodexTest_0_9_1.java,guava_1
"@Test
   public void testObjectHashCode() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_5_5.java,guava_1
"@Test
      public void testObjectHashCode() {
    			HashCode hashCode42 = HashCode.fromInt(42);
    			assertEquals(42, hashCode42.hashCode());
    		  }",./CodexTest_0_9_5.java,guava_1
"@Test
  public void testHash() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_6_6.java,guava_1
"@Test
  public void testHashCode() {
    assertEquals(42, HashCode.fromLong(42).hashCode());
  }",./CodexTest_0_3_1.java,guava_1
"@Test
    public void testObjectHashCode() {
      HashCode hashCode42 = HashCode.fromInt(42);
      assertEquals(42, hashCode42.hashCode());
    }",./CodexTest_0_5_6.java,guava_1
"@Test
   public void testHashCodeIsUnique() {
    for (int i = 0; i < 100; i++) {
      HashCode hashCode1 = HashCode.fromLong(i);
      HashCode hashCode2 = HashCode.fromLong(i);
      assertEquals(hashCode1, hashCode2);
      assertTrue(hashCode1.equals(hashCode2));
      assertTrue(hashCode1.hashCode() == hashCode2.hashCode());
    }
  }",./CodexTest_0_6_5.java,guava_1
"@Test
    public void testObjectHashCode() {
        HashCode hashCode42 = HashCode.fromLong(42L);
        assertEquals(42, hashCode42.hashCode());
      }",./CodexTest_0_8_1.java,guava_1
"@Test
  public void testRoundTripHashCodeUsingBaseEncoding() {
    HashCode hash1 = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);
    HashCode hash2 = HashCode.fromBytes(BaseEncoding.base16().lowerCase().decode(hash1.toString()));
    assertEquals(hash1, hash2);
  }",./CodexTest_0_8_10.java,guava_1
"@Test
  public void testObjectHashCode() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_0_1.java,guava_1
"@Test
  public void testHashString() {
    HashCode hash1 = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);
    HashCode hash2 = HashCode.fromLong(hash1.asLong());
    assertEquals(hash1, hash2);
  }",./CodexTest_0_9_4.java,guava_1
"@Test
    public void testHashCode() {
    assertEquals(42, HashCode.fromLong(42).hashCode());
  }",./CodexTest_0_7_3.java,guava_1
"@Test
    public void testHashCode() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_4_3.java,guava_1
"@Test
  public void testHashCode() {
    assertEquals(0, HashCode.fromLong(0).hashCode());
    assertEquals(1, HashCode.fromLong(1).hashCode());
    assertEquals(31, HashCode.fromLong(31).hashCode());
    assertEquals(32, HashCode.fromLong(32).hashCode());
    assertEquals(63, HashCode.fromLong(63).hashCode());
    assertEquals(64, HashCode.fromLong(64).hashCode());
    assertEquals(127, HashCode.fromLong(127).hashCode());
    assertEquals(128, HashCode.fromLong(128).hashCode());
    assertEquals(Integer.MAX_VALUE, HashCode.fromLong(Integer.MAX_VALUE).hashCode());
    assertEquals(Integer.MIN_VALUE, HashCode.fromLong(Integer.MIN_VALUE).hashCode());
    assertEquals(-1, HashCode.fromLong(-1).hashCode());
    assertEquals(-32, HashCode.fromLong(-32).hashCode());
    assertEquals(-63, HashCode.fromLong(-63).hashCode());
    assertEquals(-64, HashCode.fromLong(-64).hashCode());
    assertEquals(-127, HashCode.fromLong(-127).hashCode());
    assertEquals(-128, HashCode.fromLong(-128).hashCode());
    assertEquals(-129, HashCode.fromLong(-129).hashCode());
    assertEquals(-Integer.MAX_VALUE, HashCode.fromLong(-Integer.MAX_VALUE).hashCode());
    assertEquals(-Integer.MIN_VALUE, HashCode.fromLong(-Integer.MIN_VALUE).hashCode());
  }",./CodexTest_0_3_4.java,guava_1
"@Test
    public void testHashCodeWithLong() {
        HashCode hashCode42 = HashCode.fromLong(42);
        assertEquals(42, hashCode42.hashCode());
      }",./CodexTest_0_5_3.java,guava_1
"@Test
    public void testObjectHashCode() {
		HashCode hashCode42 = HashCode.fromLong(42);
		assertEquals(42, hashCode42.hashCode());
	  }",./CodexTest_0_8_4.java,guava_1
"@Test
  public void testObjectHashCode() {
    HashCode hashCode42 = HashCode.fromInt(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_5_4.java,guava_1
"@Test
    public void testRoundTripHashCodeUsingBaseEncoding() {
    HashCode hash1 = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);
    String hashStr = hash1.toString();
    HashCode hash2 = HashCode.fromString(BaseEncoding.base16().lowerCase().encode(hashStr.getBytes(Charsets.UTF_8)));
    assertEquals(hash1, hash2);
  }",./CodexTest_0_8_8.java,guava_1
"@Test
  public void testHashCode() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_3_3.java,guava_1
"@Test
    public void testObjectHashCode() {
      HashCode hashCode42 = HashCode.fromLong(42);
      assertEquals(42, hashCode42.hashCode());
    }",./CodexTest_0_3_2.java,guava_1
"@Test
    public void testLongHashCode() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.asLong());
  }",./CodexTest_0_6_1.java,guava_1
"@Test
   public void testSha1() {
    for (int shift = 0; shift < 64; shift += 2) {
      long hash1 = 0x123456789abcdef0L + shift;
      HashCode hash2 = Hashing.sha1().hashLong(hash1);
      assertEquals(HashCode.fromLong(hash1), hash2);
    }
   }",./CodexTest_0_8_9.java,guava_1
"@Test
  public void testHashCodeFromLong() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_7_2.java,guava_1
"@Test
    public void testObjectHashCode() {
		HashCode hashCode42 = HashCode.fromLong(42);
		assertEquals(42, hashCode42.hashCode());
	}",./CodexTest_0_4_1.java,guava_1
"@Test
  public void testHashCodeWithLongs() {
    HashCode hashCode42 = HashCode.fromLong(42);
    assertEquals(42, hashCode42.hashCode());
  }",./CodexTest_0_5_2.java,guava_1
"@Test
      public void testObjectHashCode() {
        HashCode hashCode42 = HashCode.fromInt(42);
        assertEquals(42, hashCode42.hashCode());
      }",./CodexTest_0_8_7.java,guava_1
"@Test
  public void testLongHashCodeEquals() {
    HashCode hashCode1 = HashCode.fromLong(42L);
    HashCode hashCode2 = HashCode.fromLong(42L);
    assertEquals(hashCode1, hashCode2);
  }",./CodexTest_0_6_7.java,guava_1
"@Test
    public void testLongHashCode() {
    HashCode hashCode42 = HashCode.fromLong(42L);
    assertEquals(42L, hashCode42.asLong());
  }",./CodexTest_0_6_2.java,guava_1
"@Test
  public void testHashCodeFromLong() {
    HashCode hashCode = HashCode.fromLong(0x1234567890ABCDEFL);
    assertEquals(0x1234567890ABCDEFL, hashCode.asLong());
  }",./CodexTest_0_6_4.java,guava_1
"@Test
         public void testObjectEquals() {
			HashCode hashCode42 = HashCode.fromLong(42);
			assertEquals(hashCode42, hashCode42);
		  }",./CodexTest_0_8_3.java,guava_1
"@Test
  public void testToShortShouldReturnNullWhenValueIsNull() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Short result = underTest.toShort(null);
    // then
    assertNull(result);
  }",./CodexTest_0_3_5.java,hibernate_1
"@Test
  public void testToShortShouldReturnZeroWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(Short.valueOf((short) 0), result);
    }",./CodexTest_0_4_4.java,hibernate_1
"@Test
    public void testToShortShouldReturnOneWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(Short.valueOf((short) 1), result);
    }",./CodexTest_0_7_4.java,hibernate_1
"@Test
    public void testToShortShouldReturnMinusOneWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(Short.valueOf((short) -1), result);
    }",./CodexTest_0_5_1.java,hibernate_1
"@Test
   public void testToShortShouldReturnNullWhenNullGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(null);
        // then
        assertNull(result);
    }",./CodexTest_0_7_8.java,hibernate_1
"@Test
    public void testToShortShouldReturn0WhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(0, result.intValue());
    }",./CodexTest_0_7_6.java,hibernate_1
"@Test
  public void testToShortShouldReturnZeroWhenFalseGiven() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Short result = underTest.toShort(false);
    // then
    assertEquals(0, result.shortValue());
  }",./CodexTest_0_7_5.java,hibernate_1
"@Test
    public void testToShortShouldNotReturnNullWhenFalseValueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(0, result.intValue());
    }",./CodexTest_0_9_1.java,hibernate_1
"@Test
    public void testToShortShouldReturnPositiveWhenTrueBooleanGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(Boolean.TRUE);
        // then
        assertEquals(1, result.intValue());
    }",./CodexTest_0_5_8.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(Short.valueOf((short)0), result);
    }",./CodexTest_0_5_5.java,hibernate_1
"@Test
   public void testToShortShortWhenValueIsTrueShouldReturnOne() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(1, (short)result);
    }",./CodexTest_0_9_3.java,hibernate_1
"@Test
     public void testToShortWhenTrueBooleanGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(Short.valueOf(result), Short.valueOf((short)1));
    }",./CodexTest_0_7_1.java,hibernate_1
"@Test
    public void testToShortWithFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(0, result.intValue());
    }",./CodexTest_0_9_6.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenValueIsFalse() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(Short.valueOf((short) 0), result);
    }",./CodexTest_0_5_7.java,hibernate_1
"@Test
  public void testToShortShouldReturnNullWhenNullValueGiven() {
      // given
      BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
      // when
      Short result = underTest.toShort(null);
      // then
      assertNull(result);
  }",./CodexTest_0_6_6.java,hibernate_1
"@Test
  public void testToShortShouldReturnOneWhenTrueGiven() {
      // given
      BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
      // when
      Short result = underTest.toShort(true);
      // then
      assertEquals(Short.valueOf((short) 1), result);
  }",./CodexTest_0_4_7.java,hibernate_1
"@Test
  public void testToShortShouldReturnNullWhenNullGiven() {
		// given
		BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
		// when
		Short result = underTest.toShort(null);
		// then
		assertNull(result);
	}",./CodexTest_0_3_1.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenGivenFalse() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(0, result.shortValue());
    }",./CodexTest_0_6_8.java,hibernate_1
"@Test
    public void testToShortShouldReturnOneWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(TRUE);
        // then
        assertEquals(Short.valueOf((short) 1), result);
    }",./CodexTest_0_5_6.java,hibernate_1
"@Test
   public void testToShortShouldReturn1WhenTrueBooleanGiven() {
      // given
      BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
      // when
      Short result = underTest.toShort(Boolean.TRUE);
      // then
      assertEquals(Short.valueOf((short) 1), result);
  }",./CodexTest_0_8_1.java,hibernate_1
"@Test
    public void testToShortShouldReturnOneWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(Short.valueOf((short) 1), result);
    }",./CodexTest_0_1_1.java,hibernate_1
"@Test
    public void testToShortShouldReturnNullWhenNullGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(null);
        // then
        assertNull(result);
    }",./CodexTest_0_0_1.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(0, result.shortValue());
    }",./CodexTest_0_4_2.java,hibernate_1
"@Test
    public void testToShortShouldConvertTrueToOne() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(Boolean.TRUE);
        // then
        assertEquals(new Short((short) 1), result);
    }",./CodexTest_0_9_4.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(Short.valueOf((short)0), result);
    }",./CodexTest_0_7_3.java,hibernate_1
"@Test
    public void testToShortShouldReturnMinusOneWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(Short.valueOf((short) -1), result);
    }",./CodexTest_0_4_3.java,hibernate_1
"@Test
    public void testToShortShouldReturnNullWhenNullValueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(null);
        // then
        assertNull(result);
    }",./CodexTest_0_3_4.java,hibernate_1
"@Test
    public void testToShortShouldReturnTrueWhenTrueBooleanGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(Boolean.TRUE);
        // then
        assertEquals(result.shortValue(), 1);
    }",./CodexTest_0_5_3.java,hibernate_1
"@Test
  public void testToShortShouldReturnMinusOneWhenFalseGiven() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Short result = underTest.toShort(false);
    // then
    assertEquals(Short.valueOf((short) -1), result);
  }",./CodexTest_0_8_4.java,hibernate_1
"@Test
    public void testToShortShouldReturnOneWhenTrueValueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(new Short((short)1), result);
    }",./CodexTest_0_7_7.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(FALSE);
        // then
        assertEquals(Short.valueOf((short) 0), result);
    }",./CodexTest_0_5_4.java,hibernate_1
"@Test
  public void testToShortShouldReturnOneWhenValueIsTrue() {
      // given
      BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
      // when
      Short result = underTest.toShort(true);
      // then
      assertEquals(result, Short.valueOf((short)1));
  }",./CodexTest_0_8_8.java,hibernate_1
"@Test
    public void testToShortShouldReturnNullWhenNullValueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(null);
        // then
        assertNull(result);
    }",./CodexTest_0_3_3.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(Boolean.FALSE);
        // then
        assertEquals(new Short((short)0), result);
    }",./CodexTest_0_4_5.java,hibernate_1
"@Test
    public void testToShortShouldReturnZeroWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(Boolean.FALSE);
        // then
        assertEquals(Short.valueOf((short) 0), result);
    }",./CodexTest_0_3_2.java,hibernate_1
"@Test
  public void testToShortShouldReturnOneWhenTrueBooleanGiven() {
			// given
			BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
			// when
			Short result = underTest.toShort(Boolean.TRUE);
			// then
			assertEquals(Short.valueOf((short) 1), result);
		}",./CodexTest_0_6_1.java,hibernate_1
"@Test
  public void testToShortShouldReturnZeroWhenFalseGiven() {
    // given
    BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
    // when
    Short result = underTest.toShort(false);
    // then
    assertEquals(Short.valueOf((short) 0), result);
  }",./CodexTest_0_7_2.java,hibernate_1
"@Test
    public void testToShortShouldReturnOneWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(Boolean.TRUE);
        // then
        assertEquals(Short.valueOf((short) 1), result);
    }",./CodexTest_0_4_1.java,hibernate_1
"@Test
    public void testToShortShouldReturnOneWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(1, result.shortValue());
    }",./CodexTest_0_5_2.java,hibernate_1
"@Test
    public void testToShortShouldReturnNullWhenNullGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(null);
        // then
        Assert.assertNull(result);
    }",./CodexTest_0_7_9.java,hibernate_1
"@Test
  public void testToShortShouldReturnOneWhenTrueBooleanGiven() {
      // given
      BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
      // when
      Short result = underTest.toShort(Boolean.TRUE);
      // then
      assertEquals(Short.valueOf((short) 1), result);
  }",./CodexTest_0_8_7.java,hibernate_1
"@Test
        public void testToShortShouldReturnNullWhenNullValueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(null);
        // then
        assertNull(result);
    }",./CodexTest_0_6_7.java,hibernate_1
"@Test
    public void testToShortShouldReturnMinusOneWhenFalseGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(Boolean.FALSE);
        // then
        assertEquals(Short.valueOf((short) -1), result);
    }",./CodexTest_0_6_2.java,hibernate_1
"@Test
    public void testToShortShouldReturnShortValueWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(Short.valueOf((short) 1), result);
    }",./CodexTest_0_6_4.java,hibernate_1
"@Test
   public void testToShortShouldReturn0WhenFalseGiven() {
		// given
		BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
		// when
		Short result = underTest.toShort(Boolean.FALSE);
		// then
		assertEquals(Short.valueOf((short)0), result);
	}",./CodexTest_0_9_10.java,hibernate_1
"@Test
  public void testToShortShouldReturnZeroWhenFalseGiven() {
      // given
      BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
      // when
      Short result = underTest.toShort(Boolean.FALSE);
      // then
      assertEquals((short) 0, result.shortValue());
  }",./CodexTest_0_8_3.java,hibernate_1
"@Test
    public void testToShortFalse() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(false);
        // then
        assertEquals(0, result.intValue());
    }",./CodexTest_0_9_9.java,hibernate_1
"@Test
    public void testToShortShouldReturnOneWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(Short.valueOf((short)1), result);
    }",./CodexTest_0_6_3.java,hibernate_1
"@Test
    public void testToShortShouldReturnTrueWhenTrueGiven() {
        // given
        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();
        // when
        Short result = underTest.toShort(true);
        // then
        assertEquals(Short.valueOf((short) 1), result);
    }",./CodexTest_0_4_6.java,hibernate_1
"@Test
  public void testAssignDoubleArray() {
    double[] values = {1,2,3,4,5,6};
    DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
    DoubleMatrix1D B = new DenseDoubleMatrix1D(values.length);
    B.assign(values);
    assertEquals(A,B);
  }",./CodexTest_0_5_1.java,colt_1
"@Test
    public void testAssign() {
        double[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
        DoubleMatrix1D B = new DenseDoubleMatrix1D(values.length);
        B.assign(A);
        for (int i = 0; i < A.size(); ++i) {
            assertEquals(A.getQuick(i), B.getQuick(i));
        }
    }",./CodexTest_0_5_8.java,colt_1
"@Test
  public static void testSetQuick() {
    int size = 100000;
    DoubleMatrix1D dense = new DenseDoubleMatrix1D(size);
    DoubleMatrix1D sparse = new SparseDoubleMatrix1D(size);
    for (int i=size; --i >= 0;) {
      double value = Math.random();
      dense.setQuick(i,value);
      sparse.setQuick(i,value);
    }
    for (int i=size; --i >= 0;) {
      double value = Math.random();
      dense.setQuick(i,value);
      sparse.setQuick(i,value);
    }
    assertTrue(dense.equals(sparse));
    assertTrue(sparse.equals(dense));
  }",./CodexTest_0_7_1.java,colt_1
"@Test
  public void testAssignDoubleArray() {
    double[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
    DoubleMatrix1D B = new DenseDoubleMatrix1D(12);
    B.assign(values);
    assertEquals(A, B);
  }",./CodexTest_0_2_3.java,colt_1
"@Test
   public static void testAssignDoubleArray() {
		double[] data = {1,2,3,4,5,6};
		DoubleMatrix1D vector = new DenseDoubleMatrix1D(data);
		double[] data2 = {1,2,3,4,5,6};
		DoubleMatrix1D vector2 = new DenseDoubleMatrix1D(data2);
		vector.assign(vector2);
		System.out.println(vector);
	}",./CodexTest_0_4_7.java,colt_1
"@Test
    public void testAssignDoubleArray() {
        double[] values = new double[] {1,2,3,4,5,6,7,8,9,10,11,12};
        DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
        DoubleMatrix1D B = new DenseDoubleMatrix1D(values.length);
        B.assign(values);
        assertEquals(A,B);
    }",./CodexTest_0_3_1.java,colt_1
"@Test
    public void testAssignDoubleArray() {
		double[] values = {1,2,3,4,5,6};
		DoubleMatrix1D m = new DenseDoubleMatrix1D(values);
		DoubleMatrix1D m2 = new DenseDoubleMatrix1D(values.length);
		m2.assign(values);
		assertEquals(m,m2);
	}",./CodexTest_0_2_2.java,colt_1
"@Test
    public void testAssignDoubleArray(){
        double[] values = {0,1,2,3};
        DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
        DoubleMatrix1D B = new DenseDoubleMatrix1D(4);
        B.assign(values);
        assertEquals(A,B);
    }",./CodexTest_0_4_3.java,colt_1
"@Test
    public void testAssignDoubleArray() {
        double[] assigned = new double[] {3, 2, 1, 0, -1, -2, -3, -4};
        DoubleMatrix1D A = new DenseDoubleMatrix1D(assigned);
        DoubleMatrix1D B = new DenseDoubleMatrix1D(A.size());
        B.assign(assigned);
        assertEquals(A, B);
    }",./CodexTest_0_5_3.java,colt_1
"@Test public void testAssignDoubleArray() {
        double[] values = new double[] {1,2,3};
        DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
        DoubleMatrix1D B = new DenseDoubleMatrix1D(values);
        A.assign(values);
        assertEquals(A, B);
    }",./CodexTest_0_8_4.java,colt_1
"@Test
    public void testAssignDoubleArray() {
        double[] values = new double[] {1,2,3,4,5,6,7,8,9,10,11,12};
        DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
        DoubleMatrix1D B = new DenseDoubleMatrix1D(12);
        B.assign(values);
        assertEquals(A, B);
    }",./CodexTest_0_1_2.java,colt_1
"@Test
    public void testAssignDoubleArray() {
        double[] values = {1, 2, 3, 4, 5, 6};
        DoubleMatrix1D m = new DenseDoubleMatrix1D(values);
        DoubleMatrix1D m2 = new DenseDoubleMatrix1D(values.length);
        m2.assign(values);
        assertEquals(m, m2);
    }",./CodexTest_0_3_2.java,colt_1
"@Test
    public void testAssignDoubleArray() {
        double[] values = new double[] {1,2,3,4,5,6,7,8,9,10,11,12};
        DoubleMatrix1D A = new DenseDoubleMatrix1D(values);
        DoubleMatrix1D B = new DenseDoubleMatrix1D(12);
        B.assign(values);
        assertEquals(A,B);
    }",./CodexTest_0_0_2.java,colt_1
"@Test
    public void testAssign() {
        DoubleMatrix2D m = new DenseDoubleMatrix2D(3, 3);
        DoubleMatrix2D m2 = new DenseDoubleMatrix2D(3, 3);
        m.assign(m2);
        assertEquals(m, m2);
    }",./CodexTest_0_4_1.java,colt_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(5.0, Vector1D.distance(v1, v2), 1.0e-12);
        Assert.assertEquals(v1.subtract(v2).getNorm(), Vector1D.distance(v1, v2), 1.0e-12);
    }",./CodexTest_0_5_10.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(new Vector1D(2), v.scalarMultiply(2));
    }",./CodexTest_0_3_5.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(1.0, v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(2.0, v.scalarMultiply(2).getNorm(), 1.0e-12);
        Assert.assertEquals(3.0, v.scalarMultiply(3).getNorm(), 1.0e-12);
        Assert.assertEquals(4.0, v.scalarMultiply(4).getNorm(), 1.0e-12);
    }",./CodexTest_0_4_4.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Vector1D v2 = v.scalarMultiply(5);
        Assert.assertEquals(5.0, v2.getX(), 1.0e-12);
        Assert.assertEquals(5.0, v.scalarMultiply(5).getX(), 1.0e-12);
    }",./CodexTest_0_7_4.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D p1 = new Vector1D(1);
        Vector1D p2 = new Vector1D(-4);
        Assert.assertEquals(new Vector1D(0), p1.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(10), p1.scalarMultiply(10));
        Assert.assertEquals(new Vector1D(4), p2.scalarMultiply(-1));
        Assert.assertEquals(new Vector1D(-5), p2.scalarMultiply(5.0 / 4));
        Assert.assertEquals(new Vector1D(0), p2.scalarMultiply(0));
    }",./CodexTest_0_5_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0.0).getNorm(), 0);
        Assert.assertEquals(v.scalarMultiply(2.0).getNorm(), v.scalarMultiply(-2.0).getNorm(), 0);
    }",./CodexTest_0_7_8.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Assert.assertEquals(new Vector1D(10), v1.scalarMultiply(10));
        Assert.assertEquals(new Vector1D(0), v1.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(-10), v1.scalarMultiply(-10));
    }",./CodexTest_0_7_6.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, v1.scalarMultiply(0.0).getX(), 1.0e-12);
        Assert.assertEquals(-4.0, v1.scalarMultiply(-4.0).getX(), 1.0e-12);
        Assert.assertEquals(v1.scalarMultiply(2.0), v1.add(v1));
        Assert.assertEquals(v2.scalarMultiply(2.0), v2.add(v2));
    }",./CodexTest_0_4_10.java,math_1
"@Test
    public void testCreate() {
        Vector1D v1 = new Vector1D(0.0);
		Vector1D v1D = new Vector1D(0);
		Vector1D v2 = new Vector1D(-14.0);
		Vector1D v2D = new Vector1D(-14);
		Vector1D v3 = new Vector1D(7.0);
		Vector1D v3D = new Vector1D(7);
		Assert.assertEquals(0.0, v1.getNorm(), 1.0e-12);
		Assert.assertEquals(1.0, v2.scalarMultiply(-0.14285714285714285).getNorm(), 1.0e-12);
		Assert.assertEquals(7.0, v3.getNorm(), 1.0e-12);
		Assert.assertEquals(v1, v1D);
		Assert.assertEquals(v2, v2D);
		Assert.assertEquals(v3, v3D);
	}",./CodexTest_0_9_7.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Vector1D w = new Vector1D(2);
        Vector1D u = new Vector1D(0);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 0);
        Assert.assertEquals(2.0, v.scalarMultiply(2).getNorm(), 0);
        Assert.assertEquals(FastMath.sqrt(8.0), v.scalarMultiply(2).distance(w), 1.0e-12);
        Assert.assertEquals(new Vector1D(2).getNorm(), v.scalarMultiply(2).distance(w), 1.0e-12);
        Assert.assertEquals(new Vector1D(2).getNorm(), v.scalarMultiply(-2).distance(u), 1.0e-12);
    }",./CodexTest_0_7_5.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v, v.scalarMultiply(1));
        Assert.assertEquals(new Vector1D(2), v.scalarMultiply(2));
    }",./CodexTest_0_5_8.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Vector1D v3 = v1.scalarMultiply(4);
        Assert.assertEquals(4.0, v3.getX(), 1.0e-12);
        Assert.assertEquals(v1.getX(), v3.getX() / 4, 1.0e-12);
        Assert.assertEquals(v2.getX(), v3.getX() / -4, 1.0e-12);
        Assert.assertEquals(v1.add(v2).getNorm(), v1.scalarMultiply(2.0).getNorm(), 1.0e-12);
    }",./CodexTest_0_5_5.java,math_1
"@Test
    public void testScalarMult() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertTrue(v1.scalarMultiply(2.0).equals(new Vector1D(2.0)));
        Assert.assertTrue(v2.scalarMultiply(5.0).equals(new Vector1D(-20.0)));
    }",./CodexTest_0_9_5.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = v1.scalarMultiply(5);
        Assert.assertEquals(5.0, v2.getX(), 1.0e-12);
    }",./CodexTest_0_7_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v, v.scalarMultiply(1));
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v.scalarMultiply(-1), v.negate());
    }",./CodexTest_0_2_3.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(2);
        Assert.assertEquals(new Vector1D(2), v1.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(-10), v2.scalarMultiply(-5));
        Assert.assertEquals(new Vector1D(0), v2.scalarMultiply(0));
    }",./CodexTest_0_5_7.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, v1.scalarMultiply(0).getNorm(), 0);
        Assert.assertEquals(v1.getNorm(), v1.scalarMultiply(1).getNorm(), 0);
        Assert.assertEquals(v1.scalarMultiply(2).getNorm(), v1.add(v1).getNorm(), 0);
        Assert.assertEquals(v2.scalarMultiply(-1).getNorm(), v2.getNorm(), 0);
    }",./CodexTest_0_4_7.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(new Vector1D(2), v1.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(-8), v2.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(0), v2.scalarMultiply(0));
    }",./CodexTest_0_3_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D u = new Vector1D(3.0);
        Assert.assertEquals(new Vector1D(15.0), u.scalarMultiply(5));
        Assert.assertEquals(new Vector1D(-5.0), u.scalarMultiply(-1.6666666666666667));
    }",./CodexTest_0_6_8.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Vector1D w = new Vector1D(2);
        Assert.assertEquals(new Vector1D(2), w.scalarMultiply(1));
        Assert.assertEquals(new Vector1D(-2), w.scalarMultiply(-1));
        Assert.assertEquals(new Vector1D(0), v.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(0), v.scalarMultiply(-0.0));
        Assert.assertEquals(new Vector1D(3), v.scalarMultiply(3));
        Assert.assertEquals(new Vector1D(-3), v.scalarMultiply(-3));
        Assert.assertEquals(new Vector1D(Double.POSITIVE_INFINITY), v.scalarMultiply(Double.POSITIVE_INFINITY));
        Assert.assertEquals(new Vector1D(Double.NEGATIVE_INFINITY), v.scalarMultiply(Double.NEGATIVE_INFINITY));
        Assert.assertEquals(new Vector1D(Double.NaN), v.scalarMultiply(Double.NaN));
    }",./CodexTest_0_5_6.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, v1.scalarMultiply(0.0).distance(new Vector1D(0.0)), 0);
        Assert.assertEquals(v1.distance(v2),
                            v1.scalarMultiply(-1.0).distance(v2.scalarMultiply(-1.0)),
                            1.0e-12);
    }",./CodexTest_0_6_5.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Vector1D v2 = v.scalarMultiply(4);
        Assert.assertEquals(4.0, v2.getX(), 1.0e-12);
        Assert.assertTrue(v2 instanceof Vector1D);
        Assert.assertEquals(0.0, Vector1D.distance(v, v2), 1.0e-12);
    }",./CodexTest_0_8_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(-1).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm() * v.getNorm(), v.scalarMultiply(v.getNorm()).getNorm(), 1.0e-12);
    }",./CodexTest_0_1_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Vector1D v3 = v2.scalarMultiply(-1);
        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);
        Assert.assertEquals(0.0, Vector1D.distance(v1, v1), 1.0e-12);
        Assert.assertEquals(v1.getX(), v1.scalarMultiply(1.0).getX(), 1.0e-12);
        Assert.assertEquals(v2.scalarMultiply(-1).getX(), v3.getX(), 1.0e-12);
    }",./CodexTest_0_8_10.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v.scalarMultiply(2).getNorm(), v.add(v).getNorm(), 1.0e-12);
    }",./CodexTest_0_2_2.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v, v.scalarMultiply(1));
        Assert.assertEquals(v.negate(), v.scalarMultiply(-1));
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(v.getNorm()).getNorm(), 1.0e-12);
    }",./CodexTest_0_0_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = v1.scalarMultiply(5);
        Assert.assertEquals(5.0, v2.getX(), 1.0e-12);
        Assert.assertEquals(v1.getX(), v1.scalarMultiply(1).getX(), 1.0e-12);
    }",./CodexTest_0_6_9.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(new Vector1D(2), v.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(-2), v.scalarMultiply(-2));
        Assert.assertEquals(new Vector1D(-2), v.scalarMultiply(-2));
        Assert.assertEquals(new Vector1D(0), v.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(0), v.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(0), v.scalarMultiply(0));
    }",./CodexTest_0_4_2.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D u = new Vector1D(5);
        Vector1D v = u.scalarMultiply(2);
        Assert.assertEquals(2 * u.getX(), v.getX(), 1.0e-12);
        Assert.assertEquals(new Vector1D(10.0), v);
    }",./CodexTest_0_8_6.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(new Vector1D(0), v1.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(0), v2.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(2), v1.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(8), v2.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(-2), v1.scalarMultiply(-2));
        Assert.assertEquals(new Vector1D(-8), v2.scalarMultiply(-2));
    }",./CodexTest_0_3_4.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v, v.scalarMultiply(1));
        Assert.assertEquals(v.negate(), v.scalarMultiply(-1));
        Assert.assertEquals(v.add(v), v.scalarMultiply(2));
        Assert.assertEquals(v.subtract(v), v.scalarMultiply(0));
    }",./CodexTest_0_2_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm() * v.getNorm(), v.scalarMultiply(v.getNorm()).getNorm(), 1.0e-12);
    }",./CodexTest_0_1_3.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, v1.scalarMultiply(0).getX(), 1.0e-12);
        Assert.assertEquals(v1, v1.scalarMultiply(1));
        Assert.assertEquals(v2, v1.scalarMultiply(-4));
        Assert.assertEquals(v1.scalarMultiply(2), v1.add(v1));
        Assert.assertEquals(v1.scalarMultiply(-2), v1.subtract(v1).negate());
    }",./CodexTest_0_5_3.java,math_1
"@Test
    public void testScalarMultiply() {
			Vector1D v1 = new Vector1D(5);
			Vector1D v2 = v1.scalarMultiply(2);
			Assert.assertEquals(10.0, v2.getNorm(), 1.0e-12);
		}",./CodexTest_0_8_4.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, v1.scalarMultiply(0).getX(), 0);
        Assert.assertEquals(v1.getX(), v1.scalarMultiply(1).getX(), 0);
        Assert.assertEquals(v2.getX(), v2.scalarMultiply(1).getX(), 0);
        Assert.assertEquals(v1.getX() * 10, v1.scalarMultiply(10).getX(), 0);
        Assert.assertEquals(v2.getX() * 10, v2.scalarMultiply(10).getX(), 0);
    }",./CodexTest_0_4_9.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(-1).getNorm(), 1.0e-12);
        Assert.assertEquals(2 * v.getNorm(), v.scalarMultiply(2).getNorm(), 1.0e-12);
        Assert.assertEquals(2 * v.getNorm(), v.scalarMultiply(-2).getNorm(), 1.0e-12);
    }",./CodexTest_0_1_2.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(2);
        Assert.assertEquals(0.0, Vector1D.distance(v1.scalarMultiply(2), v2), 1.0e-12);
        Assert.assertEquals(v1.getNorm(), v1.scalarMultiply(2).getNorm(), 1.0e-12);
    }",./CodexTest_0_5_4.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(2);
        Assert.assertEquals(0.0, v1.scalarMultiply(0.0).getNorm(), 0);
        Assert.assertEquals(v2.getNorm(), v1.scalarMultiply(2).getNorm(), 1.0e-12);
        Assert.assertEquals(v1.add(v2).getNorm(), v1.scalarMultiply(3).getNorm(), 1.0e-12);
    }",./CodexTest_0_7_10.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Vector1D v2 = new Vector1D(3);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v2.getNorm(), v.scalarMultiply(3).getNorm(), 1.0e-12);
        Assert.assertEquals(v.scalarMultiply(-1).getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
    }",./CodexTest_0_6_10.java,math_1
"@Test
    public void testMultiply() {
        Vector1D v1 = new Vector1D(6);
        Assert.assertEquals(new Vector1D(12), v1.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(3), v1.scalarMultiply(0.5));
        Assert.assertEquals(new Vector1D(-6), v1.scalarMultiply(-1));
    }",./CodexTest_0_8_8.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(new Vector1D(2), v.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(0), v.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(-2), v.scalarMultiply(-2));
    }",./CodexTest_0_2_4.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(2);
        Assert.assertEquals(new Vector1D(2), v1.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(4), v2.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(0), v1.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(0), v2.scalarMultiply(0));
        Assert.assertEquals(new Vector1D(-2), v1.scalarMultiply(-2));
        Assert.assertEquals(new Vector1D(-4), v2.scalarMultiply(-2));
    }",./CodexTest_0_4_5.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Vector1D w = v.scalarMultiply(2);
        Assert.assertEquals(2.0, w.getX(), 1.0e-12);
        Assert.assertEquals(v.getX(), v.getX(), 1.0e-12);
        Assert.assertEquals(v.getX(), w.subtract(v).getX(), 1.0e-12);
    }",./CodexTest_0_3_2.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v, v.scalarMultiply(1));
        Assert.assertEquals(v.negate(), v.scalarMultiply(-1));
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1.0 / v.getNorm()).getNorm(), 1.0e-12);
    }",./CodexTest_0_0_2.java,math_1
"@Test
      public void testScalarMultiply() {
          Vector1D v = new Vector1D(1.0);
          Assert.assertEquals(Vector1D.ZERO, v.scalarMultiply(0.0));
          Assert.assertEquals(v, v.scalarMultiply(1.0));
          Assert.assertEquals(new Vector1D(-1.0), v.scalarMultiply(-1.0));
          Assert.assertEquals(new Vector1D(2.0), v.scalarMultiply(2.0));
          Assert.assertEquals(new Vector1D(4.0), v.scalarMultiply(4.0));
      }",./CodexTest_0_8_9.java,math_1
"@Test
    public void testScalarMultiply() {
        // scalarMultiply(double a)
        Vector1D v1 = new Vector1D(1);
        Assert.assertEquals(new Vector1D(2), v1.scalarMultiply(2));
        Assert.assertEquals(new Vector1D(-1), v1.scalarMultiply(-1));
        Assert.assertEquals(new Vector1D(0), v1.scalarMultiply(0));
    }",./CodexTest_0_7_2.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(2 * v.getNorm(), v.scalarMultiply(2).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(-1).getNorm(), 1.0e-12);
        Assert.assertEquals(2 * v.getNorm(), v.scalarMultiply(-2).getNorm(), 1.0e-12);
    }",./CodexTest_0_4_1.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v.add(v).getNorm(), v.scalarMultiply(2).getNorm(), 1.0e-12);
        Assert.assertEquals(v.subtract(v).getNorm(), v.scalarMultiply(-1).getNorm(), 1.0e-12);
    }",./CodexTest_0_5_2.java,math_1
"@Test
    public void testSubtract() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(2);
        Assert.assertEquals(new Vector1D(1), v2.subtract(v1));
    }",./CodexTest_0_8_7.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(1.0, v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(2.0, v.scalarMultiply(2).getNorm(), 1.0e-12);
        Assert.assertEquals(4.0, v.scalarMultiply(4).getNorm(), 1.0e-12);
        Assert.assertEquals(v.getNorm(), v.scalarMultiply(1).getNorm(), 1.0e-12);
    }",./CodexTest_0_6_7.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, v1.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(0.0, v2.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(v1.getNorm(), v1.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v1.getNorm(), v1.scalarMultiply(-1).getNorm(), 1.0e-12);
        Assert.assertEquals(v2.getNorm(), v2.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(v2.getNorm(), v2.scalarMultiply(-1).getNorm(), 1.0e-12);
        Assert.assertEquals(v1.getNorm(), v2.scalarMultiply(-1).getNorm(), 1.0e-12);
        Assert.assertEquals(v1.getNorm(), v2.scalarMultiply(1).getNorm(), 1.0e-12);
    }",./CodexTest_0_6_2.java,math_1
"@Test
   public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        for (double a : new double[] {0, 2, -5, 0.1, -0.1}) {
            Assert.assertEquals(Vector1D.distance(v1, v1.scalarMultiply(a)), FastMath.abs(a), 1.0e-12);
        }
    }",./CodexTest_0_8_2.java,math_1
"@Test
     public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = v1.scalarMultiply(2);
        Assert.assertEquals(0.0, v1.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(2.0, v2.getNorm(), 1.0e-12);
        Assert.assertEquals(v1.getNorm(), v2.scalarMultiply(0.5).getNorm(), 1.0e-12);
    }",./CodexTest_0_5_9.java,math_1
"@Test
     public void testScalarMultiply() {
         Vector1D v = new Vector1D(2);
         v = v.scalarMultiply(3);
         Assert.assertEquals(6, v.getX(), 1.0e-12);
     }",./CodexTest_0_9_9.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v1 = new Vector1D(1);
        Vector1D v2 = new Vector1D(-4);
        Assert.assertEquals(0.0, v1.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(1.0, v1.scalarMultiply(1.0).getNorm(), 1.0e-12);
        Assert.assertEquals(v2.getNorm(), v1.scalarMultiply(-4).getNorm(), 1.0e-12);
    }",./CodexTest_0_6_3.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Assert.assertEquals(v.scalarMultiply(2), new Vector1D(2));
    }",./CodexTest_0_4_6.java,math_1
"@Test
    public void testScalarMultiply() {
        Vector1D v = new Vector1D(1);
        Vector1D w = new Vector1D(2);
        Assert.assertEquals(2.0, v.scalarMultiply(2).getNorm(), 1.0e-12);
        Assert.assertEquals(0.0, v.scalarMultiply(0).getNorm(), 1.0e-12);
        Assert.assertEquals(1.0, v.scalarMultiply(1).getNorm(), 1.0e-12);
        Assert.assertEquals(3.0, v.scalarMultiply(1).add(w).getNorm(), 1.0e-12);
    }",./CodexTest_0_8_5.java,math_1
