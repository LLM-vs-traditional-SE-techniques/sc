/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Aug 11 13:40:28 GMT 2022
 */

package org.elasticsearch.action.index;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class IndexRequest_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.elasticsearch.action.index.IndexRequest"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/beatriz/paper-codex-study/test-generation/generate-tests/EvoSuite"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IndexRequest_ESTest_scaffolding.class.getClassLoader() ,
      "org.elasticsearch.ElasticsearchException",
      "org.elasticsearch.index.shard.ShardId",
      "org.elasticsearch.cluster.metadata.MetaData",
      "org.elasticsearch.common.io.stream.StreamOutput",
      "org.elasticsearch.transport.TransportRequest",
      "org.elasticsearch.cluster.metadata.MappingMetaData",
      "org.elasticsearch.action.IndicesRequest",
      "org.elasticsearch.common.xcontent.XContentBuilder",
      "org.elasticsearch.index.VersionType",
      "org.elasticsearch.action.delete.DeleteRequest",
      "org.elasticsearch.action.index.IndexRequest",
      "org.elasticsearch.action.RoutingMissingException",
      "org.elasticsearch.action.support.IndicesOptions",
      "org.elasticsearch.common.ValidationException",
      "org.elasticsearch.ElasticsearchGenerationException",
      "org.elasticsearch.common.lease.Releasable",
      "org.elasticsearch.action.ActionRequest",
      "org.elasticsearch.common.xcontent.ToXContent",
      "org.elasticsearch.action.support.replication.ReplicatedWriteRequest",
      "org.elasticsearch.common.bytes.BytesReference",
      "org.elasticsearch.cluster.AbstractDiffable",
      "org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix",
      "org.elasticsearch.action.support.ActiveShardCount",
      "org.joda.time.ReadablePeriod",
      "org.elasticsearch.Version",
      "org.elasticsearch.common.transport.TransportAddress",
      "org.joda.time.format.PeriodFormatterBuilder",
      "org.elasticsearch.action.ActionRequestValidationException",
      "org.elasticsearch.common.xcontent.ToXContentFragment",
      "org.joda.time.DurationFieldType",
      "org.apache.lucene.util.Accountable",
      "org.joda.time.format.PeriodFormat$DynamicWordBased",
      "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter",
      "org.elasticsearch.tasks.Task",
      "org.elasticsearch.ElasticsearchParseException",
      "org.elasticsearch.tasks.TaskAwareRequest",
      "org.elasticsearch.action.DocWriteRequest$OpType",
      "org.elasticsearch.common.xcontent.XContentType",
      "org.elasticsearch.common.io.stream.Streamable",
      "org.joda.time.format.PeriodFormatter",
      "org.joda.time.PeriodType",
      "org.elasticsearch.tasks.TaskId",
      "org.elasticsearch.common.bytes.BytesArray",
      "org.elasticsearch.index.VersionType$3",
      "org.elasticsearch.action.support.WriteRequest",
      "org.elasticsearch.index.VersionType$4",
      "org.elasticsearch.index.VersionType$1",
      "org.elasticsearch.index.VersionType$2",
      "org.elasticsearch.common.unit.TimeValue",
      "org.elasticsearch.action.CompositeIndicesRequest",
      "org.elasticsearch.transport.TransportMessage",
      "org.elasticsearch.cluster.Diffable",
      "org.joda.time.format.PeriodFormat",
      "org.joda.time.ReadWritablePeriod",
      "org.joda.time.format.PeriodFormatterBuilder$Composite",
      "org.elasticsearch.action.update.UpdateRequest",
      "org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix",
      "org.elasticsearch.action.DocWriteRequest",
      "org.joda.time.format.PeriodPrinter",
      "org.elasticsearch.action.support.replication.ReplicationRequest",
      "org.joda.time.format.PeriodFormatterBuilder$Separator",
      "org.elasticsearch.common.io.stream.StreamInput",
      "org.elasticsearch.common.xcontent.ToXContentObject",
      "org.joda.time.format.PeriodParser",
      "org.joda.time.format.PeriodFormatterBuilder$PluralAffix",
      "org.elasticsearch.action.support.WriteRequest$RefreshPolicy",
      "org.joda.time.DurationFieldType$StandardDurationFieldType",
      "org.elasticsearch.action.support.single.instance.InstanceShardOperationRequest",
      "org.elasticsearch.common.io.stream.Writeable",
      "org.elasticsearch.action.support.replication.ReplicationTask"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IndexRequest_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.elasticsearch.transport.TransportMessage",
      "org.elasticsearch.transport.TransportRequest",
      "org.elasticsearch.action.ActionRequest",
      "org.joda.time.format.PeriodFormat",
      "org.joda.time.format.PeriodFormat$DynamicWordBased",
      "org.joda.time.format.PeriodFormatterBuilder",
      "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter",
      "org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix",
      "org.joda.time.format.PeriodFormatterBuilder$PluralAffix",
      "org.joda.time.format.PeriodFormatterBuilder$Composite",
      "org.joda.time.format.PeriodFormatterBuilder$Separator",
      "org.joda.time.format.PeriodFormatter",
      "org.joda.time.PeriodType",
      "org.joda.time.DurationFieldType$StandardDurationFieldType",
      "org.joda.time.DurationFieldType",
      "org.elasticsearch.common.unit.TimeValue",
      "org.elasticsearch.action.support.replication.ReplicationRequest",
      "org.elasticsearch.action.support.replication.ReplicatedWriteRequest",
      "org.elasticsearch.action.index.IndexRequest",
      "org.elasticsearch.action.DocWriteRequest$OpType",
      "org.elasticsearch.index.VersionType",
      "org.elasticsearch.common.compress.DeflateCompressor",
      "org.elasticsearch.common.compress.CompressorFactory",
      "org.elasticsearch.common.xcontent.XContentType",
      "org.elasticsearch.common.xcontent.NamedXContentRegistry",
      "org.elasticsearch.client.Requests",
      "com.fasterxml.jackson.core.TokenStreamFactory",
      "com.fasterxml.jackson.core.JsonFactory$Feature",
      "com.fasterxml.jackson.core.JsonParser$Feature",
      "com.fasterxml.jackson.core.JsonGenerator$Feature",
      "com.fasterxml.jackson.core.io.CharTypes",
      "com.fasterxml.jackson.core.io.JsonStringEncoder",
      "com.fasterxml.jackson.core.io.SerializedString",
      "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
      "com.fasterxml.jackson.core.JsonFactory",
      "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer",
      "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo",
      "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer",
      "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo",
      "org.elasticsearch.common.Booleans",
      "org.elasticsearch.common.xcontent.json.JsonXContent",
      "org.joda.time.format.DateTimeFormatterBuilder",
      "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType",
      "org.joda.time.DateTimeFieldType",
      "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter",
      "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber",
      "org.joda.time.format.DateTimeFormatter",
      "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral",
      "org.joda.time.format.DateTimeFormatterBuilder$Composite",
      "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral",
      "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber",
      "org.joda.time.format.DateTimeFormatterBuilder$Fraction",
      "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset",
      "org.joda.time.format.ISODateTimeFormat",
      "org.joda.time.format.DateTimeFormatterBuilder$FixedNumber",
      "org.joda.time.format.InternalParserDateTimeParser",
      "org.joda.time.format.DateTimeParserInternalParser",
      "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser",
      "org.joda.time.format.DateTimePrinterInternalPrinter",
      "org.joda.time.UTCDateTimeZone",
      "org.joda.time.DateTimeZone",
      "org.joda.time.format.ISODateTimeFormat$Constants",
      "com.fasterxml.jackson.dataformat.smile.SmileParser$Feature",
      "com.fasterxml.jackson.dataformat.smile.SmileGenerator$Feature",
      "com.fasterxml.jackson.dataformat.smile.SmileFactory",
      "org.elasticsearch.common.xcontent.smile.SmileXContent",
      "org.apache.lucene.util.Version",
      "org.elasticsearch.Version",
      "org.elasticsearch.common.RandomBasedUUIDGenerator",
      "org.elasticsearch.common.MacAddressProvider",
      "org.elasticsearch.common.SecureRandomHolder",
      "org.elasticsearch.common.LegacyTimeBasedUUIDGenerator",
      "org.elasticsearch.common.TimeBasedUUIDGenerator",
      "org.elasticsearch.common.UUIDs",
      "org.elasticsearch.tasks.TaskId",
      "org.elasticsearch.action.support.ActiveShardCount",
      "org.elasticsearch.action.support.WriteRequest$RefreshPolicy"
    );
  }
}
