[
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"cern.colt.matrix.DoubleMatrix2D()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"aggregate(cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"aggregate(cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"assign(double[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"assign(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"assign(cern.colt.function.DoubleFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"assign(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"assign(cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"cardinality()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"equals(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"forEachNonZero(cern.colt.function.IntIntDoubleFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"get(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"getContent()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"getQuick(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"haveSharedCells(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"haveSharedCellsRaw(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"like()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"like(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"like1D(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"like1D(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"set(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"setQuick(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"view()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.view()",
                    "(DoubleMatrix2D) this.clone()"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewColumn(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewColumnFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewDice()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewPart(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewRow(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewRowFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewSelection(int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewSelection(cern.colt.matrix.DoubleMatrix1DProcedure)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewSelectionLike(int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewSorted(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"viewStrides(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"zAssign8Neighbors(cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"zMult(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.zMult(y, z)",
                    "this.zMult(y, z, 1, 0)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"zMult(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"zMult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.zMult(B, C)",
                    "this.zMult(B, C, 1, 0, false, false)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"zMult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.DoubleMatrix2D",
        "method_name":"zSum()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"cern.colt.matrix.linalg.Algebra()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"cern.colt.matrix.linalg.Algebra(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"cond(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"det(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"hypot(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"hypotFunction()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"inverse(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"mult(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.mult(x, y)",
                    "x.zDotProduct(y)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"mult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"mult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"multOuter(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"norm1(cern.colt.matrix.DoubleMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"norm1(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"norm2(cern.colt.matrix.DoubleMatrix1D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.norm2(x)",
                    "this.mult(x, x)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"norm2(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"normF(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"normInfinity(cern.colt.matrix.DoubleMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"normInfinity(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"permute(cern.colt.matrix.DoubleMatrix1D, int[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"permute(cern.colt.matrix.DoubleMatrix2D, int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"permuteColumns(cern.colt.matrix.DoubleMatrix2D, int[], int[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.permuteColumns(A, indexes, work)",
                    "this.permuteRows(this.transpose(A), indexes, work)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"permuteRows(cern.colt.matrix.DoubleMatrix2D, int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"pow(cern.colt.matrix.DoubleMatrix2D, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"property()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"rank(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"setProperty(cern.colt.matrix.linalg.Property)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"solve(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"solveTranspose(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"subMatrix(cern.colt.matrix.DoubleMatrix2D, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"toString(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"toVerboseString(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"trace(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"transpose(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Algebra",
        "method_name":"trapezoidalLower(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"cern.colt.matrix.linalg.Property(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"blanks(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"checkRectangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"checkSquare(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"density(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"equals(cern.colt.matrix.DoubleMatrix1D, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"equals(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"equals(cern.colt.matrix.DoubleMatrix2D, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"equals(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"equals(cern.colt.matrix.DoubleMatrix3D, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"equals(cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"generateNonSingular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"get(cern.colt.list.ObjectArrayList, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isDiagonal(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isDiagonallyDominantByColumn(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isDiagonallyDominantByRow(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isIdentity(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isLowerBidiagonal(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isLowerTriangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isNonNegative(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isOrthogonal(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isPositive(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isSingular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isSkewSymmetric(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isSquare(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isStrictlyLowerTriangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isStrictlyTriangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isStrictlyUpperTriangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isSymmetric(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isTriangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isTridiagonal(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isUnitTriangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isUpperBidiagonal(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isUpperTriangular(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"isZero(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"lowerBandwidth(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"semiBandwidth(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"setTolerance(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"tolerance()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"toString(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.linalg.Property",
        "method_name":"upperBandwidth(cern.colt.matrix.DoubleMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"cern.colt.matrix.ObjectMatrix1D()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"aggregate(cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"aggregate(cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"assign(java.lang.Object[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"assign(cern.colt.function.ObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"assign(cern.colt.matrix.ObjectMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"assign(cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"assign(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"cardinality()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.equals(otherObj)",
                    "this.equals(otherObj, true)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"equals(java.lang.Object, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"get(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"getContent()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"getQuick(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"haveSharedCells(cern.colt.matrix.ObjectMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"like()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"like(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"like2D(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"set(int, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"setQuick(int, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"swap(cern.colt.matrix.ObjectMatrix1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"toArray(java.lang.Object[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"view()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.view()",
                    "(ObjectMatrix1D) this.clone()"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"viewFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"viewPart(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"viewSelection(int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"viewSelection(cern.colt.function.ObjectProcedure)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"viewSelectionLike(int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"viewSorted()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix1D",
        "method_name":"viewStrides(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"cern.colt.matrix.ObjectMatrix2D()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"aggregate(cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"aggregate(cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"assign(java.lang.Object[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"assign(cern.colt.function.ObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"assign(cern.colt.matrix.ObjectMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"assign(cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"assign(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"cardinality()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.equals(otherObj)",
                    "this.equals(otherObj, true)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"equals(java.lang.Object, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"get(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"getContent()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"getQuick(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"haveSharedCells(cern.colt.matrix.ObjectMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"like()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"like(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"like1D(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"like1D(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"set(int, int, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"setQuick(int, int, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"view()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.view()",
                    "(ObjectMatrix2D) this.clone()"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewColumn(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewColumnFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewDice()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewPart(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewRow(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewRowFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewSelection(int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewSelection(cern.colt.matrix.ObjectMatrix1DProcedure)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewSelectionLike(int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewSorted(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix2D",
        "method_name":"viewStrides(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"cern.colt.matrix.ObjectMatrix3D()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"aggregate(cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"aggregate(cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"assign(java.lang.Object[][][])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"assign(cern.colt.function.ObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"assign(cern.colt.matrix.ObjectMatrix3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"assign(cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"assign(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"cardinality()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.equals(otherObj)",
                    "this.equals(otherObj, true)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"equals(java.lang.Object, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"get(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"getContent()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"getQuick(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"haveSharedCells(cern.colt.matrix.ObjectMatrix3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"like()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"like(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"like2D(int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"set(int, int, int, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"setQuick(int, int, int, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"view()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.view()",
                    "(ObjectMatrix3D) this.clone()"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewColumn(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewColumnFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewDice(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewPart(int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewRow(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewRowFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewSelection(int[], int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewSelection(cern.colt.matrix.ObjectMatrix2DProcedure)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewSelectionLike(int[], int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewSlice(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewSliceFlip()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewSorted(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.matrix.ObjectMatrix3D",
        "method_name":"viewStrides(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"cern.colt.Partitioning()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"dualPartition(double[], double[], int, int, double[], int, int, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"dualPartition(double[], double[], int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"dualPartition(int[], int[], int, int, int[], int, int, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"dualPartition(int[], int[], int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"genericPartition(int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(double[], int, int, double[], int, int, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(double[], int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(int[], int, int, int[], int, int, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(int[], int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(cern.colt.list.DoubleArrayList, int, int, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "cern.colt.Partitioning.partition(list, from, to, splitters, splitIndexes)",
                    "this.partition(list, from, to, splitters, splitIndexes)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"partition(cern.colt.list.IntArrayList, int, int, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "cern.colt.Partitioning.partition(list, from, to, splitters, splitIndexes)",
                    "this.partition(list, from, to, splitters, splitIndexes)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"triplePartition(double[], double[], double[], int, int, double[], int, int, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"triplePartition(double[], double[], double[], int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"triplePartition(int[], int[], int[], int, int, int[], int, int, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Partitioning",
        "method_name":"triplePartition(int[], int[], int[], int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"cern.colt.Timer()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"display()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"elapsedTime()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.elapsedTime()",
                    "this.seconds()"
                ]
            }
        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"millis()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"minus(cern.colt.Timer)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"minutes()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"plus(cern.colt.Timer)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"reset()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"seconds()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"start()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"stop()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"test(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.colt.Timer",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"cern.jet.stat.Probability()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"beta(double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "cern.jet.stat.Probability.beta(a, b, x)",
                    "cern.jet.stat.Gamma.incompleteBeta(a, b, x)"
                ]
            }
        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"betaComplemented(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"binomial(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"binomialComplemented(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"chiSquare(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"chiSquareComplemented(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"errorFunction(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"errorFunctionComplemented(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"gamma(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"gammaComplemented(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"negativeBinomial(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"negativeBinomialComplemented(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"normal(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"normal(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"normalInverse(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"poisson(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"poissonComplemented(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"studentT(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.Probability",
        "method_name":"studentTInverse(double, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.quantile.Utils",
        "method_name":"cern.jet.stat.quantile.Utils()",
        "oracles":[

        ]
    },
    {
        "class_name":"cern.jet.stat.quantile.Utils",
        "method_name":"epsilonCeiling(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"hep.aida.bin.QuantileBin1D()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"hep.aida.bin.QuantileBin1D(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"hep.aida.bin.QuantileBin1D(boolean, long, double, double, int, cern.jet.random.engine.RandomEngine)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"hep.aida.bin.QuantileBin1D(boolean, long, double, double, int, cern.jet.random.engine.RandomEngine, boolean, boolean, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"addAllOfFromTo(cern.colt.list.DoubleArrayList, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"compareWith(hep.aida.bin.AbstractBin1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"median()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"quantile(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"quantileInverse(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"quantiles(cern.colt.list.DoubleArrayList)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"sizeOfRange(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"splitApproximately(cern.colt.list.DoubleArrayList, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"splitApproximately(hep.aida.IAxis, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.bin.QuantileBin1D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"binEntries(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"binEntriesX(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.binEntriesX(indexX)",
                    "this.projectionX().binEntries(indexX)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"binEntriesY(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.binEntriesY(indexY)",
                    "this.projectionY().binEntries(indexY)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"binError(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"binHeight(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"binHeightX(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.binHeightX(indexX)",
                    "this.projectionX().binHeight(indexX)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"binHeightY(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.binHeightY(indexY)",
                    "this.projectionY().binHeight(indexY)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"fill(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"fill(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"meanX()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"meanY()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"minMaxBins()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"projectionX()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"projectionY()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"rmsX()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"rmsY()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"sliceX(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.sliceX(indexY)",
                    "this.sliceX(indexY, indexY)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"sliceX(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"sliceY(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.sliceY(indexX)",
                    "this.sliceY(indexX, indexX)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"sliceY(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"xAxis()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram2D",
        "method_name":"yAxis()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"binEntries(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"binError(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"binHeight(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"fill(double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.fill(x, y, z)",
                    "this.fill(x, y, z, 1)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"fill(double, double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"meanX()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"meanY()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"meanZ()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"minMaxBins()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"projectionXY()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"projectionXZ()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"projectionYZ()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"rmsX()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"rmsY()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"rmsZ()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"sliceXY(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.sliceXY(indexZ)",
                    "this.sliceXY(indexZ, indexZ)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"sliceXY(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"sliceXZ(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.sliceXZ(indexY)",
                    "this.sliceXZ(indexY, indexY)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"sliceXZ(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"sliceYZ(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.sliceYZ(indexX)",
                    "this.sliceYZ(indexX, indexX)"
                ]
            }
        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"sliceYZ(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"xAxis()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"yAxis()",
        "oracles":[

        ]
    },
    {
        "class_name":"hep.aida.IHistogram3D",
        "method_name":"zAxis()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.action.index.MappingUpdatedAction",
        "method_name":"updateMappingOnMaster(org.elasticsearch.index.Index, java.lang.String, org.elasticsearch.index.mapper.Mapping, org.elasticsearch.common.unit.TimeValue)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.action.index.MappingUpdatedAction",
        "method_name":"org.elasticsearch.cluster.action.index.MappingUpdatedAction(org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.ClusterSettings)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.action.index.MappingUpdatedAction",
        "method_name":"updateMappingOnMaster(org.elasticsearch.index.Index, java.lang.String, org.elasticsearch.index.mapper.Mapping)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.action.index.MappingUpdatedAction",
        "method_name":"setClient(org.elasticsearch.client.Client)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"resolveSearchRoutingAllIndices(org.elasticsearch.cluster.metadata.MetaData, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"indexAliases(org.elasticsearch.cluster.ClusterState, java.lang.String, java.util.function.Predicate<org.elasticsearch.cluster.metadata.AliasMetaData>, boolean, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteIndices(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.support.IndicesOptions, long, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"resolveSearchRouting(org.elasticsearch.cluster.ClusterState, java.lang.String, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteIndexNames(org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.Context, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteIndexNames(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.IndicesRequest)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"hasIndexOrAlias(java.lang.String, org.elasticsearch.cluster.ClusterState)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteIndices(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.IndicesRequest)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteIndices(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.support.IndicesOptions, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"resolveDateMathExpression(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"isPatternMatchingAllIndices(org.elasticsearch.cluster.metadata.MetaData, java.lang.String[], java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"matchesIndex(java.lang.String, java.lang.String, org.elasticsearch.cluster.ClusterState)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteIndexNames(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.support.IndicesOptions, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteIndices(org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.Context, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver(org.elasticsearch.common.settings.Settings)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"filteringAliases(org.elasticsearch.cluster.ClusterState, java.lang.String, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"concreteSingleIndex(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.IndicesRequest)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"isAllIndices(java.util.List<java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.metadata.IndexNameExpressionResolver",
        "method_name":"isExplicitAllPattern(java.util.List<java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.routing.ShardShuffler",
        "method_name":"nextSeed()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.routing.ShardShuffler",
        "method_name":"shuffle(java.util.List<org.elasticsearch.cluster.routing.ShardRouting>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.cluster.routing.ShardShuffler",
        "method_name":"shuffle(java.util.List<org.elasticsearch.cluster.routing.ShardRouting>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "shards",
                    "this.nextSeed()"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"appendElement(T[], T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"copyOf(java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"copyAndPut(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"get(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"copyAndPutAll(java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"insertElement(T[], T, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"copyAndRemove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"copyAndRemoveAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"containsKey(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"copyAndPutAll(java.lang.Iterable<java.util.Map.Entry<K1, V1>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.collect.CopyOnWriteHashMap",
        "method_name":"copyAndPutAll(java.util.stream.Stream<java.util.Map.Entry<K1, V1>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"isValidLongitude(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"normalizeLat(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"rectangleContainsPoint(org.apache.lucene.geo.Rectangle, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"quadTreeCellWidth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"parseGeoPoint(org.elasticsearch.common.xcontent.XContentParser)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"parseGeoPoint(org.elasticsearch.common.xcontent.XContentParser, org.elasticsearch.common.geo.GeoPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"distanceValues(org.elasticsearch.common.geo.GeoDistance, org.elasticsearch.common.unit.DistanceUnit, org.elasticsearch.index.fielddata.MultiGeoPointValues, org.elasticsearch.common.geo.GeoPoint...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"quadTreeLevelsForPrecision(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"geoHashCellHeight(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"quadTreeLevelsForPrecision(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"geoHashLevelsForPrecision(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"geoHashCellSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"geoHashLevelsForPrecision(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"planeDistance(double, double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.elasticsearch.common.geo.GeoUtils.planeDistance(lat1, lon1, lat2, lon2)",
                    "org.elasticsearch.common.geo.GeoUtils.arcDistance(lat1, lon1, lat2, lon2)"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"normalizePoint(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"parseGeoPoint(java.lang.String, org.elasticsearch.common.geo.GeoPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"quadTreeCellHeight(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"normalizePoint(org.elasticsearch.common.geo.GeoPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"maxRadialDistanceMeters(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"normalizePoint(org.elasticsearch.common.geo.GeoPoint, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"quadTreeCellSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"arcDistance(double, double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"normalizeLon(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"geoHashCellWidth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"isValidLatitude(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.geo.GeoUtils",
        "method_name":"normalizePoint(double[], boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"reset()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"toCharArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"org.elasticsearch.common.io.FastCharArrayWriter(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"flush()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"append(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"org.elasticsearch.common.io.FastCharArrayWriter()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"unsafeCharArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"append(java.lang.CharSequence, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"append(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"close()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"write(java.lang.String, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"write(char[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"writeTo(java.io.Writer)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"write(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"toStringTrim()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.FastCharArrayWriter",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"org.elasticsearch.common.io.UTF8StreamWriter()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"write(char[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"flush()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"write(java.lang.String, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"write(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"close()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"org.elasticsearch.common.io.UTF8StreamWriter(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"write(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"setOutput(java.io.OutputStream)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"reset()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"setOutputStream(java.io.OutputStream)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.setOutputStream(out)",
                    "this.equalssetOutput(out)"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.common.io.UTF8StreamWriter",
        "method_name":"write(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.Randomness",
        "method_name":"createSecure()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.Randomness",
        "method_name":"shuffle(java.util.List<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.Randomness",
        "method_name":"get(org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Setting<java.lang.Long>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.Randomness",
        "method_name":"get()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.AbstractRunnable",
        "method_name":"onRejection(java.lang.Exception)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.AbstractRunnable",
        "method_name":"onAfter()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.AbstractRunnable",
        "method_name":"run()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.AbstractRunnable",
        "method_name":"onFailure(java.lang.Exception)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.AbstractRunnable",
        "method_name":"isForceExecution()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.AbstractRunnable",
        "method_name":"doRun()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"getTasks()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"afterExecute(java.lang.Runnable, java.lang.Throwable)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"wrapRunnable(java.lang.Runnable)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"execute(java.lang.Runnable)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler, org.elasticsearch.common.util.concurrent.ThreadContext)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"shutdown(org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor.ShutdownListener)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"unwrap(java.lang.Runnable)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, org.elasticsearch.common.util.concurrent.ThreadContext)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"terminated()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor",
        "method_name":"doExecute(java.lang.Runnable)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"isDefaultContext()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"putTransient(java.lang.String, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"org.elasticsearch.common.util.concurrent.ThreadContext(org.elasticsearch.common.settings.Settings)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"writeTo(org.elasticsearch.common.io.stream.StreamOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"wrapRestorable(org.elasticsearch.common.util.concurrent.ThreadContext.StoredContext)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"addResponseHeader(java.lang.String, java.lang.String, java.util.function.Function<java.lang.String, java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"getHeaders()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"markAsSystemContext()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"isSystemContext()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"getTransient(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"stashContext()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"getResponseHeaders()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"putHeader(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"stashAndMergeHeaders(java.util.Map<java.lang.String, java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"newStoredContext(boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.newStoredContext(preserveResponseHeaders)",
                    "this.stashContext()"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"getHeader(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"putHeader(java.util.Map<java.lang.String, java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"isClosed()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"newRestorableContext(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"readHeaders(org.elasticsearch.common.io.stream.StreamInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"copyHeaders(java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"close()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"addResponseHeader(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"preserveContext(java.lang.Runnable)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.common.util.concurrent.ThreadContext",
        "method_name":"unwrap(java.lang.Runnable)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"rawPath()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"getLocalAddress()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"org.elasticsearch.rest.RestRequest(org.elasticsearch.common.xcontent.NamedXContentRegistry, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"param(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"applyContentParser(org.elasticsearch.common.CheckedConsumer<org.elasticsearch.common.xcontent.XContentParser, java.io.IOException>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"contentParser()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"contentOrSourceParamParser()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"param(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"org.elasticsearch.rest.RestRequest(org.elasticsearch.common.xcontent.NamedXContentRegistry, java.util.Map<java.lang.String, java.lang.String>, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsStringArrayOrEmptyIfAll(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"hasContentOrSourceParam()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"requiredContent()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"getHeaders()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"setXContentType(org.elasticsearch.common.xcontent.XContentType)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsTime(java.lang.String, org.elasticsearch.common.unit.TimeValue)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"getXContentType()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsStringArray(java.lang.String, java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsFloat(java.lang.String, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"hasParam(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"consumedParams()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"method()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"uri()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"content()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"unconsumedParams()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsLong(java.lang.String, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"getAllHeaderValues(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"path()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"getRemoteAddress()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsInt(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsSize(java.lang.String, org.elasticsearch.common.unit.ByteSizeValue)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"getXContentRegistry()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"params()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"hasContent()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"withContentOrSourceParamParserOrNull(org.elasticsearch.common.CheckedConsumer<org.elasticsearch.common.xcontent.XContentParser, java.io.IOException>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"contentOrSourceParam()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsBoolean(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"paramAsBoolean(java.lang.String, java.lang.Boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestRequest",
        "method_name":"header(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestUtils",
        "method_name":"decodeComponent(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.elasticsearch.rest.RestUtils.decodeComponent(s)",
                    "this.decodeComponent(s, java.nio.charset.Charset.UTF_8)"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestUtils",
        "method_name":"checkCorsSettingForRegex(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestUtils",
        "method_name":"decodeQueryString(java.lang.String, int, java.util.Map<java.lang.String, java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestUtils",
        "method_name":"decodeComponent(java.lang.String, java.nio.charset.Charset)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.elasticsearch.rest.RestUtils.decodeComponent(s, charset)",
                    "java.net.URLDecoder.decode(s, \"StandardCharsets.UTF_8\")"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.rest.RestUtils",
        "method_name":"corsSettingAsArray(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"bucketAggregations(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"maxBucketOrd()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"close()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator(java.lang.String, org.elasticsearch.search.aggregations.AggregatorFactories, org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.Aggregator, java.util.List<org.elasticsearch.search.aggregations.pipeline.PipelineAggregator>, java.util.Map<java.lang.String, java.lang.Object>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"collectBucket(org.elasticsearch.search.aggregations.LeafBucketCollector, int, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"getDocCounts()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"grow(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"bucketDocCount(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"collectExistingBucket(org.elasticsearch.search.aggregations.LeafBucketCollector, int, long)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "collectExistingBucket(subCollector, doc, bucketOrd)",
                    "this.collectBucket(subCollector, doc, bucketOrd)"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"incrementBucketDocCount(long, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
        "method_name":"bucketEmptyAggregations()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"innerEquals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"addRange(java.lang.String, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"addUnboundedFrom(java.lang.String, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"unit(org.elasticsearch.common.unit.DistanceUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"range()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"distanceType(org.elasticsearch.common.geo.GeoDistance)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"innerHashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"origin(org.elasticsearch.common.geo.GeoPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"keyed()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"keyed(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"addRange(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"addUnboundedTo(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"getType()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"addUnboundedFrom(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"innerWriteTo(org.elasticsearch.common.io.stream.StreamOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"addUnboundedTo(java.lang.String, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"innerBuild(org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource.GeoPoint>, org.elasticsearch.search.aggregations.AggregatorFactory<?>, org.elasticsearch.search.aggregations.AggregatorFactories.Builder)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder(java.lang.String, org.elasticsearch.common.geo.GeoPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"doXContentBody(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"distanceType()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"addRange(org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder.Range)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"origin()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"unit()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder",
        "method_name":"parse(java.lang.String, org.elasticsearch.common.xcontent.XContentParser)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"keyed(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"script(org.elasticsearch.script.Script)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"innerBuild(org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource.Bytes>, org.elasticsearch.search.aggregations.AggregatorFactory<?>, org.elasticsearch.search.aggregations.AggregatorFactories.Builder)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"getType()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"keyed()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"innerWriteTo(org.elasticsearch.common.io.stream.StreamOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addMaskRange(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addUnboundedFrom(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"doXContentBody(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addUnboundedFrom(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addMaskRange(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addRange(org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder.Range)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"getRanges()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addRange(java.lang.String, java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addUnboundedTo(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"innerEquals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addRange(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"parse(java.lang.String, org.elasticsearch.common.xcontent.XContentParser)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"innerHashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
        "method_name":"addUnboundedTo(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"addUnboundedFrom(java.lang.String, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"addRange(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"parse(java.lang.String, org.elasticsearch.common.xcontent.XContentParser)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"getType()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"addUnboundedFrom(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"addUnboundedTo(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"innerBuild(org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource.Numeric>, org.elasticsearch.search.aggregations.AggregatorFactory<?>, org.elasticsearch.search.aggregations.AggregatorFactories.Builder)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"addRange(java.lang.String, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
        "method_name":"addUnboundedTo(java.lang.String, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder(org.elasticsearch.common.io.stream.StreamInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"innerToXContent(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"contexts(java.util.Map<java.lang.String, java.util.List<? extends org.elasticsearch.common.xcontent.ToXContent>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"regex(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"parseContextBytes(org.elasticsearch.common.bytes.BytesReference, org.elasticsearch.common.xcontent.NamedXContentRegistry, org.elasticsearch.search.suggest.completion.context.ContextMappings)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"prefix(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"skipDuplicates()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"doEquals(org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"prefix(java.lang.String, org.elasticsearch.search.suggest.completion.FuzzyOptions)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"regex(java.lang.String, org.elasticsearch.search.suggest.completion.RegexOptions)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.regex(regex, regexOptions)",
                    "this.regex(regex)"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"skipDuplicates(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"fromXContent(org.elasticsearch.common.xcontent.XContentParser)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"build(org.elasticsearch.index.query.QueryShardContext)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"doHashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"doWriteTo(org.elasticsearch.common.io.stream.StreamOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"prefix(java.lang.String, org.elasticsearch.common.unit.Fuzziness)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.prefix(prefix, fuzziness)",
                    "this.prefix(prefix)"
                ]
            }
        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder",
        "method_name":"getWriteableName()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"writeTo(org.elasticsearch.common.io.stream.StreamOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"org.elasticsearch.search.suggest.SuggestionBuilder(org.elasticsearch.common.io.stream.StreamInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"prefix(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"fromXContent(org.elasticsearch.common.xcontent.XContentParser)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"toXContent(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"shardSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"org.elasticsearch.search.suggest.SuggestionBuilder(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"size(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"doWriteTo(org.elasticsearch.common.io.stream.StreamOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"analyzer()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"populateCommonFields(org.elasticsearch.index.mapper.MapperService, org.elasticsearch.search.suggest.SuggestionSearchContext.SuggestionContext)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"org.elasticsearch.search.suggest.SuggestionBuilder(java.lang.String, org.elasticsearch.search.suggest.SuggestionBuilder<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"regex(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"analyzer(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"doHashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"prefix()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"field()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"innerToXContent(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"text()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"shardSize(java.lang.Integer)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"doEquals(T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"text(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"regex()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.elasticsearch.search.suggest.SuggestionBuilder",
        "method_name":"build(org.elasticsearch.index.query.QueryShardContext)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Edge",
        "method_name":"isDirected()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Edge",
        "method_name":"getNode1()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getNode1()",
                    "this.getTargetNode()"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Edge",
        "method_name":"getSourceNode()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getSourceNode()",
                    "this.getNode0()"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Edge",
        "method_name":"getOpposite(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Edge",
        "method_name":"getTargetNode()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getTargetNode()",
                    "this.getNode1()"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Edge",
        "method_name":"isLoop()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Edge",
        "method_name":"getNode0()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getNode0()",
                    "this.getSourceNode()"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getHash(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getId()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"addAttributes(java.util.Map<java.lang.String, java.lang.Object>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getNumber(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"setAttribute(java.lang.String, java.lang.Object...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.setAttribute(attribute, values)",
                    "this.addAttribute(attribute, values)"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"addAttribute(java.lang.String, java.lang.Object...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getLabel(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"hasHash(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"hasVector(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"hasAttribute(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"hasNumber(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getFirstAttributeOf(java.lang.Class<T>, java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getArray(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getFirstAttributeOf(java.lang.String...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getFirstAttributeOf(keys)",
                    "this.getAttribute(keys[0])"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getVector(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"changeAttribute(java.lang.String, java.lang.Object...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.changeAttribute(attribute, values)",
                    "this.addAttribute(attribute, values)"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"hasAttribute(java.lang.String, java.lang.Class<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"hasArray(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getAttributeCount()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"removeAttribute(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getEachAttributeKey()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"clearAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getAttribute(java.lang.String, java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getAttribute(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"hasLabel(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getAttributeKeyIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Element",
        "method_name":"getAttributeKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"getEdgeSetBetween(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"removeEdge(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"org.graphstream.graph.implementations.MultiNode(org.graphstream.graph.implementations.AbstractGraph, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"clearCallback()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"getEdgeSetBetween(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"getNeighborNodeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"locateEdge(org.graphstream.graph.Node, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.MultiNode",
        "method_name":"getEdgeSetBetween(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.SingleNode",
        "method_name":"clearCallback()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.SingleNode",
        "method_name":"getNeighborNodeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.SingleNode",
        "method_name":"locateEdge(org.graphstream.graph.Node, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.SingleNode",
        "method_name":"org.graphstream.graph.implementations.SingleNode(org.graphstream.graph.implementations.AbstractGraph, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.SingleNode",
        "method_name":"addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.implementations.SingleNode",
        "method_name":"removeEdge(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getBreadthFirstIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getDepthFirstIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getNeighborNodeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeBetween(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEnteringEdgeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeFrom(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeFrom(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeFrom(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEachEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeToward(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getGraph()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeBetween(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getInDegree()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getBreadthFirstIterator(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEachLeavingEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeFrom(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeBetween(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEachEnteringEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getLeavingEdgeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeToward(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getDepthFirstIterator(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeFrom(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeFrom(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getOutDegree()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getLeavingEdge(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getLeavingEdgeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeToward(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeToward(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEnteringEdge(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdge(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeBetween(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeToward(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEdgeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeToward(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getDegree()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"getEnteringEdgeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeBetween(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Node",
        "method_name":"hasEdgeBetween(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getNodeCount()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getNodeCount()",
                    "this.size()"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getEachNode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"push(org.graphstream.graph.Node, org.graphstream.graph.Edge)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.push(from, edge)",
                    "this.add(edge)"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getACopy()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"contains(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getNodePath()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"push(org.graphstream.graph.Edge)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.push(edge)",
                    "this.add(edge)"
                ]
            }
        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"popEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getEdgePath()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"equals(org.graphstream.graph.Path)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"peekNode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"setRoot(org.graphstream.graph.Node)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"add(org.graphstream.graph.Edge)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getNodeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getEdgeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"empty()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"add(org.graphstream.graph.Node, org.graphstream.graph.Edge)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"contains(org.graphstream.graph.Edge)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getEachEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getPathWeight(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"org.graphstream.graph.Path()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getEdgeCount()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"removeLoops()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getRoot()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"peekEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"popNode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getEdgeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Path",
        "method_name":"getNodeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getEdgeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getNodeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getEdgeCount()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getNodeCount()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getNodeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getEdgeIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getEachEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.graph.Structure",
        "method_name":"getEachNode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"org.graphstream.ui.geom.Vector2()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"dotProduct(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"length()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"mult(org.graphstream.ui.geom.Vector2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"scalarAdd(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"scalarMult(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"dotProduct(org.graphstream.ui.geom.Vector2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"isZero()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"set(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"org.graphstream.ui.geom.Vector2(org.graphstream.ui.geom.Point2, org.graphstream.ui.geom.Point2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"scalarDiv(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"add(org.graphstream.ui.geom.Vector2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"normalize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"at(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"sub(org.graphstream.ui.geom.Vector2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"copy(org.graphstream.ui.geom.Vector2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"org.graphstream.ui.geom.Vector2(org.graphstream.ui.geom.Vector2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"fill(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"validComponent(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"scalarSub(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"set(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"x()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"copy(org.graphstream.ui.geom.Point2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"org.graphstream.ui.geom.Vector2(org.graphstream.ui.geom.Point2)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"org.graphstream.ui.geom.Vector2(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector2",
        "method_name":"y()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"org.graphstream.ui.geom.Vector3()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"length()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"crossProduct(org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"add(org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"crossProduct(org.graphstream.ui.geom.Vector3, org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"scalarDiv(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"sub(org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"org.graphstream.ui.geom.Vector3(org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"dotProduct(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"fill(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"copy(org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"validComponent(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"set(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"scalarSub(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"isZero()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"org.graphstream.ui.geom.Vector3(org.graphstream.ui.geom.Point3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"org.graphstream.ui.geom.Vector3(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"copy(org.graphstream.ui.geom.Point3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"set(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"normalize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"mult(org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"scalarAdd(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"dotProduct(org.graphstream.ui.geom.Vector3)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"scalarMult(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.graphstream.ui.geom.Vector3",
        "method_name":"z()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"apply(java.lang.Character)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"and(com.google.common.base.CharMatcher)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"javaLetterOrDigit()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"countIn(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"ascii()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"whitespace()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"setBits(java.util.BitSet)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"indexIn(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"noneOf(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"matchesNoneOf(java.lang.CharSequence)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.matchesNoneOf(sequence)",
                    "!this.matchesAnyOf(sequence)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"collapseFrom(java.lang.CharSequence, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"trimTrailingFrom(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"breakingWhitespace()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"javaLowerCase()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"inRange(char, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"retainFrom(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"isNot(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"precomputed()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"removeFrom(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"trimLeadingFrom(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"singleWidth()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"none()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"matchesAllOf(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"lastIndexIn(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"javaDigit()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"matchesAnyOf(java.lang.CharSequence)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.matchesAnyOf(sequence)",
                    "!this.matchesNoneOf(sequence)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"com.google.common.base.CharMatcher()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"any()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"javaLetter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"is(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"digit()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"invisible()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"indexIn(java.lang.CharSequence, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"forPredicate(com.google.common.base.Predicate<? super java.lang.Character>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"or(com.google.common.base.CharMatcher)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"javaIsoControl()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"negate()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"trimFrom(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"anyOf(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"javaUpperCase()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"matches(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"precomputedInternal()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"trimAndCollapseFrom(java.lang.CharSequence, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.CharMatcher",
        "method_name":"replaceFrom(java.lang.CharSequence, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"or(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"or(com.google.common.base.Predicate<? super T>...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"and(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"and(com.google.common.base.Predicate<? super T>...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"or(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"in(java.util.Collection<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"and(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"defensiveCopy(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"containsPattern(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"instanceOf(java.lang.Class<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"alwaysTrue()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"not(com.google.common.base.Predicate<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"contains(java.util.regex.Pattern)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"notNull()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"equalTo(T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"alwaysFalse()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"assignableFrom(java.lang.Class<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"compose(com.google.common.base.Predicate<B>, com.google.common.base.Function<A, ? extends B>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Predicates",
        "method_name":"isNull()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"on(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"withKeyValueSeparator(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"withKeyValueSeparator(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"trimResults()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.trimResults()",
                    "this.trimResults(com.google.common.base.CharMatcher.WHITESPACE)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"limit(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"withKeyValueSeparator(com.google.common.base.Splitter)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"omitEmptyStrings()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"onPattern(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.base.Splitter.onPattern(separatorPattern)",
                    "com.google.common.base.Splitter.on(java.util.regex.Pattern.compile(separatorPattern))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"split(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"trimResults(com.google.common.base.CharMatcher)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"on(com.google.common.base.CharMatcher)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"on(java.util.regex.Pattern)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"on(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"fixedLength(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Splitter",
        "method_name":"splitToList(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Utf8",
        "method_name":"encodedLength(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Utf8",
        "method_name":"isWellFormed(byte[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.base.Utf8",
        "method_name":"isWellFormed(byte[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"fn(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"intValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"sumThenReset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"sum()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"add(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"doubleValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"floatValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"com.google.common.cache.LongAdder()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"decrement()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"increment()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"longValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.cache.LongAdder",
        "method_name":"reset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"com.google.common.collect.AbstractListMultimap(java.util.Map<K, java.util.Collection<V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"createUnmodifiableEmptyCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractListMultimap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"setMap(java.util.Map<K, java.util.Collection<V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"wrapCollection(K, java.util.Collection<V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"unmodifiableCollectionSubclass(java.util.Collection<V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"createKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"createAsMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"createUnmodifiableEmptyCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"valueIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"com.google.common.collect.AbstractMapBasedMultimap(java.util.Map<K, java.util.Collection<V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"backingMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"containsKey(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultimap",
        "method_name":"createCollection(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"setCount(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"add(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"remove(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"count(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"setBackingMap(java.util.Map<E, com.google.common.collect.Count>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"com.google.common.collect.AbstractMapBasedMultiset(java.util.Map<E, com.google.common.collect.Count>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"distinctElements()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMapBasedMultiset",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"createValues()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"keys()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"createEntries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"createKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"createKeys()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"putAll(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"valueIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"createAsMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultimap",
        "method_name":"containsEntry(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"addAll(java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"add(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"remove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"distinctElements()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"count(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"add(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"createElementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"setCount(E, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"removeAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"retainAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"elementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"setCount(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"remove(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractMultiset",
        "method_name":"createEntrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"createUnmodifiableEmptyCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"com.google.common.collect.AbstractSetMultimap(java.util.Map<K, java.util.Collection<V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSetMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedKeySortedSetMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedKeySortedSetMultimap",
        "method_name":"com.google.common.collect.AbstractSortedKeySortedSetMultimap(java.util.SortedMap<K, java.util.Collection<V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedKeySortedSetMultimap",
        "method_name":"backingMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedKeySortedSetMultimap",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"pollLastEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"com.google.common.collect.AbstractSortedMultiset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"pollFirstEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"createElementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"com.google.common.collect.AbstractSortedMultiset(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"firstEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"descendingMultiset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"createDescendingMultiset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"elementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"lastEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"comparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"descendingIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedMultiset",
        "method_name":"descendingEntryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"com.google.common.collect.AbstractSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"createUnmodifiableEmptyCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractSortedSetMultimap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"createValues()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"containsRow(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"get(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"containsColumn(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"put(R, C, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"createCellSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"valuesIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"columnKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"contains(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"cellSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"cellIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.AbstractTable",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayListMultimap",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayListMultimap",
        "method_name":"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayListMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayListMultimap",
        "method_name":"create(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayListMultimap",
        "method_name":"trimToSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"column(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"contains(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"put(R, C, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"cellSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"create(com.google.common.collect.Table<R,, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"at(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"rowKeyList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"set(int, int, V)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.set(rowIndex, columnIndex, value)",
                    "this.put(this.rowKeyList().get(rowIndex), this.columnKeyList().get(columnIndex), value)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"get(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"eraseAll()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"clear()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.clear()",
                    "this.eraseAll()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"toArray(java.lang.Class<V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"containsRow(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"row(R)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"cellIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"containsColumn(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"erase(java.lang.Object, java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.erase(rowKey, columnKey)",
                    "this.put(rowKey, columnKey, null)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"columnKeyList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"rowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.remove(rowKey, columnKey)",
                    "this.erase(rowKey, columnKey)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"columnMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ArrayTable",
        "method_name":"columnKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"safeContains(java.util.Collection<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"orderedPermutations(java.lang.Iterable<E>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.collect.Collections2.orderedPermutations(elements)",
                    "Collections2.orderedPermutations(list, Ordering.natural())"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"safeRemove(java.util.Collection<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"containsAllImpl(java.util.Collection<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"permutations(java.util.Collection<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"filter(java.util.Collection<E>, com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"newStringBuilderForCollection(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"cast(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"toStringImpl(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Collections2",
        "method_name":"transform(java.util.Collection<F>, com.google.common.base.Function<? super, T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"remove(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"setCount(E, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"createEntrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"toArray(T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"createElementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"count(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"create(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"distinctElements()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"create(com.google.common.collect.MapMaker)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"add(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"removeExactly(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ConcurrentHashMultiset",
        "method_name":"setCount(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"headSetImpl(C, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"intersection(com.google.common.collect.ContiguousSet<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"range()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.range()",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"subSet(C, boolean, C, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"com.google.common.collect.ContiguousSet(com.google.common.collect.DiscreteDomain<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"subSet(C, C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"tailSet(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"tailSetImpl(C, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"headSet(C, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"builder()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"create(com.google.common.collect.Range<C>, com.google.common.collect.DiscreteDomain<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"tailSet(C, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"subSetImpl(C, boolean, C, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ContiguousSet",
        "method_name":"headSet(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"filter(java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"get(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"anyMatch(com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"of(E[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toArray(java.lang.Class<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toSortedList(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toMap(com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"append(E...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"allMatch(com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"cycle()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"com.google.common.collect.FluentIterable(java.lang.Iterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"transformAndConcat(com.google.common.base.Function<? super, ? extends java.lang.Iterable<? extends T>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"first()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toMultiset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"uniqueIndex(com.google.common.base.Function<? super, K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"skip(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"last()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"append(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"com.google.common.collect.FluentIterable()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"transform(com.google.common.base.Function<? super, T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"copyInto(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"index(com.google.common.base.Function<? super, K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toSortedSet(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"firstMatch(com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"join(com.google.common.base.Joiner)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"from(java.lang.Iterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"from(com.google.common.collect.FluentIterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"filter(com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"limit(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.FluentIterable",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"contains(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"containsRow(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"containsColumn(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"get(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"com.google.common.collect.HashBasedTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.collect.HashBasedTable.Factory<C, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"create(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"create(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashBasedTable",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashMultimap",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashMultimap",
        "method_name":"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashMultimap",
        "method_name":"create(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashMultiset",
        "method_name":"create(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashMultiset",
        "method_name":"create(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.HashMultiset",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"toArray(T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"com.google.common.collect.ImmutableCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"removeAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"addAll(java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"remove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"asList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"add(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"retainAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"isPartialView()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"copyIntoArray(java.lang.Object[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"writeReplace()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableCollection",
        "method_name":"createAsList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"of(K, V, K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"builder()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"of(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"of(K, V, K, V, K, V, K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"com.google.common.collect.ImmutableListMultimap(com.google.common.collect.ImmutableMap<K, com.google.common.collect.ImmutableList<V>>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K, ? extends V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"of(K, V, K, V, K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"of(K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"of()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableListMultimap",
        "method_name":"inverse()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"createKeys()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"of(K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"inverse()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"containsKey(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"of()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K, ? extends V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"keys()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"createValues()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"com.google.common.collect.ImmutableMultimap(com.google.common.collect.ImmutableMap<K, ? extends com.google.common.collect.ImmutableCollection<V>>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"isPartialView()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"putAll(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"createAsMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"createEntries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"valueIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"of(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"of(K, V, K, V, K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"builder()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"of(K, V, K, V, K, V, K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultimap",
        "method_name":"of(K, V, K, V, K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"remove(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"getEntry(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"setCount(E, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"of(E, E, E, E, E, E, E...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"of()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"builder()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"of(E, E, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"of(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"of(E, E, E, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"copyFromEntries(java.util.Collection<? extends com.google.common.collect.Multiset.Entry<? extends E>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"copyIntoArray(java.lang.Object[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"com.google.common.collect.ImmutableMultiset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"of(E, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"setCount(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"writeReplace()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"copyOf(E[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"copyOf(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"copyOf(java.util.Iterator<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"of(E, E, E, E, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"add(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableMultiset",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"add(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"removeAll(com.google.common.collect.RangeSet<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"encloses(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"span()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"of(com.google.common.collect.Range<C>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatablecom.google.common.collect.ImmutableRangeSet.of(range).equals(this.of())"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"rangeContaining(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"asRanges()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"asSet(com.google.common.collect.DiscreteDomain<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"asDescendingSetOfRanges()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"all()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"complement()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"addAll(com.google.common.collect.RangeSet<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"subRangeSet(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"com.google.common.collect.ImmutableRangeSet(com.google.common.collect.ImmutableList<com.google.common.collect.Range<C>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"isPartialView()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"copyOf(com.google.common.collect.RangeSet<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"writeReplace()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"of()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"builder()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableRangeSet",
        "method_name":"remove(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"cellIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"put(R, C, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"row(R)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"contains(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"copyOf(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"cellSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"of(R, C, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"builder()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.collect.ImmutableTable.builder()",
                    "ImmutableTable.Builder.ImmutableTable.Builder()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"createValues()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"columnMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"column(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"columnKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"of()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"cellOf(R, C, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"rowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"com.google.common.collect.ImmutableTable()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"createCellSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"valuesIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ImmutableTable",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"frequency(java.lang.Iterable<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"filter(java.lang.Iterable<?>, java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"get(java.lang.Iterable<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"consumingIterable(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"skip(java.lang.Iterable<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"limit(java.lang.Iterable<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"get(java.lang.Iterable<? extends T>, int, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"any(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"transform(java.lang.Iterable<F>, com.google.common.base.Function<? super, ? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"isEmpty(java.lang.Iterable<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"removeFirstMatching(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"indexOf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"find(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"contains(java.lang.Iterable<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"getLast(java.lang.Iterable<? extends T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"cycle(T...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.collect.Iterables.cycle(elements)",
                    "com.google.common.collect.Iterables.cycle(com.google.common.collect.Lists.newArrayList(elements))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"partition(java.lang.Iterable<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"cycle(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"removeAll(java.lang.Iterable<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"unmodifiableIterable(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"unmodifiableIterable(com.google.common.collect.ImmutableCollection<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"removeIf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"getOnlyElement(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"toArray(java.lang.Iterable<? extends T>, T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"all(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"toArray(java.lang.Iterable<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"paddedPartition(java.lang.Iterable<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"getFirst(java.lang.Iterable<? extends T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"concat(java.lang.Iterable<? extends T>...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"toString(java.lang.Iterable<?>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.collect.Iterables.toString(iterable)",
                    "Arrays.toString(Iterables.toArray(iterable))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"find(java.lang.Iterable<? extends T>, com.google.common.base.Predicate<? super T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"getLast(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"retainAll(java.lang.Iterable<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"getOnlyElement(java.lang.Iterable<? extends T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"size(java.lang.Iterable<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterables",
        "method_name":"tryFind(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"forEnumeration(java.util.Enumeration<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"forArray(T[], int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"getLast(java.util.Iterator<? extends T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"cast(java.util.Iterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"toString(java.util.Iterator<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"peekingIterator(java.util.Iterator<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"advance(java.util.Iterator<?>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"frequency(java.util.Iterator<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"all(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"consumingIterator(java.util.Iterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"limit(java.util.Iterator<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"get(java.util.Iterator<? extends T>, int, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"transform(java.util.Iterator<F>, com.google.common.base.Function<? super, ? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"any(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"pollNext(java.util.Iterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"filter(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"emptyModifiableIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"removeIf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"forArray(T...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"tryFind(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"getLast(java.util.Iterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"emptyListIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"getNext(java.util.Iterator<? extends T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"clear(java.util.Iterator<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"partition(java.util.Iterator<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"contains(java.util.Iterator<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"find(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"concat(java.util.Iterator<? extends T>...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"removeAll(java.util.Iterator<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"size(java.util.Iterator<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"getOnlyElement(java.util.Iterator<? extends T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"paddedPartition(java.util.Iterator<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"find(java.util.Iterator<? extends T>, com.google.common.base.Predicate<? super T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"cycle(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"emptyIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"getOnlyElement(java.util.Iterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"cycle(T...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"get(java.util.Iterator<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"asEnumeration(java.util.Iterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"unmodifiableIterator(java.util.Iterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"checkNonnegative(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"singletonIterator(T)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.collect.Iterators.singletonIterator(value)",
                    "java.util.Collections.singleton(value)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"peekingIterator(com.google.common.collect.PeekingIterator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"retainAll(java.util.Iterator<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"filter(java.util.Iterator<?>, java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Iterators",
        "method_name":"indexOf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"valueIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"create(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"createCollection(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultimap",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultiset",
        "method_name":"create(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultiset",
        "method_name":"create(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedHashMultiset",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"create(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"containsKey(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"createKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"createValues()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"createEntries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"createAsMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"com.google.common.collect.LinkedListMultimap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.LinkedListMultimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ListMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ListMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ListMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ListMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.ListMultimap",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newArrayList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"charactersOf(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"indexOfImpl(java.util.List<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"asList(E, E, E[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newArrayList(E...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newArrayList(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newArrayList(java.util.Iterator<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"addAllImpl(java.util.List<E>, int, java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"computeArrayListCapacity(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newLinkedList(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"asList(E, E[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"charactersOf(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"lastIndexOfImpl(java.util.List<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newCopyOnWriteArrayList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"reverse(java.util.List<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newLinkedList()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"hashCodeImpl(java.util.List<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"cast(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"subListImpl(java.util.List<E>, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newArrayListWithExpectedSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"partition(java.util.List<T>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"listIteratorImpl(java.util.List<E>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"newArrayListWithCapacity(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"cartesianProduct(java.util.List<? extends java.util.List<? extends B>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"cartesianProduct(java.util.List<? extends B>...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"equalsImpl(java.util.List<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Lists",
        "method_name":"transform(java.util.List<F>, com.google.common.base.Function<? super, ? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"keyFunction()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"valueOrNull(java.util.Map.Entry<?, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"containsEntryImpl(java.util.Collection<java.util.Map.Entry<K, V>>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asValueToValueFunction(com.google.common.collect.Maps.EntryTransformer<? super,, V2>, K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"uniqueIndex(java.lang.Iterable<V>, com.google.common.base.Function<? super, K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"uniqueIndex(java.util.Iterator<V>, com.google.common.base.Function<? super, K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"keyIterator(java.util.Iterator<java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"valueFunction()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"immutableEnumMap(java.util.Map<K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asEntryToValueFunction(com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asConverter(com.google.common.collect.BiMap<A, B>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asMap(java.util.Set<K>, com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asMap(java.util.SortedSet<K>, com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asMap(java.util.NavigableSet<K>, com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newTreeMap(java.util.Comparator<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newEnumMap(java.util.Map<K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"unmodifiableEntryIterator(java.util.Iterator<java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"synchronizedBiMap(com.google.common.collect.BiMap<K, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"safeGet(java.util.Map<?, V>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"toStringImpl(java.util.Map<?, ?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newTreeMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"unmodifiableEntrySet(java.util.Set<java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformEntry(com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>, java.util.Map.Entry<K, V1>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterEntries(java.util.Map<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterEntries(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterEntries(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"keyPredicateOnEntries(com.google.common.base.Predicate<? super K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"unmodifiableBiMap(com.google.common.collect.BiMap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"indexMap(java.util.Collection<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newLinkedHashMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"fromProperties(java.util.Properties)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newLinkedHashMapWithExpectedSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, com.google.common.base.Equivalence<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newTreeMap(java.util.SortedMap<K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"equalsImpl(java.util.Map<?, ?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"valuePredicateOnEntries(com.google.common.base.Predicate<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformEntries(java.util.Map<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformEntries(java.util.SortedMap<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformEntries(java.util.NavigableMap<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"unmodifiableEntry(java.util.Map.Entry<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterValues(java.util.Map<K, V>, com.google.common.base.Predicate<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterValues(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterValues(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterValues(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"unmodifiableNavigableMap(java.util.NavigableMap<K, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"safeRemove(java.util.Map<?, V>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newHashMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterKeys(java.util.Map<K, V>, com.google.common.base.Predicate<? super K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterKeys(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterKeys(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newHashMap(java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"removeEntryImpl(java.util.Collection<java.util.Map.Entry<K, V>>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"valueIterator(java.util.Iterator<java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformValues(java.util.SortedMap<K, V1>, com.google.common.base.Function<? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformValues(java.util.NavigableMap<K, V1>, com.google.common.base.Function<? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"capacity(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asMapSortedIgnoreNavigable(java.util.SortedSet<K>, com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newEnumMap(java.lang.Class<K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"toMap(java.lang.Iterable<K>, com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"toMap(java.util.Iterator<K>, com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newConcurrentMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"keyOrNull(java.util.Map.Entry<K, ?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"safeContainsKey(java.util.Map<?, ?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"immutableEntry(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asEntryToEntryFunction(com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newLinkedHashMap(java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"transformEntriesIgnoreNavigable(java.util.SortedMap<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"containsValueImpl(java.util.Map<?, ?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"synchronizedNavigableMap(java.util.NavigableMap<K, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"orNaturalOrder(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asEntryTransformer(com.google.common.base.Function<? super, V2>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newHashMapWithExpectedSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"containsKeyImpl(java.util.Map<?, ?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"filterSortedIgnoreNavigable(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"asMapEntryIterator(java.util.Set<K>, com.google.common.base.Function<? super, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"putAllImpl(java.util.Map<K, V>, java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Maps",
        "method_name":"newIdentityHashMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"isEmpty()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.isEmpty()",
                    "this.size() == 0"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"putAll(K, java.lang.Iterable<? extends V>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"containsKey(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"keys()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"containsEntry(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"unmodifiableMultiset(com.google.common.collect.Multiset<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"retainAllImpl(com.google.common.collect.Multiset<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"union(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"removeAllImpl(com.google.common.collect.Multiset<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"addAllImpl(com.google.common.collect.Multiset<E>, java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"intersection(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"cast(java.lang.Iterable<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"retainOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"equalsImpl(com.google.common.collect.Multiset<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"unmodifiableMultiset(com.google.common.collect.ImmutableMultiset<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"inferDistinctElements(java.lang.Iterable<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"sizeImpl(com.google.common.collect.Multiset<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"setCountImpl(com.google.common.collect.Multiset<E>, E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"immutableEntry(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"filter(com.google.common.collect.Multiset<E>, com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"iteratorImpl(com.google.common.collect.Multiset<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"setCountImpl(com.google.common.collect.Multiset<E>, E, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"containsOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"copyHighestCountFirst(com.google.common.collect.Multiset<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"sum(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"removeOccurrences(com.google.common.collect.Multiset<?>, java.lang.Iterable<?>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"removeOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Multisets",
        "method_name":"difference(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"add(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"setCount(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"setCount(E, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"count(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"retainAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"elementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"remove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"removeAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"add(E, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            },
            {
                "condition":"true",
                "entities":[
                    "this.add(element, occurrences)",
                    "this.addAll(java.util.Collections.nCopies(occurrences, element))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"remove(java.lang.Object, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Multiset",
        "method_name":"containsAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"reverse()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"max(java.util.Iterator<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"com.google.common.collect.Ordering()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"min(java.lang.Iterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"max(E, E, E, E...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"compare(T, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"natural()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"explicit(java.util.List<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"min(java.util.Iterator<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"binarySearch(java.util.List<? extends T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"greatestOf(java.util.Iterator<E>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"lexicographical()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"from(java.util.Comparator<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"leastOf(java.util.Iterator<E>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"usingToString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"nullsFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"isStrictlyOrdered(java.lang.Iterable<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"nullsLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"isOrdered(java.lang.Iterable<? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"immutableSortedCopy(java.lang.Iterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"allEqual()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"explicit(T, T...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"min(E, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"arbitrary()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"onKeys()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"from(com.google.common.collect.Ordering<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"sortedCopy(java.lang.Iterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"onResultOf(com.google.common.base.Function<F, ? extends T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"max(E, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"greatestOf(java.lang.Iterable<E>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"leastOf(java.lang.Iterable<E>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"max(java.lang.Iterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"min(E, E, E, E...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Ordering",
        "method_name":"compound(java.util.Comparator<? super U>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"span()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"getEntry(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"asDescendingMapOfRanges()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"putAll(com.google.common.collect.RangeMap<K, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"asMapOfRanges()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"subRangeMap(com.google.common.collect.Range<K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"remove(com.google.common.collect.Range<K>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeMap",
        "method_name":"put(com.google.common.collect.Range<K>, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"asDescendingSetOfRanges()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"complement()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"remove(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"enclosesAll(com.google.common.collect.RangeSet<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"removeAll(com.google.common.collect.RangeSet<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"span()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"contains(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"rangeContaining(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"addAll(com.google.common.collect.RangeSet<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"asRanges()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"add(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"encloses(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"clear()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.clear()",
                    "this.remove(com.google.common.collect.Range.all())"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.RangeSet",
        "method_name":"subRangeSet(com.google.common.collect.Range<C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RowSortedTable",
        "method_name":"rowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.RowSortedTable",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SetMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SetMultimap",
        "method_name":"entries()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SetMultimap",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SetMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SetMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SetMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"union(java.util.Set<? extends E>, java.util.Set<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newLinkedHashSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"synchronizedNavigableSet(java.util.NavigableSet<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"intersection(java.util.Set<E>, java.util.Set<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newSetFromMap(java.util.Map<E, java.lang.Boolean>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newTreeSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newLinkedHashSetWithExpectedSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newHashSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newConcurrentHashSet(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newTreeSet(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newLinkedHashSet(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"powerSet(java.util.Set<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"removeAllImpl(java.util.Set<?>, java.util.Iterator<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newHashSet(E...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newHashSet(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newHashSet(java.util.Iterator<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"filter(java.util.Set<E>, com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"filter(java.util.SortedSet<E>, com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"filterSortedIgnoreNavigable(java.util.SortedSet<E>, com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"filter(java.util.NavigableSet<E>, com.google.common.base.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"immutableEnumSet(E, E...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newIdentityHashSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"immutableEnumSet(java.lang.Iterable<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newCopyOnWriteArraySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"removeAllImpl(java.util.Set<?>, java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"complementOf(java.util.Collection<E>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"cartesianProduct(java.util.Set<? extends B>...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"difference(java.util.Set<E>, java.util.Set<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"equalsImpl(java.util.Set<?>, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newTreeSet(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newConcurrentHashSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"hashCodeImpl(java.util.Set<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"newHashSetWithExpectedSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"complementOf(java.util.Collection<E>, java.lang.Class<E>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.Sets",
        "method_name":"unmodifiableNavigableSet(java.util.NavigableSet<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedIterable",
        "method_name":"comparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedIterable",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedLists",
        "method_name":"binarySearch(java.util.List<E>, com.google.common.base.Function<? super, K>, K, java.util.Comparator<? super K>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedLists",
        "method_name":"binarySearch(java.util.List<E>, com.google.common.base.Function<? super, K>, K, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedLists",
        "method_name":"binarySearch(java.util.List<? extends E>, E, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedLists",
        "method_name":"binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultisetBridge",
        "method_name":"elementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"headMultiset(E, com.google.common.collect.BoundType)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"tailMultiset(E, com.google.common.collect.BoundType)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"lastEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"pollFirstEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"firstEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"pollLastEntry()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"elementSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"descendingMultiset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.subMultiset(lowerBound, lowerBoundType, upperBound, upperBoundType)",
                    "this.tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound, upperBoundType)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedMultiset",
        "method_name":"comparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedSetMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedSetMultimap",
        "method_name":"valueComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedSetMultimap",
        "method_name":"replaceValues(K, java.lang.Iterable<? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedSetMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.SortedSetMultimap",
        "method_name":"removeAll(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardRowSortedTable",
        "method_name":"com.google.common.collect.StandardRowSortedTable(java.util.SortedMap<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardRowSortedTable",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardRowSortedTable",
        "method_name":"createRowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardRowSortedTable",
        "method_name":"rowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"containsColumn(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"rowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"put(R, C, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"cellSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"get(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"createRowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"createColumnKeyIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"contains(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"row(R)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"containsRow(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"columnMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"column(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"cellIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"columnKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.StandardTable",
        "method_name":"com.google.common.collect.StandardTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"cellSet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"columnMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"column(C)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"containsColumn(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"contains(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"put(R, C, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"rowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"get(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"columnKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"row(R)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"containsRow(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.Table",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"rowKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"columnComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"rowComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"row(R)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"rowMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"createColumnKeyIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"com.google.common.collect.TreeBasedTable(java.util.Comparator<? super R>, java.util.Comparator<? super C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeBasedTable",
        "method_name":"create(com.google.common.collect.TreeBasedTable<R,, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"unmodifiableCollectionSubclass(java.util.Collection<V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"keyComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"wrapCollection(K, java.util.Collection<V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"asMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"createKeySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"valueComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"com.google.common.collect.TreeMultimap(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"backingMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"get(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"createAsMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"createCollection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"createCollection(K)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultimap",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"count(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"com.google.common.collect.TreeMultiset(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"setCount(E, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"remove(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"tailMultiset(E, com.google.common.collect.BoundType)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"distinctElements()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"headMultiset(E, com.google.common.collect.BoundType)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"setCount(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"add(E, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"create(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"entryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"create(java.lang.Iterable<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"descendingEntryIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"com.google.common.collect.TreeMultiset(com.google.common.collect.TreeMultiset.Reference<com.google.common.collect.TreeMultiset.AvlNode<E>>, com.google.common.collect.GeneralRange<E>, com.google.common.collect.TreeMultiset.AvlNode<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.collect.TreeMultiset",
        "method_name":"distinctElements(com.google.common.collect.TreeMultiset.AvlNode<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putDouble(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.putDouble(d)",
                    "this.putLong(java.lang.Double.doubleToRawLongBits(d))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putObject(T, com.google.common.hash.Funnel<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putFloat(float)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.putFloat(f)",
                    "this.putInt(java.lang.Float.floatToRawIntBits(f))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putBytes(byte[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putShort(short)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putLong(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putByte(byte)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putBoolean(boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.putBoolean(b)",
                    "this.putByte(b ? (byte) 1 : (byte) 0)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putUnencodedChars(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putChar(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putBytes(byte[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putInt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"putString(java.lang.CharSequence, java.nio.charset.Charset)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.putString(charSequence, charset)",
                    "this.putBytes(charSequence.toString().getBytes(charset))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.hash.Hasher",
        "method_name":"hash()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"empty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"hash(com.google.common.hash.HashFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"com.google.common.io.ByteSource()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"copyTo(com.google.common.io.ByteSink)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"openStream()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"concat(java.lang.Iterable<? extends com.google.common.io.ByteSource>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"openBufferedStream()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"contentEquals(com.google.common.io.ByteSource)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"read()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"wrap(byte[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"asCharSource(java.nio.charset.Charset)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"sizeIfKnown()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"copyTo(java.io.OutputStream)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"concat(java.util.Iterator<? extends com.google.common.io.ByteSource>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"concat(com.google.common.io.ByteSource...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"read(com.google.common.io.ByteProcessor<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.ByteSource",
        "method_name":"slice(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSink",
        "method_name":"write(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSink",
        "method_name":"openStream()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSink",
        "method_name":"writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSink",
        "method_name":"com.google.common.io.CharSink()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSink",
        "method_name":"openBufferedStream()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSink",
        "method_name":"writeLines(java.lang.Iterable<? extends java.lang.CharSequence>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.writeLines(lines)",
                    "this.writeLines(lines, java.lang.System.getProperty(\"line.separator\"))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.io.CharSink",
        "method_name":"writeFrom(java.lang.Readable)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"copyTo(java.lang.Appendable)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"openStream()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"readLines()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"readFirstLine()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"length()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"empty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"concat(java.lang.Iterable<? extends com.google.common.io.CharSource>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"wrap(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"read()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"com.google.common.io.CharSource()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"lengthIfKnown()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"concat(java.util.Iterator<? extends com.google.common.io.CharSource>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"concat(com.google.common.io.CharSource...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"openBufferedStream()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"copyTo(com.google.common.io.CharSink)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.CharSource",
        "method_name":"readLines(com.google.common.io.LineProcessor<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.Flushables",
        "method_name":"flush(java.io.Flushable, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.io.Flushables",
        "method_name":"flushQuietly(java.io.Flushable)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.io.Flushables.flush(flushable, true)",
                    "this.flushQuietly(flushable)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"mean(double...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"log2(double, java.math.RoundingMode)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"roundToLong(double, java.math.RoundingMode)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"mean(int...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"roundToBigInteger(double, java.math.RoundingMode)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"mean(long...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"fuzzyEquals(double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.math.DoubleMath.fuzzyEquals(a, b, tolerance)",
                    "java.lang.Math.abs(a - b) <= tolerance || java.lang.Double.valueOf(a).equals(java.lang.Double.valueOf(b))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"roundToInt(double, java.math.RoundingMode)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"fuzzyCompare(double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.math.DoubleMath.fuzzyCompare(a, b, tolerance)",
                    "com.google.common.math.DoubleMath.fuzzyEquals(a, b, tolerance) ? 0 : java.lang.Double.compare(a, b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"isPowerOfTwo(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"mean(java.lang.Iterable<? extends java.lang.Number>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"mean(java.util.Iterator<? extends java.lang.Number>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"roundIntermediate(double, java.math.RoundingMode)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"log2(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"isMathematicalInteger(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.math.DoubleMath.isMathematicalInteger(x)",
                    "!java.lang.Double.isNaN(x) && !java.lang.Double.isInfinite(x) && x == java.lang.Math.rint(x)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.math.DoubleMath",
        "method_name":"factorial(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"topPrivateDomain()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"hasParent()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"child(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"isTopPrivateDomain()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"isUnderPublicSuffix()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"parent()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"publicSuffix()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"isValid(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"parts()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"hasPublicSuffix()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"from(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"isPublicSuffix()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.net.InternetDomainName",
        "method_name":"com.google.common.net.InternetDomainName(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"toArray(java.util.Collection<java.lang.Boolean>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"countTrue(boolean...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"join(java.lang.String, boolean...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"compare(boolean, boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.signum(com.google.common.primitives.Booleans.compare(a, b))",
                    "java.lang.Math.signum(((Boolean) a).compareTo(b))"
                ]
            },
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Booleans.compare(a, b)",
                    "java.lang.Boolean.compare(a, b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"lexicographicalComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"indexOf(boolean[], boolean[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"ensureCapacity(boolean[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"concat(boolean[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"asList(boolean...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Booleans.asList(backingArray)",
                    "java.util.Arrays.asList(backingArray)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"hashCode(boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Booleans.hashCode(value)",
                    "((Boolean) value).hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"lastIndexOf(boolean[], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"contains(boolean[], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Booleans",
        "method_name":"indexOf(boolean[], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"checkedCast(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"min(char...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"fromBytes(byte, byte)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Chars.fromBytes(b1, b2)",
                    "com.google.common.primitives.Chars.fromByteArray(new byte[] { b1, b2 })"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"compare(char, char)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Chars.compare(a, b)",
                    "((Character) a).compareTo(b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"join(java.lang.String, char...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"toArray(java.util.Collection<java.lang.Character>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"indexOf(char[], char[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"asList(char...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Chars.asList(backingArray)",
                    "java.util.Arrays.asList(backingArray)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"saturatedCast(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"concat(char[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"ensureCapacity(char[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"contains(char[], char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"fromByteArray(byte[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Chars.fromByteArray(bytes)",
                    "java.nio.ByteBuffer.wrap(bytes).getChar()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"lexicographicalComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"toByteArray(char)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Chars.toByteArray(value)",
                    "java.nio.ByteBuffer.allocate(2).putChar(value).array()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"hashCode(char)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Chars.hashCode(value)",
                    "((Character) value).hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"lastIndexOf(char[], char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"max(char...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Chars",
        "method_name":"indexOf(char[], char)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"tryParse(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"max(double...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"compare(double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.signum(com.google.common.primitives.Doubles.compare(a, b))",
                    "java.lang.Math.signum(((Double) a).compareTo(b))"
                ]
            },
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Doubles.compare(a, b)",
                    "java.lang.Double.compare(a, b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"join(java.lang.String, double...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"indexOf(double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"concat(double[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"lexicographicalComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"stringConverter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"toArray(java.util.Collection<? extends java.lang.Number>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"min(double...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"asList(double...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Doubles.asList(backingArray)",
                    "java.util.Arrays.asList(backingArray)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"lastIndexOf(double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"ensureCapacity(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"indexOf(double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"isFinite(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Doubles.isFinite(value)",
                    "!(java.lang.Double.isInfinite(value) || java.lang.Double.isNaN(value))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"hashCode(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Doubles.hashCode(value)",
                    "((Double) value).hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Doubles",
        "method_name":"contains(double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"ensureCapacity(float[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"asList(float...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Floats.asList(backingArray)",
                    "java.util.Arrays.asList(backingArray)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"indexOf(float[], float)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"concat(float[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"toArray(java.util.Collection<? extends java.lang.Number>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"stringConverter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"hashCode(float)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Floats.hashCode(value)",
                    "((Float) value).hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"lexicographicalComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"max(float...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"lastIndexOf(float[], float)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"join(java.lang.String, float...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"contains(float[], float)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"indexOf(float[], float[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"isFinite(float)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Floats.isFinite(value)",
                    "!(java.lang.Float.isInfinite(value) || java.lang.Float.isNaN(value))"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"tryParse(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"compare(float, float)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.signum(com.google.common.primitives.Floats.compare(a, b))",
                    "java.lang.Math.signum(((Float) a).compareTo(b))"
                ]
            },
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Floats.compare(a, b)",
                    "java.lang.Float.compare(a, b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Floats",
        "method_name":"min(float...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"min(int...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"indexOf(int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"concat(int[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"toByteArray(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Ints.toByteArray(value)",
                    "java.nio.ByteBuffer.allocate(4).putInt(value).array()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"ensureCapacity(int[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"toArray(java.util.Collection<? extends java.lang.Number>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"fromBytes(byte, byte, byte, byte)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Ints.fromBytes(b1, b2, b3, b4)",
                    "com.google.common.primitives.Ints.fromByteArray(new byte[] { b1, b2, b3, b4 })"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"hashCode(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Ints.hashCode(value)",
                    "((Integer) value).hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"compare(int, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.signum(com.google.common.primitives.Ints.compare(a, b))",
                    "java.lang.Math.signum(((Integer) a).compareTo(b))"
                ]
            },
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Ints.compare(a, b)",
                    "java.lang.Integer.compare(a, b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"max(int...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"join(java.lang.String, int...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"stringConverter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"lexicographicalComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"asList(int...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Ints.asList(backingArray)",
                    "java.util.Arrays.asList(backingArray)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"saturatedCast(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"indexOf(int[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"tryParse(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"lastIndexOf(int[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"fromByteArray(byte[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Ints.fromByteArray(bytes)",
                    "java.nio.ByteBuffer.wrap(bytes).getInt()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"tryParse(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"contains(int[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Ints",
        "method_name":"checkedCast(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"indexOf(long[], long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"tryParse(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"asList(long...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Longs.asList(backingArray)",
                    "java.util.Arrays.asList(backingArray)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"tryParse(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"lastIndexOf(long[], long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"indexOf(long[], long[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"fromByteArray(byte[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Longs.fromByteArray(bytes)",
                    "java.nio.ByteBuffer.wrap(bytes).getLong()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"max(long...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"concat(long[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"ensureCapacity(long[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"compare(long, long)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.signum(com.google.common.primitives.Longs.compare(a, b))",
                    "java.lang.Math.signum(((Long) a).compareTo(b))"
                ]
            },
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Longs.compare(a, b)",
                    "java.lang.Long.compare(a, b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"min(long...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"stringConverter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"contains(long[], long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"toByteArray(long)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Longs.toByteArray(value)",
                    "java.nio.ByteBuffer.allocate(8).putLong(value).array()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Longs.fromBytes(b1, b2, b3, b4, b5, b6, b7, b8)",
                    "com.google.common.primitives.Longs.fromByteArray(new byte[] { b1, b2, b3, b4, b5, b6, b7, b8 })"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"hashCode(long)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Longs.hashCode(value)",
                    "((Long) value).hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"lexicographicalComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"join(java.lang.String, long...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Longs",
        "method_name":"toArray(java.util.Collection<? extends java.lang.Number>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"indexOf(short[], short)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"fromByteArray(byte[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Shorts.fromByteArray(bytes)",
                    "java.nio.ByteBuffer.wrap(bytes).getShort()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"join(java.lang.String, short...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"lexicographicalComparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"indexOf(short[], short[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"max(short...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"compare(short, short)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Shorts.compare(a, b)",
                    "((Short) a).compareTo(b)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"checkedCast(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"toArray(java.util.Collection<? extends java.lang.Number>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"ensureCapacity(short[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"hashCode(short)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Shorts.hashCode(value)",
                    "((Short) value).hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"saturatedCast(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"concat(short[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"contains(short[], short)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"stringConverter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"lastIndexOf(short[], short)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"fromBytes(byte, byte)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Shorts.fromBytes(b1, b2)",
                    "com.google.common.primitives.Shorts.fromByteArray(new byte[] { b1, b2 })"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"asList(short...)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Shorts.asList(backingArray)",
                    "java.util.Arrays.asList(backingArray)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"toByteArray(short)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.common.primitives.Shorts.toByteArray(value)",
                    "java.nio.ByteBuffer.allocate(2).putShort(value).array()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.primitives.Shorts",
        "method_name":"min(short...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.reflect.TypeToInstanceMap",
        "method_name":"putInstance(com.google.common.reflect.TypeToken<T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.reflect.TypeToInstanceMap",
        "method_name":"putInstance(java.lang.Class<T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.reflect.TypeToInstanceMap",
        "method_name":"getInstance(java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.reflect.TypeToInstanceMap",
        "method_name":"getInstance(com.google.common.reflect.TypeToken<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.CycleDetectingLockFactory",
        "method_name":"newReentrantReadWriteLock(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.newReentrantReadWriteLock(lockName)",
                    "this.newReentrantReadWriteLock(lockName, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.CycleDetectingLockFactory",
        "method_name":"newInstanceWithExplicitOrdering(java.lang.Class<E>, com.google.common.util.concurrent.CycleDetectingLockFactory.Policy)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.CycleDetectingLockFactory",
        "method_name":"createNodes(java.lang.Class<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.CycleDetectingLockFactory",
        "method_name":"newReentrantLock(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.newReentrantLock(lockName)",
                    "this.newReentrantLock(lockName, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.CycleDetectingLockFactory",
        "method_name":"newReentrantReadWriteLock(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.CycleDetectingLockFactory",
        "method_name":"newReentrantLock(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.CycleDetectingLockFactory",
        "method_name":"newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory.Policy)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.JdkFutureAdapters",
        "method_name":"listenInPoolThread(java.util.concurrent.Future<V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.JdkFutureAdapters",
        "method_name":"listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterInterruptibly(long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"waitFor(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"hasQueuedThreads()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"hasQueuedThread(java.lang.Thread)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"leave()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"com.google.common.util.concurrent.Monitor(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterWhen(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"isFair()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"getWaitQueueLength(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"tryEnter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"waitFor(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"tryEnterIf(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterIf(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterIfInterruptibly(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"com.google.common.util.concurrent.Monitor()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterInterruptibly()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"getOccupiedDepth()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"waitForUninterruptibly(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enter(long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"waitForUninterruptibly(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enter()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterIfInterruptibly(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"hasWaiters(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterIf(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"isOccupiedByCurrentThread()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"enterWhen(com.google.common.util.concurrent.Monitor.Guard)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"getQueueLength()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.Monitor",
        "method_name":"isOccupied()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"renamingDecorator(java.util.concurrent.ExecutorService, com.google.common.base.Supplier<java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"renamingDecorator(java.util.concurrent.ScheduledExecutorService, com.google.common.base.Supplier<java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService, java.util.Collection<? extends java.util.concurrent.Callable<T>>, boolean, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"directExecutor()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"listeningDecorator(java.util.concurrent.ExecutorService)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"listeningDecorator(java.util.concurrent.ScheduledExecutorService)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"renamingDecorator(java.util.concurrent.Executor, com.google.common.base.Supplier<java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"newDirectExecutorService()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"sameThreadExecutor()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"newThread(java.lang.String, java.lang.Runnable)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"platformThreadFactory()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.MoreExecutors",
        "method_name":"getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"acquire()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.acquire()",
                    "this.acquire(1)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"tryAcquire(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"tryAcquire()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.tryAcquire()",
                    "this.tryAcquire(1)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"reserveAndGetWaitLength(int, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"getRate()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"tryAcquire(long, java.util.concurrent.TimeUnit)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.tryAcquire(timeout, unit)",
                    "this.tryAcquire(1, timeout, unit)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter.SleepingStopwatch)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"tryAcquire(int, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"queryEarliestAvailable(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"doSetRate(double, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"doGetRate()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"acquire(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"reserveEarliestAvailable(int, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"create(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"reserve(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"create(double, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"create(com.google.common.util.concurrent.RateLimiter.SleepingStopwatch, double, long, java.util.concurrent.TimeUnit, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"setRate(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.common.util.concurrent.RateLimiter",
        "method_name":"create(com.google.common.util.concurrent.RateLimiter.SleepingStopwatch, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"cancel()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"run(int, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.run(duration, startTime)",
                    "this.run(duration, startTime, null)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"interpolate(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"com.google.gwt.animation.client.Animation(com.google.gwt.animation.client.AnimationScheduler)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"run(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.run(duration)",
                    "this.run(duration, null)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"run(int, com.google.gwt.dom.client.Element)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"run(int, double, com.google.gwt.dom.client.Element)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"onStart()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"onComplete()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"com.google.gwt.animation.client.Animation()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"onCancel()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.animation.client.Animation",
        "method_name":"onUpdate(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.impl.WeakMapping",
        "method_name":"get(java.lang.Object, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.impl.WeakMapping",
        "method_name":"set(java.lang.Object, java.lang.String, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.impl.WeakMapping",
        "method_name":"setWeak(java.lang.Object, java.lang.String, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"toDateString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"toLocaleDateString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"toLocaleTimeString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getTimezoneOffset()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setTime(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setYear(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.setYear(year)",
                    "this.setFullYear(year)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCHours()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"UTC(int, int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getMilliseconds()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(int, int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setHours(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCMilliseconds()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getYear()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getYear()",
                    "this.getFullYear()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setHours(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getHours()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setDate(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setMinutes(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setMinutes(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getDate()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCHours(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCHours(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setFullYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setSeconds(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getFullYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setFullYear(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getMinutes()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setSeconds(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setFullYear(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCMinutes(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCDay()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCSeconds(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getDay()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCSeconds()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"com.google.gwt.core.client.JsDate()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"parse(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCFullYear(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"toLocaleString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCFullYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCMinutes(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getSeconds()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCDate()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"valueOf()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.valueOf()",
                    "this.getTime()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCDate(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCFullYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"toTimeString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setMonth(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"toUTCString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCMonth(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setHours(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCHours(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCHours(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"toGMTString()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.toGMTString()",
                    "this.toUTCString()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCFullYear(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"create(int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setHours(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setMinutes(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCMinutes(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"setUTCSeconds(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.core.client.JsDate",
        "method_name":"getUTCMinutes()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"addTo(com.google.gwt.i18n.client.AutoDirectionHandler.Target)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.gwt.i18n.client.AutoDirectionHandler.addTo(target)",
                    "this.addTo(target, new com.google.gwt.i18n.shared.WordCountDirectionEstimator())"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"setDirectionEstimator(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"addTo(com.google.gwt.i18n.client.AutoDirectionHandler.Target, boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"getDirectionEstimator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"addTo(com.google.gwt.i18n.client.AutoDirectionHandler.Target, com.google.gwt.i18n.shared.DirectionEstimator)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"setDirectionEstimator(com.google.gwt.i18n.shared.DirectionEstimator)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.AutoDirectionHandler",
        "method_name":"refreshDirection()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"getCurrencyCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"isSymbolPositionFixed()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"getDefaultFractionDigits()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"getPortableCurrencySymbol()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"isSymbolPrefix()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"isSpacingFixed()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"getSimpleCurrencySymbol()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"getCurrencySymbol()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"isDeprecated()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.client.CurrencyData",
        "method_name":"isSpaceForced()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getMatchLocale()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getRequiredString(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"setPath(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getPath()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getString(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getExtendedKey(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getStringExt(java.lang.String, java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getExtensions(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"com.google.gwt.i18n.rebind.AbstractResource(com.google.gwt.i18n.shared.GwtLocale)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getRequiredStringExt(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"notEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"getEntry(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"toVerboseString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.rebind.AbstractResource",
        "method_name":"addToKeySet(java.util.Set<java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"unicodeWrapWithKnownDirBase(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"estimateDirection(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"dirAttrBase(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"knownDirAttrBase(com.google.gwt.i18n.client.HasDirection.Direction)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"spanWrapBase(java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"com.google.gwt.i18n.shared.BidiFormatterBase(com.google.gwt.i18n.client.HasDirection.Direction, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"spanWrapWithKnownDirBase(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"unicodeWrapBase(java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"getContextDir()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"isRtlContext()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"getAlwaysSpan()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"startEdgeBase()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"markBase()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"endEdgeBase()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"markAfterBase(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatterBase",
        "method_name":"estimateDirection(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.estimateDirection(str)",
                    "this.estimateDirection(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"spanWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.spanWrapWithKnownDir(dir, str)",
                    "this.spanWrapWithKnownDir(dir, str, false, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"getInstance(com.google.gwt.i18n.client.HasDirection.Direction)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"getInstance(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"mark()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"markAfter(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.markAfter(str)",
                    "this.markAfter(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"spanWrap(java.lang.String, boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.spanWrap(str, isHtml)",
                    "this.spanWrap(str, isHtml, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"knownDirAttr(com.google.gwt.i18n.client.HasDirection.Direction)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"endEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"getInstanceForCurrentLocale(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"unicodeWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.unicodeWrapWithKnownDir(dir, str, isHtml)",
                    "this.unicodeWrapWithKnownDir(dir, str, isHtml, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"unicodeWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.unicodeWrapWithKnownDir(dir, str)",
                    "this.unicodeWrapWithKnownDir(dir, str, false, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"getInstance(com.google.gwt.i18n.client.HasDirection.Direction, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"spanWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.spanWrapWithKnownDir(dir, str, isHtml)",
                    "this.spanWrapWithKnownDir(dir, str, isHtml, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"startEdge()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"dirAttr(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.dirAttr(str)",
                    "this.dirAttr(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"getInstanceForCurrentLocale()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"spanWrap(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.spanWrap(str)",
                    "this.spanWrap(str, false, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"unicodeWrap(java.lang.String, boolean)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.unicodeWrap(str, isHtml)",
                    "this.unicodeWrap(str, isHtml, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"spanWrap(java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"unicodeWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"dirAttr(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"unicodeWrap(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.unicodeWrap(str)",
                    "this.unicodeWrap(str, false, true)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"markAfter(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"spanWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"getInstance(boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiFormatter",
        "method_name":"unicodeWrap(java.lang.String, boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"estimateDirection(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"startsWithRtl(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.startsWithRtl(str)",
                    "this.startsWithRtl(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"endsWithLtr(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"endsWithRtl(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"startsWithLtr(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.startsWithLtr(str)",
                    "this.startsWithLtr(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"estimateDirection(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.estimateDirection(str)",
                    "this.estimateDirection(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"get()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"endsWithRtl(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.endsWithRtl(str)",
                    "this.endsWithRtl(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"startsWithLtr(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"startsWithRtl(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"stripHtmlIfNeeded(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"hasAnyLtr(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"endsWithLtr(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.endsWithLtr(str)",
                    "this.endsWithLtr(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"hasAnyRtl(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.hasAnyRtl(str)",
                    "this.hasAnyRtl(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"hasAnyLtr(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.hasAnyLtr(str)",
                    "this.hasAnyLtr(str, false)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.i18n.shared.BidiUtils",
        "method_name":"hasAnyRtl(java.lang.String, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"getGlobal()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"compile(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"split(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"exec(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"split(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"getIgnoreCase()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"setLastIndex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"getLastIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"replace(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"getMultiline()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"getSource()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"test(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.test(input)",
                    "this.exec(input) != null"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.regexp.shared.RegExp",
        "method_name":"compile(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.safecss.shared.SafeStyles",
        "method_name":"asString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.safecss.shared.SafeStyles",
        "method_name":"hashCode()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.hashCode()",
                    "this.asString().hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.safecss.shared.SafeStyles",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.safehtml.shared.SafeHtml",
        "method_name":"hashCode()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.hashCode()",
                    "this.asString().hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.safehtml.shared.SafeHtml",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.safehtml.shared.SafeHtml",
        "method_name":"asString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.safehtml.shared.SafeUri",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.safehtml.shared.SafeUri",
        "method_name":"hashCode()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.hashCode()",
                    "this.asString().hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.safehtml.shared.SafeUri",
        "method_name":"asString()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getVisibleItemCount()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"insertItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.insertItem(item, dir, index)",
                    "this.insertItem(item, dir, item, index)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"insertItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"isMultipleSelect()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getItemText(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"com.google.gwt.user.client.ui.ListBox(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"addItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setItemSelected(int, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setName(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setValue(int, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setDirectionEstimator(com.google.gwt.i18n.shared.DirectionEstimator)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getValue(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"removeItem(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setOptionText(com.google.gwt.dom.client.OptionElement, java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setItemText(int, java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"insertItem(java.lang.String, java.lang.String, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.insertItem(item, value, index)",
                    "this.insertItem(item, null, value, index)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setVisibleItemCount(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"isItemSelected(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setItemText(int, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"addItem(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.addItem(item)",
                    "this.addItem(item, item)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"wrap(com.google.gwt.dom.client.Element)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"addChangeListener(com.google.gwt.user.client.ui.ChangeListener)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getItemCount()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setSelectedIndex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"addChangeHandler(com.google.gwt.event.dom.client.ChangeHandler)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"com.google.gwt.user.client.ui.ListBox()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"insertItem(java.lang.String, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.insertItem(item, index)",
                    "this.insertItem(item, item, index)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getDirectionEstimator()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getName()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setMultipleSelect(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"com.google.gwt.user.client.ui.ListBox(com.google.gwt.dom.client.Element)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"addItem(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getSelectedIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"addItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.addItem(item, dir)",
                    "this.addItem(item, dir, item)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"onEnsureDebugId(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"removeChangeListener(com.google.gwt.user.client.ui.ChangeListener)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"getOptionText(com.google.gwt.dom.client.OptionElement)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.client.ui.ListBox",
        "method_name":"setDirectionEstimator(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"encodeResponseForSuccess(java.lang.reflect.Method, java.lang.Object, com.google.gwt.user.server.rpc.SerializationPolicy)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"decodeRequest(java.lang.String)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.gwt.user.server.rpc.RPC.decodeRequest(encodedRequest)",
                    "this.decodeRequest(encodedRequest, null)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"decodeRequest(java.lang.String, java.lang.Class<?>, com.google.gwt.user.server.rpc.SerializationPolicyProvider)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.gwt.user.server.rpc.RPC.decodeRequest(encodedRequest, null)",
                    "com.google.gwt.user.server.rpc.RPC.decodeRequest(encodedRequest)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"encodeResponseForSuccess(java.lang.reflect.Method, java.lang.Object, com.google.gwt.user.server.rpc.SerializationPolicy, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"decodeRequest(java.lang.String, java.lang.Class<?>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.gwt.user.server.rpc.RPC.decodeRequest(encodedRequest, null)",
                    "com.google.gwt.user.server.rpc.RPC.decodeRequest(encodedRequest)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"invokeAndEncodeResponse(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"getDefaultSerializationPolicy()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"encodeResponseForFailure(java.lang.reflect.Method, java.lang.Throwable)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"encodeResponseForFailure(java.lang.reflect.Method, java.lang.Throwable, com.google.gwt.user.server.rpc.SerializationPolicy, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"invokeAndEncodeResponse(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], com.google.gwt.user.server.rpc.SerializationPolicy)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"encodeResponseForSuccess(java.lang.reflect.Method, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"invokeAndEncodeResponse(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], com.google.gwt.user.server.rpc.SerializationPolicy, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.gwt.user.server.rpc.RPC",
        "method_name":"encodeResponseForFailure(java.lang.reflect.Method, java.lang.Throwable, com.google.gwt.user.server.rpc.SerializationPolicy)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.autobean.vm.impl.TypeUtils",
        "method_name":"getDefaultPrimitiveValue(java.lang.Class<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.autobean.vm.impl.TypeUtils",
        "method_name":"ensureBaseType(java.lang.reflect.Type)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "com.google.web.bindery.autobean.vm.impl.TypeUtils.ensureBaseType(type)",
                    "ModelUtils.ensureBaseType(type)"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.web.bindery.autobean.vm.impl.TypeUtils",
        "method_name":"getSingleParameterization(java.lang.Class<?>, java.lang.reflect.Type...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.autobean.vm.impl.TypeUtils",
        "method_name":"maybeAutobox(java.lang.Class<V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.autobean.vm.impl.TypeUtils",
        "method_name":"isValueType(java.lang.Class<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.autobean.vm.impl.TypeUtils",
        "method_name":"getParameterization(java.lang.Class<?>, java.lang.reflect.Type...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.Request",
        "method_name":"fire(com.google.web.bindery.requestfactory.shared.Receiver<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.Request",
        "method_name":"to(com.google.web.bindery.requestfactory.shared.Receiver<? super T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.Request",
        "method_name":"fire()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.Request",
        "method_name":"with(java.lang.String...)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.Request",
        "method_name":"getRequestContext()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"getProxyClass(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"getSerializer(com.google.web.bindery.requestfactory.shared.ProxyStore)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"getHistoryToken(com.google.web.bindery.requestfactory.shared.EntityProxyId<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"getProxyId(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"initialize(com.google.web.bindery.event.shared.EventBus)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.initialize(eventBus)",
                    "this.initialize(eventBus, new FakeRequestTransport())"
                ]
            }
        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"find(com.google.web.bindery.requestfactory.shared.EntityProxyId<P>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"getHistoryToken(java.lang.Class<? extends com.google.web.bindery.requestfactory.shared.EntityProxy>)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"getEventBus()",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"initialize(com.google.web.bindery.event.shared.EventBus, com.google.web.bindery.requestfactory.shared.RequestTransport)",
        "oracles":[

        ]
    },
    {
        "class_name":"com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory",
        "method_name":"getRequestTransport()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader(javax.xml.stream.XMLEventReader)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader(javax.xml.stream.XMLEventReader, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"getBuffer()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"internalNextEvent()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"hasNext()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"peek()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"mark()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"mark(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"reset()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"close()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"bufferSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader",
        "method_name":"remove()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"org.hibernate.criterion.Example(java.lang.Object, org.hibernate.criterion.Example.PropertySelector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"create(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"setEscapeCharacter(java.lang.Character)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"enableLike()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"enableLike(org.hibernate.criterion.MatchMode)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"ignoreCase()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"setPropertySelector(org.hibernate.criterion.Example.PropertySelector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"excludeZeroes()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"excludeNone()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"excludeProperty(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"toSqlString(org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"getTypedValues(org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"addPropertyTypedValue(java.lang.Object, org.hibernate.type.Type, java.util.List<org.hibernate.engine.spi.TypedValue>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"addComponentTypedValues(java.lang.String, java.lang.Object, org.hibernate.type.CompositeType, java.util.List<org.hibernate.engine.spi.TypedValue>, org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"appendPropertyCondition(java.lang.String, java.lang.Object, org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery, java.lang.StringBuilder)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"appendComponentCondition(java.lang.String, java.lang.Object, org.hibernate.type.CompositeType, org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery, java.lang.StringBuilder)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.criterion.Example",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"supportsLimit()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"useMaxForLimit()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"supportsLimitOffset()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"supportsVariableLimit()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"convertToFirstRowValue(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"processSql(java.lang.String, org.hibernate.engine.spi.RowSelection)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"bindLimitParametersAtStartOfQuery(org.hibernate.engine.spi.RowSelection, java.sql.PreparedStatement, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"bindLimitParametersAtEndOfQuery(org.hibernate.engine.spi.RowSelection, java.sql.PreparedStatement, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"fillAliasInSelectClause(java.lang.StringBuilder, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"encloseWithOuterQuery(java.lang.StringBuilder, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.dialect.pagination.SQLServer2005LimitHandler",
        "method_name":"addTopExpression(java.lang.StringBuilder, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider",
        "method_name":"getAnyConnection()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider",
        "method_name":"releaseAnyConnection(java.sql.Connection)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider",
        "method_name":"getConnection(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider",
        "method_name":"releaseConnection(java.lang.String, java.sql.Connection)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider",
        "method_name":"supportsAggressiveRelease()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.spi.ResultSetReturn",
        "method_name":"extract(java.sql.PreparedStatement)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.spi.ResultSetReturn",
        "method_name":"extract(java.sql.CallableStatement)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.spi.ResultSetReturn",
        "method_name":"extract(java.sql.Statement, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.spi.ResultSetReturn",
        "method_name":"execute(java.sql.PreparedStatement)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.spi.ResultSetReturn",
        "method_name":"execute(java.sql.Statement, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.spi.ResultSetReturn",
        "method_name":"executeUpdate(java.sql.PreparedStatement)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.jdbc.spi.ResultSetReturn",
        "method_name":"executeUpdate(java.sql.Statement, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"org.hibernate.engine.spi.SubselectFetch(java.lang.String, org.hibernate.persister.entity.Loadable, org.hibernate.engine.spi.QueryParameters, java.util.Set, java.util.Map)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"org.hibernate.engine.spi.SubselectFetch(java.lang.String, java.lang.String, org.hibernate.persister.entity.Loadable, org.hibernate.engine.spi.QueryParameters, java.util.Set, java.util.Map)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"createSubselectFetchQueryFragment(org.hibernate.engine.spi.QueryParameters)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"getQueryParameters()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"getResult()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"toSubselectString(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.engine.spi.SubselectFetch",
        "method_name":"getNamedParameterLocMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int, int, org.hibernate.internal.util.collections.BoundedConcurrentHashMap.Eviction, org.hibernate.internal.util.collections.BoundedConcurrentHashMap.EvictionListener<K, V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int, int, org.hibernate.internal.util.collections.BoundedConcurrentHashMap.Eviction)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"segmentFor(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"get(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"containsKey(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"contains(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.contains(value)",
                    "this.containsValue(value)"
                ]
            }
        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"putIfAbsent(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"putAll(java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"remove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"replace(K, V, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"replace(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"keys()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.BoundedConcurrentHashMap",
        "method_name":"elements()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, float, int, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType, java.util.EnumSet<org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.Option>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, float, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"segmentFor(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"get(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"containsKey(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"containsValue(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"contains(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.contains(value)",
                    "this.containsValue(value)"
                ]
            }
        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"put(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"putIfAbsent(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"putAll(java.util.Map<? extends K, ? extends V>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"remove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"remove(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"replace(K, V, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"replace(K, V)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"purgeStaleEntries()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"keySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"values()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"entrySet()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"keys()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
        "method_name":"elements()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader(javax.xml.stream.XMLEventReader)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader(javax.xml.stream.XMLEventReader, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"getBuffer()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"internalNextEvent()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"hasNext()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"peek()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"mark()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.mark()",
                    "this.mark(-1)"
                ]
            }
        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"mark(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"reset()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"close()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"bufferSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.internal.util.xml.BufferedXMLEventReader",
        "method_name":"remove()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.loader.plan.exec.spi.EntityReferenceAliases",
        "method_name":"getTableAlias()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.loader.plan.exec.spi.EntityReferenceAliases",
        "method_name":"getColumnAliases()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.loader.plan.spi.BidirectionalEntityReference",
        "method_name":"getTargetEntityReference()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.loader.plan.spi.BidirectionalEntityReference",
        "method_name":"getQuerySpaceUid()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getQuerySpaceUid()",
                    "this.getTargetEntityReference()"
                ]
            }
        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"hasRegisteredResources()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"releaseResources()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"register(java.sql.Statement, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"release(java.sql.Statement)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"register(java.sql.ResultSet, java.sql.Statement)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"release(java.sql.ResultSet, java.sql.Statement)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"register(java.sql.Blob)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"release(java.sql.Blob)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"register(java.sql.Clob)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"release(java.sql.Clob)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"register(java.sql.NClob)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"release(java.sql.NClob)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.resource.jdbc.ResourceRegistry",
        "method_name":"cancelLastQuery()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"basic(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"basic(java.lang.Class)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"heuristicType(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"entity(java.lang.Class)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"entity(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"custom(java.lang.Class)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"custom(java.lang.Class, java.util.Properties)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.hibernate.TypeHelper",
        "method_name":"any(org.hibernate.type.Type, org.hibernate.type.Type)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"java.awt.geom.AffineTransform()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"java.awt.geom.AffineTransform(java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"java.awt.geom.AffineTransform(float, float, float, float, float, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"java.awt.geom.AffineTransform(float[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"java.awt.geom.AffineTransform(double, double, double, double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"java.awt.geom.AffineTransform(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getTranslateInstance(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getRotateInstance(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getRotateInstance(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getRotateInstance(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getRotateInstance(double, double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.awt.geom.AffineTransform.getRotateInstance(vecx, vecy, anchorx, anchory)",
                    "java.awt.geom.AffineTransform.getRotateInstance(java.lang.Math.atan2(vecy, vecx), anchorx, anchory)"
                ]
            }
        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getQuadrantRotateInstance(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getQuadrantRotateInstance(int, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getScaleInstance(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getShearInstance(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getType()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getDeterminant()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"updateState()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getMatrix(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getScaleX()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getScaleY()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getShearX()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getShearY()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getTranslateX()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"getTranslateY()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"translate(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"rotate(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"rotate(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"rotate(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"rotate(double, double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.rotate(vecx, vecy, anchorx, anchory)",
                    "this.rotate(java.lang.Math.atan2(vecy, vecx), anchorx, anchory)"
                ]
            }
        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"quadrantRotate(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"quadrantRotate(int, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"scale(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"shear(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToIdentity()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToTranslation(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToRotation(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToRotation(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToRotation(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToRotation(double, double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.setToRotation(vecx, vecy, anchorx, anchory)",
                    "this.setToTranslation(java.lang.Math.atan2(vecy, vecx), anchorx, anchory)"
                ]
            }
        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToQuadrantRotation(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToQuadrantRotation(int, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToScale(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setToShear(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setTransform(java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"setTransform(double, double, double, double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"concatenate(java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"preConcatenate(java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"createInverse()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"invert()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"transform(java.awt.geom.Point2D, java.awt.geom.Point2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"transform(java.awt.geom.Point2D[], int, java.awt.geom.Point2D[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"transform(float[], int, float[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"transform(double[], int, double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"transform(float[], int, double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"transform(double[], int, float[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"inverseTransform(java.awt.geom.Point2D, java.awt.geom.Point2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"inverseTransform(double[], int, double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"deltaTransform(java.awt.geom.Point2D, java.awt.geom.Point2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"deltaTransform(double[], int, double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"createTransformedShape(java.awt.Shape)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"isIdentity()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.geom.AffineTransform",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"java.awt.Graphics2D()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"draw3DRect(int, int, int, int, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"fill3DRect(int, int, int, int, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"draw(java.awt.Shape)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawString(java.lang.String, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawString(java.lang.String, float, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawString(java.text.AttributedCharacterIterator, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawString(java.text.AttributedCharacterIterator, float, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"drawGlyphVector(java.awt.font.GlyphVector, float, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"fill(java.awt.Shape)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"hit(java.awt.Rectangle, java.awt.Shape, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getDeviceConfiguration()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"setComposite(java.awt.Composite)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"setPaint(java.awt.Paint)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"setStroke(java.awt.Stroke)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"setRenderingHint(java.awt.RenderingHints.Key, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getRenderingHint(java.awt.RenderingHints.Key)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"setRenderingHints(java.util.Map<?, ?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"addRenderingHints(java.util.Map<?, ?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getRenderingHints()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"translate(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"translate(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"rotate(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"rotate(double, double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.rotate(theta, x, y)",
                    "this.translate(x, y)"
                ]
            }
        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"scale(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"shear(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"transform(java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"setTransform(java.awt.geom.AffineTransform)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getTransform()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getPaint()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getComposite()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"setBackground(java.awt.Color)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getBackground()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getStroke()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"clip(java.awt.Shape)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Graphics2D",
        "method_name":"getFontRenderContext()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"getSnapshot()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"getWidth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"getHeight()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"getSource()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getSource()",
                    "this.getSnapshot().getSource()"
                ]
            }
        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"getGraphics()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"createGraphics()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"validate(java.awt.GraphicsConfiguration)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"contentsLost()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"getCapabilities()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.VolatileImage",
        "method_name":"getTransparency()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"addTileObserver(java.awt.image.TileObserver)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"removeTileObserver(java.awt.image.TileObserver)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"getWritableTile(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"releaseWritableTile(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"isTileWritable(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"getWritableTileIndices()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"hasTileWriters()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.image.WritableRenderedImage",
        "method_name":"setData(java.awt.image.Raster)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"java.awt.Point()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"java.awt.Point(java.awt.Point)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"java.awt.Point(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"getX()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"getY()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"getLocation()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"setLocation(java.awt.Point)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"setLocation(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"setLocation(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"move(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"translate(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.Point",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"java.awt.print.PrinterJob()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"getPrinterJob()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"lookupPrintServices()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"lookupStreamPrintServices(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"getPrintService()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"setPrintService(javax.print.PrintService)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"setPrintable(java.awt.print.Printable)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"setPrintable(java.awt.print.Printable, java.awt.print.PageFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"setPageable(java.awt.print.Pageable)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"printDialog()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"printDialog(javax.print.attribute.PrintRequestAttributeSet)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"pageDialog(java.awt.print.PageFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"pageDialog(javax.print.attribute.PrintRequestAttributeSet)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"defaultPage(java.awt.print.PageFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"defaultPage()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"getPageFormat(javax.print.attribute.PrintRequestAttributeSet)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"validatePage(java.awt.print.PageFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"print()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"print(javax.print.attribute.PrintRequestAttributeSet)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"setCopies(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"getCopies()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"getUserName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"setJobName(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"getJobName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"cancel()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.awt.print.PrinterJob",
        "method_name":"isCancelled()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"java.io.DataInputStream(java.io.InputStream)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"read(byte[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.read(b)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"read(byte[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readFully(byte[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readFully(byte[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"skipBytes(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readBoolean()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readByte()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readUnsignedByte()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readShort()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readUnsignedShort()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readChar()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readInt()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readLong()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readFloat()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readDouble()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readLine()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readUTF()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.DataInputStream",
        "method_name":"readUTF(java.io.DataInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"java.io.File(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"java.io.File(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"java.io.File(java.io.File, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"java.io.File(java.net.URI)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"isInvalid()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getPrefixLength()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getParent()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getParentFile()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getPath()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"isAbsolute()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getAbsolutePath()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getAbsoluteFile()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getAbsoluteFile()",
                    "new File(this.getAbsolutePath())"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getCanonicalPath()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "None",
                    "new File(this.getCanonicalPath())"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getCanonicalFile()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"toURL()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"toURI()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"canRead()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"canWrite()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"exists()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"isDirectory()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"isFile()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"isHidden()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"lastModified()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"length()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"createNewFile()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"delete()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"deleteOnExit()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"list()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"list(java.io.FilenameFilter)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"listFiles()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"listFiles(java.io.FilenameFilter)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"listFiles(java.io.FileFilter)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"mkdir()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"mkdirs()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"renameTo(java.io.File)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setLastModified(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setReadOnly()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setWritable(boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setWritable(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setReadable(boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setReadable(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setExecutable(boolean, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"setExecutable(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"canExecute()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"listRoots()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getTotalSpace()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getFreeSpace()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"getUsableSpace()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"createTempFile(java.lang.String, java.lang.String, java.io.File)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.io.File.createTempFile(prefix, suffix, directory)",
                    "this.createTempFile(prefix, suffix, null)"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"createTempFile(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"compareTo(java.io.File)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"toString()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.toString()",
                    "this.getPath()"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.File",
        "method_name":"toPath()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"read()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"read(byte[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.read(b)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"read(byte[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"skip(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"available()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"close()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"mark(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"reset()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.io.InputStream",
        "method_name":"markSupported()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.OperatingSystemMXBean",
        "method_name":"getName()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getName()",
                    "java.lang.System.getProperty(\"os.name\")"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.management.OperatingSystemMXBean",
        "method_name":"getArch()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getArch()",
                    "java.lang.System.getProperty(\"os.arch\")"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.management.OperatingSystemMXBean",
        "method_name":"getVersion()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getVersion()",
                    "java.lang.System.getProperty(\"os.version\")"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.management.OperatingSystemMXBean",
        "method_name":"getAvailableProcessors()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.OperatingSystemMXBean",
        "method_name":"getSystemLoadAverage()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getVmName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getVmVendor()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getVmVersion()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getSpecName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getSpecVendor()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getSpecVersion()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getManagementSpecVersion()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getClassPath()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getLibraryPath()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"isBootClassPathSupported()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getBootClassPath()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getInputArguments()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getUptime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getStartTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.management.RuntimeMXBean",
        "method_name":"getSystemProperties()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"sin(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"cos(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"tan(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"asin(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"acos(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"atan(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"toRadians(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"toDegrees(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"exp(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"log(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"log10(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"sqrt(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"cbrt(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"IEEEremainder(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"ceil(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"floor(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"rint(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"atan2(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"pow(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"round(float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"round(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"random()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"addExact(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"addExact(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"subtractExact(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"subtractExact(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"multiplyExact(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"multiplyExact(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"incrementExact(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"incrementExact(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"decrementExact(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"decrementExact(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"negateExact(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"negateExact(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"toIntExact(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"floorDiv(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"floorDiv(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"floorMod(int, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.floorMod(x, y)",
                    "x - java.lang.Math.floorDiv(x, y) * y"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"floorMod(long, long)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.floorMod(x, y)",
                    "x - java.lang.Math.floorDiv(x, y) * y"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"abs(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"abs(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"abs(float)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.abs(a)",
                    "java.lang.Float.intBitsToFloat(0x7fffffff & java.lang.Float.floatToIntBits(a))"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"abs(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"max(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"max(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"max(float, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"max(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"min(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"min(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"min(float, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"min(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"ulp(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"ulp(float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"signum(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"signum(float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"sinh(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"cosh(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"tanh(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"hypot(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"expm1(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"log1p(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"copySign(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"copySign(float, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"getExponent(float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"getExponent(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"nextAfter(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"nextAfter(float, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"nextUp(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.nextUp(d)",
                    "java.lang.Math.nextAfter(d, java.lang.Double.POSITIVE_INFINITY)"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"nextUp(float)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.nextUp(f)",
                    "java.lang.Math.nextAfter(f, java.lang.Float.POSITIVE_INFINITY)"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"nextDown(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.nextDown(d)",
                    "java.lang.Math.nextAfter(d, java.lang.Double.NEGATIVE_INFINITY)"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"nextDown(float)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.Math.nextDown(f)",
                    "java.lang.Math.nextAfter(f, java.lang.Float.NEGATIVE_INFINITY)"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"scalb(double, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"scalb(float, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"powerOfTwoD(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.Math",
        "method_name":"powerOfTwoF(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"java.lang.reflect.Field(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, int, int, java.lang.String, byte[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getDeclaringClass()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getModifiers()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"isEnumConstant()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"isSynthetic()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getType()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getGenericType()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"toGenericString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"get(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getBoolean(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getByte(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getChar(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getShort(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getInt(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getLong(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getFloat(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getDouble(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"set(java.lang.Object, java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setBoolean(java.lang.Object, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setByte(java.lang.Object, byte)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setChar(java.lang.Object, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setShort(java.lang.Object, short)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setInt(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setLong(java.lang.Object, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setFloat(java.lang.Object, float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"setDouble(java.lang.Object, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getAnnotation(java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getAnnotationsByType(java.lang.Class<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getDeclaredAnnotations()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.reflect.Field",
        "method_name":"getAnnotatedType()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(char[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(char[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(int[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[], int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[], int, int, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[], int, int, java.nio.charset.Charset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[], java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[], java.nio.charset.Charset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(byte[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(java.lang.StringBuffer)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(java.lang.StringBuilder)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"java.lang.String(char[], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"length()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"charAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"codePointAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"codePointBefore(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"codePointCount(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"offsetByCodePoints(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"getChars(char[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"getChars(int, int, char[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"getBytes(int, int, byte[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"getBytes(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"getBytes(java.nio.charset.Charset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"getBytes()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"contentEquals(java.lang.StringBuffer)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"contentEquals(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"equalsIgnoreCase(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"compareTo(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"compareToIgnoreCase(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"regionMatches(int, java.lang.String, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"regionMatches(boolean, int, java.lang.String, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"startsWith(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"startsWith(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"endsWith(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"indexOf(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"indexOf(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"lastIndexOf(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"lastIndexOf(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"indexOf(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"indexOf(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"indexOf(char[], int, int, java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"indexOf(char[], int, int, char[], int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"lastIndexOf(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"lastIndexOf(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"lastIndexOf(char[], int, int, java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"lastIndexOf(char[], int, int, char[], int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"substring(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"substring(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"subSequence(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"concat(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"replace(char, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"matches(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"contains(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"replaceFirst(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"replaceAll(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"replace(java.lang.CharSequence, java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"split(java.lang.String, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"split(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"join(java.lang.CharSequence, java.lang.CharSequence...)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"join(java.lang.CharSequence, java.lang.Iterable<? extends java.lang.CharSequence>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"toLowerCase(java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"toLowerCase()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.toLowerCase()",
                    "this.toLowerCase(java.util.Locale.getDefault())"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"toUpperCase(java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"toUpperCase()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.toUpperCase()",
                    "this.toUpperCase(java.util.Locale.getDefault())"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"trim()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"toCharArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"format(java.lang.String, java.lang.Object...)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"format(java.util.Locale, java.lang.String, java.lang.Object...)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(char[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(char[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"copyValueOf(char[], int, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.String.copyValueOf(data, offset, count)",
                    "java.lang.String.valueOf(data, offset, count)"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"copyValueOf(char[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.String.copyValueOf(data)",
                    "java.lang.String.valueOf(data)"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(float)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"valueOf(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.String",
        "method_name":"intern()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"setIn(java.io.InputStream)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"setOut(java.io.PrintStream)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"setErr(java.io.PrintStream)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"console()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"inheritedChannel()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"setSecurityManager(java.lang.SecurityManager)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"getSecurityManager()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"currentTimeMillis()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"nanoTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"arraycopy(java.lang.Object, int, java.lang.Object, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"identityHashCode(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.lang.System.identityHashCode(x)",
                    "this.hashCode()"
                ]
            }
        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"getProperties()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"lineSeparator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"setProperties(java.util.Properties)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"getProperty(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"getProperty(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"setProperty(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"clearProperty(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"getenv(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"getenv()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"exit(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"gc()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"runFinalization()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"runFinalizersOnExit(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"load(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"loadLibrary(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.lang.System",
        "method_name":"mapLibraryName(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"getId()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"getCalendarType()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"date(java.time.chrono.Era, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"date(int, int, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.date(prolepticYear, month, dayOfMonth)",
                    "java.time.LocalDate.of(prolepticYear, prolepticYear, prolepticYear)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"dateYearDay(java.time.chrono.Era, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"dateYearDay(int, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.dateYearDay(prolepticYear, dayOfYear)",
                    "java.time.LocalDate.ofYearDay(prolepticYear, dayOfYear)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"dateEpochDay(long)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.dateEpochDay(epochDay)",
                    "java.time.LocalDate.ofEpochDay(epochDay)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"date(java.time.temporal.TemporalAccessor)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.date(temporal)",
                    "java.time.LocalDate.from(temporal)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"localDateTime(java.time.temporal.TemporalAccessor)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.localDateTime(temporal)",
                    "java.time.LocalDateTime.from(temporal)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"zonedDateTime(java.time.temporal.TemporalAccessor)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.zonedDateTime(temporal)",
                    "java.time.ZonedDateTime.from(temporal)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"zonedDateTime(java.time.Instant, java.time.ZoneId)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.zonedDateTime(instant, zone)",
                    "java.time.ZonedDateTime.ofInstant(instant, zone)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"dateNow()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"dateNow(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"dateNow(java.time.Clock)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"isLeapYear(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"prolepticYear(java.time.chrono.Era, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"eraOf(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"eras()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"resolveDate(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"resolveProlepticMonth(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"resolveYearOfEra(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"resolveYMD(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"range(java.time.temporal.ChronoField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"period(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.chrono.IsoChronology",
        "method_name":"writeReplace()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"java.time.Clock()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"systemUTC()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"systemDefaultZone()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.time.Clock.systemDefaultZone()",
                    "java.time.Clock.system(java.time.ZoneId.systemDefault())"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"system(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"tickSeconds(java.time.ZoneId)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.time.Clock.tickSeconds(zone)",
                    "java.time.Clock.tick(java.time.Clock.system(zone), java.time.Duration.ofSeconds(1))"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"tickMinutes(java.time.ZoneId)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "java.time.Clock.tickMinutes(zone)",
                    "java.time.Clock.tick(java.time.Clock.system(zone), java.time.Duration.ofMinutes(1))"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"tick(java.time.Clock, java.time.Duration)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"fixed(java.time.Instant, java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"offset(java.time.Clock, java.time.Duration)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"getZone()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"withZone(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"millis()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.millis()",
                    "this.instant()"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"instant()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Clock",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"java.time.format.DateTimeFormatterBuilder()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"getLocalizedDateTimePattern(java.time.format.FormatStyle, java.time.format.FormatStyle, java.time.chrono.Chronology, java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"parseCaseSensitive()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"parseCaseInsensitive()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"parseStrict()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"parseLenient()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"parseDefaulting(java.time.temporal.TemporalField, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendValue(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendValue(java.time.temporal.TemporalField, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendValue(java.time.temporal.TemporalField, int, int, java.time.format.SignStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendValueReduced(java.time.temporal.TemporalField, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendValueReduced(java.time.temporal.TemporalField, int, int, java.time.chrono.ChronoLocalDate)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendFraction(java.time.temporal.TemporalField, int, int, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendText(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendText(java.time.temporal.TemporalField, java.time.format.TextStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendText(java.time.temporal.TemporalField, java.util.Map<java.lang.Long, java.lang.String>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendInstant()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendInstant(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendOffsetId()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.appendOffsetId()",
                    "this.appendOffset(\"HH:MM:ss\", \"Z\")"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendOffset(java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendLocalizedOffset(java.time.format.TextStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendZoneId()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendZoneRegionId()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.appendZoneRegionId()",
                    "this.appendZoneId()"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendZoneOrOffsetId()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.appendZoneOrOffsetId()",
                    "this.appendZoneId()"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendZoneText(java.time.format.TextStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendZoneText(java.time.format.TextStyle, java.util.Set<java.time.ZoneId>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendChronologyId()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendChronologyText(java.time.format.TextStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendLocalized(java.time.format.FormatStyle, java.time.format.FormatStyle)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendLiteral(char)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendLiteral(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"append(java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendOptional(java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"appendPattern(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"padNext(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"padNext(int, char)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"optionalStart()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"optionalEnd()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"toFormatter()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"toFormatter(java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.format.DateTimeFormatterBuilder",
        "method_name":"toFormatter(java.time.format.ResolverStyle, java.time.chrono.Chronology)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"now()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"now(java.time.Clock)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"ofEpochSecond(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"ofEpochSecond(long, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"ofEpochMilli(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"from(java.time.temporal.TemporalAccessor)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"parse(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"isSupported(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"isSupported(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"range(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"get(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"getLong(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"getEpochSecond()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"getNano()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"with(java.time.temporal.TemporalAdjuster)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"with(java.time.temporal.TemporalField, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"truncatedTo(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"plus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"plus(long, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"plusSeconds(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"plusMillis(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"plusNanos(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"minus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"minus(long, java.time.temporal.TemporalUnit)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.minus(amountToSubtract, unit)",
                    "this.plus(-amountToSubtract, unit)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"minusSeconds(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"minusMillis(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"minusNanos(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"query(java.time.temporal.TemporalQuery<R>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"adjustInto(java.time.temporal.Temporal)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"atOffset(java.time.ZoneOffset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"atZone(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"toEpochMilli()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"compareTo(java.time.Instant)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"isAfter(java.time.Instant)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"isBefore(java.time.Instant)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"writeExternal(java.io.DataOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Instant",
        "method_name":"readExternal(java.io.DataInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"now()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"now(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"now(java.time.Clock)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"of(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"of(int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"of(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"ofSecondOfDay(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"ofNanoOfDay(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"from(java.time.temporal.TemporalAccessor)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"parse(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"isSupported(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"isSupported(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"range(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"get(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"getLong(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"getHour()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"getMinute()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"getSecond()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"getNano()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"with(java.time.temporal.TemporalAdjuster)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"with(java.time.temporal.TemporalField, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"withHour(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"withMinute(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"withSecond(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"withNano(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"truncatedTo(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"plus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"plus(long, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"plusHours(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"plusMinutes(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"plusSeconds(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"plusNanos(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"minus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"minus(long, java.time.temporal.TemporalUnit)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.minus(amountToSubtract, unit)",
                    "this.plus(-amountToSubtract, unit)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"minusHours(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"minusMinutes(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"minusSeconds(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"minusNanos(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"query(java.time.temporal.TemporalQuery<R>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"adjustInto(java.time.temporal.Temporal)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"format(java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"atDate(java.time.LocalDate)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"atOffset(java.time.ZoneOffset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"toSecondOfDay()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"toNanoOfDay()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"compareTo(java.time.LocalTime)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"isAfter(java.time.LocalTime)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"isBefore(java.time.LocalTime)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"writeExternal(java.io.DataOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.LocalTime",
        "method_name":"readExternal(java.io.DataInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"now()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"now(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"now(java.time.Clock)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"of(java.time.Month, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"of(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"from(java.time.temporal.TemporalAccessor)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"parse(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"isSupported(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"range(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"get(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"getLong(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"getMonthValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"getMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"getDayOfMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"isValidYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"withMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"with(java.time.Month)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"withDayOfMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"query(java.time.temporal.TemporalQuery<R>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"adjustInto(java.time.temporal.Temporal)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"format(java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"atYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"compareTo(java.time.MonthDay)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"isAfter(java.time.MonthDay)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"isBefore(java.time.MonthDay)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"writeExternal(java.io.DataOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.MonthDay",
        "method_name":"readExternal(java.io.DataInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"timeLineOrder()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"now()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"now(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"now(java.time.Clock)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneOffset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"of(java.time.LocalDateTime, java.time.ZoneOffset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"of(int, int, int, int, int, int, int, java.time.ZoneOffset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"ofInstant(java.time.Instant, java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"from(java.time.temporal.TemporalAccessor)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"parse(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"isSupported(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"isSupported(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"range(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"get(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getLong(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getOffset()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withOffsetSameLocal(java.time.ZoneOffset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withOffsetSameInstant(java.time.ZoneOffset)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toLocalDateTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toLocalDate()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getMonthValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getDayOfMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getDayOfYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getDayOfWeek()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toLocalTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getHour()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getMinute()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getSecond()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"getNano()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"with(java.time.temporal.TemporalAdjuster)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"with(java.time.temporal.TemporalField, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withDayOfMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withDayOfYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withHour(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withMinute(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withSecond(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"withNano(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"truncatedTo(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plus(long, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusYears(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusMonths(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusWeeks(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusDays(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusHours(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusMinutes(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusSeconds(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"plusNanos(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minus(long, java.time.temporal.TemporalUnit)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.minus(amountToSubtract, unit)",
                    "this.plus(-amountToSubtract, unit)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusYears(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusMonths(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusWeeks(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusDays(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusHours(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusMinutes(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusSeconds(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"minusNanos(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"query(java.time.temporal.TemporalQuery<R>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"adjustInto(java.time.temporal.Temporal)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"format(java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"atZoneSameInstant(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"atZoneSimilarLocal(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toOffsetTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toZonedDateTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toInstant()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toEpochSecond()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"compareTo(java.time.OffsetDateTime)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"isAfter(java.time.OffsetDateTime)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"isBefore(java.time.OffsetDateTime)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"isEqual(java.time.OffsetDateTime)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"writeExternal(java.io.ObjectOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.OffsetDateTime",
        "method_name":"readExternal(java.io.ObjectInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"ofDateAdjuster(java.util.function.UnaryOperator<java.time.LocalDate>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"firstDayOfMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"lastDayOfMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"firstDayOfNextMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"firstDayOfYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"lastDayOfYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"firstDayOfNextYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"firstInMonth(java.time.DayOfWeek)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"lastInMonth(java.time.DayOfWeek)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"dayOfWeekInMonth(int, java.time.DayOfWeek)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"next(java.time.DayOfWeek)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"nextOrSame(java.time.DayOfWeek)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"previous(java.time.DayOfWeek)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.TemporalAdjusters",
        "method_name":"previousOrSame(java.time.DayOfWeek)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"isSupported(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"with(java.time.temporal.TemporalAdjuster)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"with(java.time.temporal.TemporalField, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"plus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"plus(long, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"minus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"minus(long, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.temporal.Temporal",
        "method_name":"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"now()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"now(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"now(java.time.Clock)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"of(int, java.time.Month)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"of(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"from(java.time.temporal.TemporalAccessor)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"parse(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"isSupported(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"isSupported(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"range(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"get(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"getLong(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"getYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"getMonthValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"getMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"isLeapYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"isValidDay(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"lengthOfMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"lengthOfYear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"with(java.time.temporal.TemporalAdjuster)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"with(java.time.temporal.TemporalField, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"withYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"withMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"plus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"plus(long, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"plusYears(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"plusMonths(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"minus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"minus(long, java.time.temporal.TemporalUnit)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.minus(amountToSubtract, unit)",
                    "this.plus(-amountToSubtract, unit)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"minusYears(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"minusMonths(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"query(java.time.temporal.TemporalQuery<R>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"adjustInto(java.time.temporal.Temporal)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"format(java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"atDay(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"atEndOfMonth()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"compareTo(java.time.YearMonth)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"isAfter(java.time.YearMonth)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"isBefore(java.time.YearMonth)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"writeExternal(java.io.DataOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.YearMonth",
        "method_name":"readExternal(java.io.DataInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"now()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"now(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"now(java.time.Clock)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"of(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"from(java.time.temporal.TemporalAccessor)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"parse(java.lang.CharSequence)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"isLeap(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"getValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"isSupported(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"isSupported(java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"range(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"get(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"getLong(java.time.temporal.TemporalField)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"isLeap()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"isValidMonthDay(java.time.MonthDay)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"length()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"with(java.time.temporal.TemporalAdjuster)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"with(java.time.temporal.TemporalField, long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"plus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"plus(long, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"plusYears(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"minus(java.time.temporal.TemporalAmount)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"minus(long, java.time.temporal.TemporalUnit)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.minus(amountToSubtract, unit)",
                    "this.plus(-amountToSubtract, unit)"
                ]
            }
        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"minusYears(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"query(java.time.temporal.TemporalQuery<R>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"adjustInto(java.time.temporal.Temporal)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"format(java.time.format.DateTimeFormatter)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"atDay(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"atMonth(java.time.Month)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"atMonth(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"atMonthDay(java.time.MonthDay)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"compareTo(java.time.Year)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"isAfter(java.time.Year)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"isBefore(java.time.Year)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"writeExternal(java.io.DataOutput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.time.Year",
        "method_name":"readExternal(java.io.DataInput)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"get(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"java.util.AbstractList()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"set(int, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"add(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.add(e)",
                    "this.add(this.size(), e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"lastIndexOf(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"removeRange(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"subList(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"listIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"indexOf(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"add(int, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"remove(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"listIterator(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.AbstractList",
        "method_name":"addAll(int, java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"java.util.ArrayDeque()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"java.util.ArrayDeque(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"java.util.ArrayDeque(java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"addFirst(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"addLast(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.addLast(e)",
                    "this.add(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"offerFirst(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"offerLast(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"removeFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"removeLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"pollFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"pollLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"getFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"getLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"peekFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"peekLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"removeFirstOccurrence(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"removeLastOccurrence(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"add(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.add(e)",
                    "this.addLast(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"offer(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.offer(e)",
                    "this.offerLast(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"remove()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.remove()",
                    "this.removeFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"poll()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.poll()",
                    "this.pollFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"element()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.element()",
                    "this.getFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"peek()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.peek()",
                    "this.peekFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"push(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.push(e)",
                    "this.addFirst(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"pop()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.pop()",
                    "this.removeFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"descendingIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"remove(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.remove(o)",
                    "this.removeFirstOccurrence(o)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"toArray(T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.ArrayDeque",
        "method_name":"spliterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"java.util.concurrent.LinkedBlockingDeque()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"java.util.concurrent.LinkedBlockingDeque(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"unlink(java.util.concurrent.LinkedBlockingDeque.Node<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"addFirst(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"addLast(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"offerFirst(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"offerLast(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"putFirst(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"putLast(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"offerFirst(E, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"offerLast(E, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"removeFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"removeLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"pollFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"pollLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"takeFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"takeLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"pollFirst(long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"pollLast(long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"getFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"getLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"peekFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"peekLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"removeFirstOccurrence(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"removeLastOccurrence(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"add(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.add(e)",
                    "this.addLast(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"offer(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"put(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"offer(E, long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"remove()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.remove()",
                    "this.removeFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"poll()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"take()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"poll(long, java.util.concurrent.TimeUnit)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"element()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.element()",
                    "this.getFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"peek()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"remainingCapacity()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"drainTo(java.util.Collection<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"drainTo(java.util.Collection<? super E>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"push(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"pop()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"remove(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.remove(o)",
                    "this.removeFirstOccurrence(o)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"toArray(T[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.toArray()",
                    "this.toArray(new Object[0])"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"descendingIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.concurrent.LinkedBlockingDeque",
        "method_name":"spliterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getInstance(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getInstance(java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getAvailableCurrencies()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getCurrencyCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getSymbol()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getSymbol(java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getDefaultFractionDigits()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getNumericCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getDisplayName()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"getDisplayName(java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Currency",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"addFirst(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"addLast(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.addLast(e)",
                    "this.add(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"offerFirst(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"offerLast(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"removeFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"removeLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"pollFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"pollLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"getFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"getLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"peekFirst()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"peekLast()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"removeFirstOccurrence(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"removeLastOccurrence(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"add(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.add(e)",
                    "this.addLast(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"offer(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.offer(e)",
                    "this.offerLast(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"remove()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.remove()",
                    "this.removeFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"poll()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.poll()",
                    "this.pollFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"element()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.element()",
                    "this.getFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"peek()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.peek()",
                    "this.peekFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"push(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.push(e)",
                    "this.addFirst(e)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"pop()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.pop()",
                    "this.removeFirst()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"remove(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.remove(o)",
                    "this.removeFirstOccurrence(o)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Deque",
        "method_name":"descendingIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"add(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"lastIndexOf(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"retainAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"containsAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"replaceAll(java.util.function.UnaryOperator<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"subList(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"indexOf(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"toArray(T[])",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.toArray(new Object[0])",
                    "this.toArray()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"set(int, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"remove(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"remove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"listIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"spliterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"get(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"add(int, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"addAll(int, java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"removeAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"listIterator(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"sort(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.List",
        "method_name":"addAll(java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"java.util.SimpleTimeZone(int, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setStartYear(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setStartRule(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setStartRule(int, int, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.setStartRule(startMonth, startDay, startTime)",
                    "this.setStartRule(startMonth, startDay, 0, startTime)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setStartRule(int, int, int, int, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setEndRule(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setEndRule(int, int, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.setEndRule(endMonth, endDay, endTime)",
                    "this.setEndRule(endMonth, endDay, 0, endTime)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setEndRule(int, int, int, int, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"getOffset(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"getOffsets(long, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"getOffset(int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"getRawOffset()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setRawOffset(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"setDSTSavings(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"getDSTSavings()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"useDaylightTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"observesDaylightTime()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.observesDaylightTime()",
                    "this.useDaylightTime()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"inDaylightTime(java.util.Date)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"hasSameRules(java.util.TimeZone)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.SimpleTimeZone",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Stack",
        "method_name":"java.util.Stack()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Stack",
        "method_name":"pop()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Stack",
        "method_name":"push(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.push(item)",
                    "this.addElement(item)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Stack",
        "method_name":"empty()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Stack",
        "method_name":"search(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Stack",
        "method_name":"peek()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"java.util.TimeZone()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getOffset(int, int, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getOffset(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getOffsets(long, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"setRawOffset(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getRawOffset()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getID()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"setID(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getDisplayName()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getDisplayName()",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getDisplayName(java.util.Locale)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getDisplayName(locale)",
                    "this.getDisplayName(false, java.util.TimeZone.LONG, locale)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getDisplayName(boolean, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getDisplayName(daylight, style)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getDisplayName(boolean, int, java.util.Locale)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getDSTSavings()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"useDaylightTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"observesDaylightTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"inDaylightTime(java.util.Date)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getTimeZone(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getTimeZone(java.time.ZoneId)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"toZoneId()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getAvailableIDs(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getAvailableIDs()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getDefault()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"getDefaultRef()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"setDefault(java.util.TimeZone)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"hasSameRules(java.util.TimeZone)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.TimeZone",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"lastIndexOf(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"isEmpty()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"setElementAt(E, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.setElementAt(obj, index)",
                    "this.set(index, obj)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"lastIndexOf(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"removeIf(java.util.function.Predicate<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"elementData(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"lastElement()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"remove(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"removeAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"java.util.Vector()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"containsAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"java.util.Vector(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"removeAllElements()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.removeAllElements()",
                    "this.clear()"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"ensureCapacity(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"insertElementAt(E, int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.insertElementAt(obj, index)",
                    "this.add(index, obj)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"addAll(java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"forEach(java.util.function.Consumer<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"sort(java.util.Comparator<? super E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"addElement(E)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.addElement(obj)",
                    "this.add(obj)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"get(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"elements()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"subList(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"retainAll(java.util.Collection<?>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"listIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"java.util.Vector(java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"removeElementAt(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.removeElementAt(index)",
                    "this.remove(index)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"add(E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"removeRange(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"trimToSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"capacity()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"copyInto(java.lang.Object[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"listIterator(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"add(int, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"setSize(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"addAll(int, java.util.Collection<? extends E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"spliterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"java.util.Vector(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"indexOf(java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"firstElement()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"replaceAll(java.util.function.UnaryOperator<E>)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"set(int, E)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"remove(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"toArray(T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"removeElement(java.lang.Object)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.removeElement(obj)",
                    "this.remove(obj)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"contains(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"indexOf(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"elementAt(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.elementAt(index)",
                    "this.get(index)"
                ]
            }
        ]
    },
    {
        "class_name":"java.util.Vector",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator",
        "method_name":"addSamplePoint(double, double[]...)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator",
        "method_name":"getPolynomials()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator",
        "method_name":"value(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator",
        "method_name":"value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator",
        "method_name":"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
        "method_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
        "method_name":"smooth(double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
        "method_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator(double, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
        "method_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator(double, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
        "method_name":"interpolate(double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
        "method_name":"smooth(double[], double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator",
        "method_name":"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator",
        "method_name":"interpolate(double[][], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator",
        "method_name":"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getSqr2Split()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getLn2()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"setIEEEFlagsBits(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp(org.apache.commons.math3.dfp.Dfp)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getE()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getSqr2Reciprocal()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"setIEEEFlags(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getSqr3()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getTwo()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp(byte, byte)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getZero()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getLn5()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"computeLn(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getSqr2()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getRuntimeClass()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"clearIEEEFlags()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getLn5Split()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getLn2Split()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getPi()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getIEEEFlags()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getESplit()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"setRoundingMode(org.apache.commons.math3.dfp.DfpField.RoundingMode)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getPiSplit()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getRoundingMode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getSqr3Reciprocal()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"computeExp(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getLn10()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp(byte)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"newDfp(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getRadixDigits()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"org.apache.commons.math3.dfp.DfpField(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.dfp.DfpField",
        "method_name":"getOne()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"addObservedPoint(org.apache.commons.math3.fitting.WeightedObservedPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"fit(int, T, double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"addObservedPoint(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"getObservations()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"clearObservations()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"fit(T, double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"addObservedPoint(double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.addObservedPoint(x, y)",
                    "this.addObservedPoint(1.0, x, y)"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.CurveFitter",
        "method_name":"org.apache.commons.math3.fitting.CurveFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker",
        "method_name":"org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker",
        "method_name":"converged(int, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker",
        "method_name":"org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.WeightedObservedPoints",
        "method_name":"add(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.WeightedObservedPoints",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.WeightedObservedPoints",
        "method_name":"add(double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.add(x, y)",
                    "this.add(1.0, x, y)"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.WeightedObservedPoints",
        "method_name":"toList()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.fitting.WeightedObservedPoints",
        "method_name":"add(org.apache.commons.math3.fitting.WeightedObservedPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"isNaN()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distance(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"getX()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"getZero()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"negate()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"getNorm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"getNorm1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distance(p1, p2)",
                    "p1.subtract(p2).getNorm()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distanceInf(p1, p2)",
                    "p1.subtract(p2).getNormInf()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"toString(java.text.NumberFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"getSpace()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"getNormSq()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"isInfinite()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"getNormInf()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distanceSq(p1, p2)",
                    "p1.subtract(p2).getNormSq()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"normalize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.oned.Vector1D",
        "method_name":"scalarMultiply(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, T, T, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getAxis()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(T[], T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.applyTo(r)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.applyTo(r)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"composeInverse(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"composeInverse(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getQ0()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(double[], T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getQ1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention, T, T, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getQ3()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(T, T, T, T, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(T[][], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getAxis(org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(T[], T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"toRotation()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getMatrix()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getQ2()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(double[], T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"revert()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"compose(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"getAngle()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.applyInverseTo(r)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.applyInverseTo(r)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"angle(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"scalarMultiply(T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"scalarMultiply(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getX()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"isNaN()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"isInfinite()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"normalize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"angle(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"subtract(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"subtract(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"subtract(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"subtract(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance(v1, v2)",
                    "v1.subtract(v2).getNorm()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance(v1, v2)",
                    "v1.subtract(v2).getNorm()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getNormSq()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getDelta()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"toVector3D()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"add(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"add(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"add(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"add(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"add(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"add(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"negate()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getAlpha()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceInf(v1, v2)",
                    "v1.subtract(v2).getNormInf()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceInf(v1, v2)",
                    "v1.subtract(v2).getNormInf()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"toString(java.text.NumberFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"orthogonal()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getZ()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getNorm1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance1(v1, v2)",
                    "v1.subtract(v2).getNorm1()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance1(v1, v2)",
                    "v1.subtract(v2).getNorm1()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, T, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getNorm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceSq(v1, v2)",
                    "v1.subtract(v2).getNormSq()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceSq(v1, v2)",
                    "v1.subtract(v2).getNormSq()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getY()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"subtract(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"subtract(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"getNormInf()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getAxis(org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getQ0()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"applyInverseTo(double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.Rotation)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getQ2()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getAngle()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getMatrix()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(double[][], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"revert()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention, double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"applyTo(double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getQ3()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"composeInverse(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.applyTo(r)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation(double, double, double, double, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getAngles(order)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.applyInverseTo(r)",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getQ1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Rotation",
        "method_name":"getAxis()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getAxis()",
                    "None"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"scalarMultiply(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getZero()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getNorm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getNormInf()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getSpace()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"negate()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(v1, v2)",
                    "v1.subtract(v2).getNorm1()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(v1, v2)",
                    "v1.subtract(v2).getNormSq()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(v1, v2)",
                    "v1.subtract(v2).getNorm()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"isInfinite()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getAlpha()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getZ()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getNorm1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"normalize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"toString(java.text.NumberFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getDelta()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getX()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getY()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distance(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"orthogonal()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"getNormSq()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(v1, v2)",
                    "v1.subtract(v2).getNormInf()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.threed.Vector3D",
        "method_name":"isNaN()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"scalarMultiply(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(p1, p2)",
                    "p1.subtract(p2).getNormSq()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"normalize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(p1, p2)",
                    "p1.subtract(p2).getNorm()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distance(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getNormSq()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getNorm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"toString(java.text.NumberFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"isInfinite()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getNormInf()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getNorm1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getY()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceInf(p1, p2)",
                    "p1.subtract(p2).getNormInf()"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"negate()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"isNaN()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getZero()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getX()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.euclidean.twod.Vector2D",
        "method_name":"getSpace()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getXAxis()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getXAxis()",
                    "this.getPointAt(0.0)"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"copySelf()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"project(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getPole()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getInsideArc(org.apache.commons.math3.geometry.spherical.twod.Circle)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getOffset(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getTransform(org.apache.commons.math3.geometry.euclidean.threed.Rotation)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"wholeSpace()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getReverse()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getPointAt(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"toSubSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"wholeHyperplane()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.spherical.twod.Circle)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getTolerance()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"revertSelf()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getYAxis()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.getYAxis()",
                    "this.getPointAt(0.5 * org.apache.commons.math3.util.FastMath.PI)"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.spherical.twod.S2Point, org.apache.commons.math3.geometry.spherical.twod.S2Point, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"toSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.oned.Sphere1D>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.spherical.twod.Circle",
        "method_name":"getOffset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"getZero()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"distance1(org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"getNorm1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"distanceSq(org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"add(org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"dotProduct(org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"getNormSq()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"normalize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"distance(org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"getNorm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"toString(java.text.NumberFormat)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"distanceInf(org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"subtract(org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"scalarMultiply(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"subtract(double, org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"getNormInf()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"negate()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"isInfinite()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.geometry.Vector",
        "method_name":"add(double, org.apache.commons.math3.geometry.Vector<S>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix(double[][], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"add(org.apache.commons.math3.linear.Array2DRowRealMatrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"createMatrix(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"addToEntry(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"getDataRef()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"multiplyEntry(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix(double[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"operate(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"getEntry(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"getData()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"setSubMatrix(double[][], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"getRowDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"preMultiply(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"setEntry(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"getColumnDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.Array2DRowRealMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"addToEntry(int, int, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"scalarMultiply(T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setRowVector(int, org.apache.commons.math3.linear.FieldVector<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getColumnMatrix(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getRowMatrix(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getRowDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"multiply(org.apache.commons.math3.linear.FieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getRow(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getColumnDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"subtract(org.apache.commons.math3.linear.BlockFieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setColumn(int, T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"operate(T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"transpose()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"subtract(org.apache.commons.math3.linear.FieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setEntry(int, int, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getColumnVector(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"org.apache.commons.math3.linear.BlockFieldMatrix(T[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getColumn(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getSubMatrix(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"org.apache.commons.math3.linear.BlockFieldMatrix(int, int, T[][], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"createBlocksLayout(org.apache.commons.math3.Field<T>, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"add(org.apache.commons.math3.linear.BlockFieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getData()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"multiply(org.apache.commons.math3.linear.BlockFieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"toBlocksLayout(T[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setRowMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"add(org.apache.commons.math3.linear.FieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"org.apache.commons.math3.linear.BlockFieldMatrix(org.apache.commons.math3.Field<T>, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"createMatrix(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"preMultiply(T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setColumnMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"scalarAdd(T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setRow(int, T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"multiplyEntry(int, int, T)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getEntry(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"getRowVector(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setColumnVector(int, org.apache.commons.math3.linear.FieldVector<T>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.BlockFieldMatrix",
        "method_name":"setSubMatrix(T[][], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.CholeskyDecomposition",
        "method_name":"getDeterminant()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.CholeskyDecomposition",
        "method_name":"getSolver()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.CholeskyDecomposition",
        "method_name":"getLT()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.CholeskyDecomposition",
        "method_name":"getL()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.CholeskyDecomposition",
        "method_name":"org.apache.commons.math3.linear.CholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.CholeskyDecomposition",
        "method_name":"org.apache.commons.math3.linear.CholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapAdd(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapSubtract(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapDivideToSelf(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapDivide(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"checkVectorDimensions(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"combineToSelf(double, double, org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapAddToSelf(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"checkIndices(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"setEntry(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"combine(double, double, org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"append(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"unitize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getL1Distance(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getNorm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"isNaN()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getMaxValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"subtract(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getDistance(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"projection(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"set(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getEntry(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getMinValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"append(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"checkIndex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"sparseIterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"add(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"setSubVector(int, org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"ebeMultiply(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getMaxIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"isInfinite()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"ebeDivide(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapMultiply(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"checkVectorDimensions(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"outerProduct(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"map(org.apache.commons.math3.analysis.UnivariateFunction)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.map(function)",
                    "this.copy().mapToSelf(function)"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapMultiplyToSelf(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"addToEntry(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getMinIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getL1Norm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getLInfDistance(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"mapSubtractToSelf(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"toArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"dotProduct(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getLInfNorm()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"iterator()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"getSubVector(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"cosine(org.apache.commons.math3.linear.RealVector)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.linear.RealVector",
        "method_name":"unitVector()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEStateAndDerivative",
        "method_name":"org.apache.commons.math3.ode.FieldODEStateAndDerivative(T, T[], T[], T[][], T[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEStateAndDerivative",
        "method_name":"getDerivative()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEStateAndDerivative",
        "method_name":"org.apache.commons.math3.ode.FieldODEStateAndDerivative(T, T[], T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEStateAndDerivative",
        "method_name":"getSecondaryDerivative(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"org.apache.commons.math3.ode.FieldODEState(T, T[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"org.apache.commons.math3.ode.FieldODEState(T, T[], T[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"copy(org.apache.commons.math3.Field<T>, T[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"getStateDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"getNumberOfSecondaryStates()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"getState()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"getSecondaryStateDimension(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"getTime()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.ode.FieldODEState",
        "method_name":"getSecondaryState(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"setPoint(int, org.apache.commons.math3.optim.PointValuePair)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"getPoints()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"getDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"getPoint(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"setPoints(org.apache.commons.math3.optim.PointValuePair[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"evaluate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optim.PointValuePair>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair, java.util.Comparator<org.apache.commons.math3.optim.PointValuePair>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optim.PointValuePair>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(double[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"build(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex",
        "method_name":"getSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"evaluate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"getSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex(double[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"getDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"getPoints()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"getPoint(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"build(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"setPoint(int, org.apache.commons.math3.optimization.PointValuePair)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"replaceWorstPoint(org.apache.commons.math3.optimization.PointValuePair, java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.direct.AbstractSimplex",
        "method_name":"setPoints(org.apache.commons.math3.optimization.PointValuePair[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"getObservations()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"addObservedPoint(double, double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.addObservedPoint(x, y)",
                    "this.addObservedPoint(1.0, x, y)"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"addObservedPoint(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"clearObservations()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"fit(T, double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"fit(int, T, double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"org.apache.commons.math3.optimization.fitting.CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"org.apache.commons.math3.optimization.fitting.CurveFitter(org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.optimization.fitting.CurveFitter",
        "method_name":"addObservedPoint(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"append(org.apache.commons.math3.stat.correlation.StorelessCovariance)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"increment(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"getData()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"getCovariance(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"getN()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"getCovarianceMatrix()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance",
        "method_name":"org.apache.commons.math3.stat.correlation.StorelessCovariance(int, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"evaluate(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"incrementAll(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"incrementAll(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"increment(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"getResult()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic",
        "method_name":"evaluate(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"sumSq(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"sumLog(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"mean(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"populationVariance(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"meanDifference(double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"max(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"normalize(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"variance(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"sumSq(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"sumDifference(double[], double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"geometricMean(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"percentile(double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"variance(double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"geometricMean(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"product(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"min(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"sum(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"populationVariance(double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"max(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"mode(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"product(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"populationVariance(double[], double, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"sumLog(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"variance(double[], double, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"variance(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"mode(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"sum(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"varianceDifference(double[], double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"mean(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"min(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"populationVariance(double[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.stat.StatUtils",
        "method_name":"percentile(double[], int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"abs()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"compareTo(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"cbrt()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"pow(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"log1p()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"hashCode()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"sqrt()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"pow(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"sin()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"multiply(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"atan()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"cos()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"org.apache.commons.math3.util.Decimal64(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"asinh()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"hypot(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"divide(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"divide(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"reciprocal()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"longValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"ceil()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"scalb(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"subtract(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"subtract(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"equals(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"log10()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"floatValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"byteValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"floor()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"signum()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"toString()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.toString()",
                    "java.lang.Double.toString(this.doubleValue())"
                ]
            }
        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"rint()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"rootN(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"round()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"multiply(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"multiply(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"tanh()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(org.apache.commons.math3.util.Decimal64[], org.apache.commons.math3.util.Decimal64[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(double[], org.apache.commons.math3.util.Decimal64[])",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"atan2(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"shortValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"getField()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"exp()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"doubleValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"pow(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"add(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"add(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"acosh()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"log()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"asin()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"getReal()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"intValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"isInfinite()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"acos()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"sinh()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"isNaN()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"tan()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"atanh()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"cosh()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"expm1()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"negate()",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"remainder(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"remainder(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"copySign(org.apache.commons.math3.util.Decimal64)",
        "oracles":[

        ]
    },
    {
        "class_name":"org.apache.commons.math3.util.Decimal64",
        "method_name":"copySign(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"weka.associations.Apriori()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"globalInfo()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getTechnicalInformation()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"resetOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"removeMissingColumns(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getCapabilities()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"buildAssociations(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"mineCARs(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getInstancesNoClass()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getInstancesOnlyClass()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"listOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setOptions(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"metricString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"removeAllMissingColsTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setRemoveAllMissingCols(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getRemoveAllMissingCols()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"upperBoundMinSupportTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getUpperBoundMinSupport()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setUpperBoundMinSupport(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setClassIndex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getClassIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"classIndexTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setCar(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getCar()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"carTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"lowerBoundMinSupportTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getLowerBoundMinSupport()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setLowerBoundMinSupport(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getMetricType()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"metricTypeTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setMetricType(weka.core.SelectedTag)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"minMetricTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getMinMetric()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setMinMetric(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"numRulesTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getNumRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setNumRules(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"deltaTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getDelta()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setDelta(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"significanceLevelTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getSignificanceLevel()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setSignificanceLevel(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setOutputItemSets(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getOutputItemSets()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"outputItemSetsTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setVerbose(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getVerbose()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"verboseTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"treatZeroAsMissingTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"setTreatZeroAsMissing(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getTreatZeroAsMissing()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getAllTheRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getAssociationRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getRuleMetricNames()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"canProduceRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.Apriori",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.AssociationRulesProducer",
        "method_name":"getAssociationRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.AssociationRulesProducer",
        "method_name":"getRuleMetricNames()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.AssociationRulesProducer",
        "method_name":"canProduceRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"weka.associations.FilteredAssociator()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"globalInfo()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"defaultAssociatorString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"listOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"setOptions(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"filterTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"setFilter(weka.filters.Filter)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getFilter()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"classIndexTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"setClassIndex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getClassIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getFilterSpec()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getCapabilities()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"buildAssociations(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getAssociationRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getRuleMetricNames()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"canProduceRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FilteredAssociator",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"weka.associations.FPGrowth()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"generateRulesBruteForce(weka.associations.FPGrowth.FrequentItemSets, weka.associations.DefaultAssociationRule.METRIC_TYPE, double, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"pruneRules(java.util.List<weka.associations.AssociationRule>, java.util.ArrayList<weka.associations.Item>, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getCapabilities()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"globalInfo()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getTechnicalInformation()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getSingletons(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getSingletons(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"buildFPTree(java.util.ArrayList<weka.associations.BinaryItem>, java.lang.Object, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"mineTree(weka.associations.FPGrowth.FPTreeRoot, weka.associations.FPGrowth.FrequentItemSets, int, weka.associations.FPGrowth.FrequentBinaryItemSet, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"resetOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"positiveIndexTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setPositiveIndex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getPositiveIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setNumRulesToFind(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getNumRulesToFind()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"numRulesToFindTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setMetricType(weka.core.SelectedTag)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setMaxNumberOfItems(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getMaxNumberOfItems()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"maxNumberOfItemsTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getMetricType()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"metricTypeTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"minMetricTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getMinMetric()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setMinMetric(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"transactionsMustContainTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setTransactionsMustContain(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getTransactionsMustContain()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"rulesMustContainTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setRulesMustContain(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getRulesMustContain()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"useORForMustContainListTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setUseORForMustContainList(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getUseORForMustContainList()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"deltaTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getDelta()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setDelta(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"lowerBoundMinSupportTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getLowerBoundMinSupport()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setLowerBoundMinSupport(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"upperBoundMinSupportTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getUpperBoundMinSupport()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setUpperBoundMinSupport(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"findAllRulesForSupportLevelTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setFindAllRulesForSupportLevel(boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getFindAllRulesForSupportLevel()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setOffDiskReportingFrequency(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getAssociationRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getRuleMetricNames()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"canProduceRules()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"listOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"setOptions(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"buildAssociations(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"graph(weka.associations.FPGrowth.FPTreeRoot)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.associations.FPGrowth",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.classifiers.trees.j48.GainRatioSplitCrit",
        "method_name":"splitCritValue(weka.classifiers.trees.j48.Distribution)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.classifiers.trees.j48.GainRatioSplitCrit",
        "method_name":"splitCritValue(weka.classifiers.trees.j48.Distribution, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.classifiers.trees.j48.GainRatioSplitCrit",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.classifiers.trees.j48.InfoGainSplitCrit",
        "method_name":"splitCritValue(weka.classifiers.trees.j48.Distribution)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.classifiers.trees.j48.InfoGainSplitCrit",
        "method_name":"splitCritValue(weka.classifiers.trees.j48.Distribution, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.classifiers.trees.j48.InfoGainSplitCrit",
        "method_name":"splitCritValue(weka.classifiers.trees.j48.Distribution, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.classifiers.trees.j48.InfoGainSplitCrit",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BatchPredictor",
        "method_name":"setBatchSize(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BatchPredictor",
        "method_name":"getBatchSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BatchPredictor",
        "method_name":"distributionsForInstances(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BatchPredictor",
        "method_name":"implementsMoreEfficientBatchPrediction()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"weka.core.BinarySparseInstance(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"weka.core.BinarySparseInstance(weka.core.SparseInstance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"weka.core.BinarySparseInstance(double, double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"weka.core.BinarySparseInstance(double, int[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"weka.core.BinarySparseInstance(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"copy(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"mergeInstance(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"replaceMissingValues(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"setValue(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"setValueSparse(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"toDoubleArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"value(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"valueSparse(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.valueSparse(indexOfIndex)",
                    "this.value(indexOfIndex)"
                ]
            }
        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"forceDeleteAttributeAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"forceInsertAttributeAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.BinarySparseInstance",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Copyable",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"weka.core.DenseInstance(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"weka.core.DenseInstance(double, double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"weka.core.DenseInstance(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"copy(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"index(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"mergeInstance(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"numAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"numValues()",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.numValues()",
                    "this.numAttributes()"
                ]
            }
        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"replaceMissingValues(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"setValue(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"setValueSparse(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"toDoubleArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"toStringNoWeight()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"toStringNoWeight(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"value(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"forceDeleteAttributeAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"forceInsertAttributeAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.DenseInstance",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"weka.core.Instances(java.io.Reader)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"weka.core.Instances(java.io.Reader, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"weka.core.Instances(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"weka.core.Instances(weka.core.Instances, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"weka.core.Instances(weka.core.Instances, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"weka.core.Instances(java.lang.String, java.util.ArrayList<weka.core.Attribute>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"initialize(weka.core.Instances, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"stringFreeStructure()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"add(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"add(int, weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"attribute(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"attribute(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"checkForAttributeType(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"checkForStringAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"checkInstance(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"classAttribute()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"classIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"compactify()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"delete()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"delete(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"deleteAttributeAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"deleteAttributeType(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"deleteStringAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"deleteWithMissing(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"deleteWithMissing(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"deleteWithMissingClass()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"enumerateAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"enumerateInstances()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"equalHeadersMsg(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"equalHeaders(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"firstInstance()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"getRandomNumberGenerator(long)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"insertAttributeAt(weka.core.Attribute, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"instance(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"get(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"kthSmallestValue(weka.core.Attribute, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"kthSmallestValue(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"lastInstance()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"meanOrMode(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"meanOrMode(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"numAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"numClasses()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"numDistinctValues(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"numDistinctValues(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"numInstances()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"size()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"randomize(java.util.Random)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"readInstance(java.io.Reader)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"replaceAttributeAt(weka.core.Attribute, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"relationName()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"remove(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"renameAttribute(int, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"renameAttribute(weka.core.Attribute, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"renameAttributeValue(int, int, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"renameAttributeValue(weka.core.Attribute, java.lang.String, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resample(java.util.Random)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resampleWithWeights(java.util.Random)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resampleWithWeights(java.util.Random, boolean[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resampleWithWeights(java.util.Random, boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resampleWithWeights(java.util.Random, boolean[], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resampleWithWeights(java.util.Random, double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resampleWithWeights(java.util.Random, double[], boolean[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"resampleWithWeights(java.util.Random, double[], boolean[], boolean)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"set(int, weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"setClass(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"setClassIndex(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"setRelationName(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"sortBasedOnNominalAttribute(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"sort(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"sort(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"stableSort(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"stableSort(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"stratify(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"sumOfWeights()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"testCV(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"stringWithoutHeader()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"trainCV(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"trainCV(int, int, java.util.Random)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"variances()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"variance(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"variance(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"attributeStats(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"attributeToDoubleArray(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"toSummaryString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"copyInstances(int, weka.core.Instances, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"instancesAndWeights()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"stratStep(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"swap(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"mergeInstances(weka.core.Instances, weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"test(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instances",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"attribute(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"attributeSparse(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"classAttribute()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"classIndex()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"classIsMissing()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"classValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"copy(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"dataset()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"deleteAttributeAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"enumerateAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"equalHeaders(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"equalHeadersMsg(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"hasMissingValue()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"index(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"insertAttributeAt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"isMissing(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"isMissingSparse(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"isMissing(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"mergeInstance(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"numAttributes()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"numClasses()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"numValues()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"replaceMissingValues(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setClassMissing()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setClassValue(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setClassValue(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setDataset(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setMissing(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setMissing(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setValue(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setValueSparse(int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setValue(int, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setValue(weka.core.Attribute, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setValue(weka.core.Attribute, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"setWeight(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"relationalValue(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"relationalValue(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"stringValue(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"stringValue(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toDoubleArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toStringNoWeight(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toStringNoWeight()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toStringMaxDecimalDigits(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toString(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toString(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toString(weka.core.Attribute, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"toString(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"value(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"valueSparse(int)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "un",
                    "translatable"
                ]
            }
        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"value(weka.core.Attribute)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.Instance",
        "method_name":"weight()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"weka.core.matrix.Matrix(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"weka.core.matrix.Matrix(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"weka.core.matrix.Matrix(double[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"weka.core.matrix.Matrix(double[][], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"weka.core.matrix.Matrix(double[], int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"weka.core.matrix.Matrix(java.io.Reader)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"constructWithCopy(double[][])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"copy()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"clone()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getArray()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getArrayCopy()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getColumnPackedCopy()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getRowPackedCopy()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getRowDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getColumnDimension()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"get(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getMatrix(int, int, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getMatrix(int[], int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getMatrix(int, int, int[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getMatrix(int[], int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"set(int, int, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"setMatrix(int, int, int, int, weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"setMatrix(int[], int[], weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"setMatrix(int[], int, int, weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"setMatrix(int, int, int[], weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"isSymmetric()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"isSquare()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"transpose()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"norm1()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"norm2()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"normInf()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"normF()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"uminus()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"plus(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"plusEquals(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"minus(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"minusEquals(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"arrayTimes(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"arrayTimesEquals(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"arrayRightDivide(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"arrayRightDivideEquals(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"arrayLeftDivide(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"arrayLeftDivideEquals(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"times(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"timesEquals(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"times(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"lu()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"qr()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"chol()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"svd()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"eig()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"solve(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"solveTranspose(weka.core.matrix.Matrix)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"inverse()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"sqrt()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"regression(weka.core.matrix.Matrix, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"regression(weka.core.matrix.Matrix, double[], double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"det()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"rank()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"cond()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"trace()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"random(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"identity(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"print(int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"print(java.io.PrintWriter, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"print(java.text.NumberFormat, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"print(java.io.PrintWriter, java.text.NumberFormat, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"read(java.io.BufferedReader)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"write(java.io.Writer)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"toMatlab()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"parseMatlab(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.matrix.Matrix",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"weka.core.neighboursearch.CoverTree()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"globalInfo()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"getTechnicalInformation()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"listOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"setOptions(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"getOptions()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"dist_of_scale(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"get_scale(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"new_node(java.lang.Integer)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"new_leaf(java.lang.Integer)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"max_set(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"split(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"dist_split(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.CoverTree.DistanceNode, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"batch_insert(java.lang.Integer, int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"buildCoverTree(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"setter(weka.core.neighboursearch.CoverTree.MyHeap, double, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"update(weka.core.neighboursearch.CoverTree.MyHeap, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"getCoverSet(int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"copy_zero_set(weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"copy_cover_sets(weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"print_cover_sets(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, int, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"SWAP(int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"compare(int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"halfsort(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"shell(double, double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"descend(weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.MyHeap, int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"brute_nearest(int, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.NearestNeighbourSearch.NeighborList>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"internal_batch_nearest_neighbor(int, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, int, int, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.NearestNeighbourSearch.NeighborList>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"batch_nearest_neighbor(int, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.NearestNeighbourSearch.NeighborList>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"findKNearest(weka.core.Instance, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"kNearestNeighbours(weka.core.Instance, int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"nearestNeighbour(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"getDistances()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"checkMissing(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"setInstances(weka.core.Instances)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"update(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"addInstanceInfo(weka.core.Instance)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"setDistanceFunction(weka.core.DistanceFunction)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"baseTipText()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"getBase()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"setBase(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"measureTreeSize()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"measureNumLeaves()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"measureMaxDepth()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"enumerateMeasures()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"getMeasure(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"print(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"println(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"print(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"println(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"print_space(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"print(int, weka.core.neighboursearch.CoverTree.CoverTreeNode)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.neighboursearch.CoverTree",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Apply",
        "method_name":"weka.core.pmml.Apply(org.w3c.dom.Element, weka.core.pmml.FieldMetaInfo.Optype, java.util.ArrayList<weka.core.Attribute>, weka.core.pmml.TransformationDictionary)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Apply",
        "method_name":"setFieldDefs(java.util.ArrayList<weka.core.Attribute>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Apply",
        "method_name":"getResult(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Apply",
        "method_name":"getResultCategorical(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Apply",
        "method_name":"getOutputDef()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Apply",
        "method_name":"toString(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"weka.core.pmml.Array(org.w3c.dom.Element)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"weka.core.pmml.Array(weka.core.pmml.Array.ArrayType, java.util.List<java.lang.Object>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"create(java.util.List<java.lang.Object>, java.util.List<java.lang.Integer>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"getType()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"isSparse()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"numValues()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"contains(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"contains(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"contains(double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"contains(float)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"index(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"value(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"actualValue(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueString(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueDouble(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueFloat(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueInt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueSparse(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueSparseString(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueSparseDouble(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueSparseFloat(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"valueSparseInt(int)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Array",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"weka.core.pmml.Expression(weka.core.pmml.FieldMetaInfo.Optype, java.util.ArrayList<weka.core.Attribute>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"setFieldDefs(java.util.ArrayList<weka.core.Attribute>)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"getResult(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"getResultContinuous(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"getResultCategorical(double[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"getOutputDef()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"getFieldDef(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"getFieldDefIndex(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"getOptype()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.pmml.Expression",
        "method_name":"toString(java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"weka.core.xml.XMLSerializationMethodHandler(java.lang.Object)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"addMethods(weka.core.xml.MethodHandler, java.lang.reflect.Method, java.lang.reflect.Method[])",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"addMethods()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"findReadMethod(java.lang.Object, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"findWriteMethod(java.lang.Object, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"clear()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"read()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"write()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"register(java.lang.Object, java.lang.Class<?>, java.lang.String)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.core.xml.XMLSerializationMethodHandler",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"add(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.add(value)",
                    "this.add(value, 1)"
                ]
            }
        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"add(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"subtract(double)",
        "oracles":[
            {
                "condition":"true",
                "entities":[
                    "this.subtract(value)",
                    "this.subtract(value, 1)"
                ]
            }
        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"subtract(double, double)",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"calculateDerived()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"toString()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"getRevision()",
        "oracles":[

        ]
    },
    {
        "class_name":"weka.experiment.Stats",
        "method_name":"main(java.lang.String[])",
        "oracles":[

        ]
    }
]