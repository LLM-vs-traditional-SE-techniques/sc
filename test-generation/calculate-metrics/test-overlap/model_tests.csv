test,file,project
"        String var = ""test"";        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        var.parent(parent);        assertEquals(var, var.parent());",./CodexTest_0_3_5.java,elasticsearch_1
"        String var = ""test"";        String var = new String(expected);        assertEquals(var, actual);",./CodexTest_0_5_8.java,elasticsearch_1
"        String var = """";        String var = """";        String var = """";        String var = """";        IndexRequest var = new IndexRequest(var, var, id);        var.parent(parent);        assertEquals(var, var.parent());",./CodexTest_0_5_5.java,elasticsearch_1
"        assertEquals(null, new IndexRequest().parent());",./CodexTest_0_4_7.java,elasticsearch_1
"        assertEquals(""testParent"", ""testParent"");",./CodexTest_0_6_5.java,elasticsearch_1
"        String var = ""parent"";        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        var.parent(parent);        assertEquals(var, var.parent());",./CodexTest_0_0_1.java,elasticsearch_1
"        assertEquals(""parent"", new IndexRequest().parent());",./CodexTest_0_2_1.java,elasticsearch_1
"        String var = ""parent"";        IndexRequest var = new IndexRequest("""");        var.parent(parent);        assertEquals(var, var.parent());",./CodexTest_0_1_3.java,elasticsearch_1
"        String var = ""parent"";        IndexRequest var = new IndexRequest(var, ""type"", ""id"");        assertEquals(var, var.parent());",./CodexTest_0_3_7.java,elasticsearch_1
"        String var = ""bar"";        String var = new String(expected);        assertEquals(var, actual);",./CodexTest_0_6_1.java,elasticsearch_1
"        String var = ""test"";        String var = ""test"";        assertEquals(var, actual);",./CodexTest_0_7_2.java,elasticsearch_1
"        assertEquals("""", new IndexRequest("""").parent());",./CodexTest_0_6_2.java,elasticsearch_1
"        assertEquals(""parent"", new IndexRequest(""index"").parent(""parent"").parent());",./CodexTest_0_6_4.java,elasticsearch_1
"    AlgVector var = new AlgVector(new double[] {1, 2, 3});    AlgVector var = new AlgVector(new double[] {4, 5, 6});    AlgVector var = var.add(b);    assertEquals(""Length differs"", 3, var.numElements());    assertEquals(""1. value differs"", 5.0, var.getElement(0), 1e-7);    assertEquals(""2. value differs"", 7.0, var.getElement(1), 1e-7);    assertEquals(""3. value differs"", 9.0, var.getElement(2), 1e-7);",./CodexTest_0_5_10.java,weka_1
"    AlgVector var = new AlgVector(new double[] {1, 2, 3});    AlgVector var = new AlgVector(new double[] {4, 5, 6});    AlgVector var = var.add(v2);    assertEquals(""Length differs"", var.numElements(), var.numElements());    for (int i = 0; i < var.numElements(); i++) {      assertEquals((i+1) + "". value differs"", var.getElement(i) + var.getElement(i), var.getElement(i));    }",./CodexTest_0_3_5.java,weka_1
"    double[] var = {2.3, 1.2, 5.0};    AlgVector var = new AlgVector(data);    double[] var = {3.4, 1.1, 2.0};    AlgVector var = new AlgVector(data2);    AlgVector var = var.add(v2);    assertEquals(""Length differs"", var.length, var.numElements());    for (int i = 0; i < var.length; i++) {      assertEquals((i+1) + "". value differs"", data[i]+data2[i], var.getElement(i));    }",./CodexTest_0_7_4.java,weka_1
"    int var = 22;    AlgVector var = new AlgVector(len);    assertEquals(""Length differs"", var, var.numElements());",./CodexTest_0_7_6.java,weka_1
"			double[] var = {1.0, 2.0, 3.0};			double[] var = {4.0, 5.0, 6.0};			AlgVector var = new AlgVector(data1);			AlgVector var = new AlgVector(data2);			AlgVector var = var.add(v2);			double var = 1e-9;			for (int i = 0; i < var.numElements(); i++) {				assertEquals((i+1) + "". value differs"", data1[i] + data2[i], var.getElement(i), eps);			}",./CodexTest_0_7_5.java,weka_1
"    double[] var = {2.3, 1.2, 5.0};    AlgVector var = new AlgVector(data);    AlgVector var = new AlgVector(data);    AlgVector var = var.add(w);    AlgVector var = new AlgVector(new double[]{2.3*2, 1.2*2, 5.0*2});    assertTrue(var.equals(u));",./CodexTest_0_5_8.java,weka_1
"    AlgVector var = new AlgVector(new double[] {1.0, 2.0, 3.0});    AlgVector var = new AlgVector(new double[] {4.0, 5.0, 6.0});    AlgVector var = var.add(v2);    assertEquals(5.0, var.getElement(0));    assertEquals(7.0, var.getElement(1));    assertEquals(9.0, var.getElement(2));",./CodexTest_0_5_5.java,weka_1
"    int var = 5;    AlgVector var = new AlgVector(len);    assertEquals(""Length differs"", var, var.numElements());",./CodexTest_0_9_5.java,weka_1
"    int var = 22;    AlgVector var = new AlgVector(len);    assertEquals(""Length differs"", var, var.numElements());",./CodexTest_0_7_1.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1, 2, 3});    AlgVector var = new AlgVector(new double[]{2, 3, 4});    AlgVector var = var.add(v2);    assertEquals(""Length differs"", var.numElements(), var.numElements());    for (int i = 0; i < var.numElements(); i++) {      assertEquals((i+1) + "". value differs"", var.getElement(i) + var.getElement(i), var.getElement(i));    }",./CodexTest_0_2_3.java,weka_1
"        double[] var = {                1, 2, 3        };        double[] var = {                4, 5, 6        };        double[] var = {                5, 7, 9        };        AlgVector var = new AlgVector(aData);        AlgVector var = new AlgVector(bData);        AlgVector var = new AlgVector(eData);        AlgVector var = (AlgVector) var.add(b);        assertEquals(""Result does not match: "", var, e);",./CodexTest_0_9_6.java,weka_1
"    AlgVector var = new AlgVector(new double[] {1, 2, 3});    AlgVector var = new AlgVector(new double[] {1, 2, 3});    AlgVector var = var.add(b);    assertTrue(""Vector not created"", (c != null));    assertEquals(""Length differs"", 3, var.numElements());    assertEquals(""1. value differs"", 2.0, var.getElement(0));    assertEquals(""2. value differs"", 4.0, var.getElement(1));    assertEquals(""3. value differs"", 6.0, var.getElement(2));",./CodexTest_0_5_7.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1.0, 2.0, 3.0});    AlgVector var = new AlgVector(new double[]{4.0, 5.0, 6.0});    AlgVector var = var.add(v2);    assertEquals(""Length differs"", 3, var.numElements());    assertEquals(""1. value differs"", 5.0, var.getElement(0));    assertEquals(""2. value differs"", 7.0, var.getElement(1));    assertEquals(""3. value differs"", 9.0, var.getElement(2));",./CodexTest_0_2_7.java,weka_1
"        AlgVector var = new AlgVector(new double[] {1,2,3});        AlgVector var = new AlgVector(new double[] {4,5,6});        AlgVector var = var.add(v2);        assertEquals(5, var.getElement(0), 0.0001);        assertEquals(7, var.getElement(1), 0.0001);        assertEquals(9, var.getElement(2), 0.0001);",./CodexTest_0_4_7.java,weka_1
"    AlgVector var = new AlgVector(new double[] {1.0, 2.0});    AlgVector var = new AlgVector(new double[] {3.0, 4.0});    AlgVector var = var.add(v2);    assertEquals(""Length differs"", var.numElements(), var.numElements());    assertEquals(4.0, var.getElement(0), 1e-10);    assertEquals(6.0, var.getElement(1), 1e-10);",./CodexTest_0_3_1.java,weka_1
"    int var = 22;    AlgVector var = new AlgVector(len);    AlgVector var = new AlgVector(len);    for (int i = 0; i < len; i++) {      var.setElement(i, i);      var.setElement(i, i+1);    }    AlgVector var = var.add(w);    for (int i = 0; i < len; i++) {      assertEquals((i+1) + "". value differs"", i+i+1, var.getElement(i));    }",./CodexTest_0_3_8.java,weka_1
"    double[] var = {2.3, 1.2, 5.0};    AlgVector var = new AlgVector(data);    AlgVector var = new AlgVector(data);    AlgVector var = var.add(v2);    for (int i = 0; i < var.length; i++) {      assertEquals((i+1) + "". value differs"", data[i] + data[i], var.getElement(i));    }",./CodexTest_0_4_3.java,weka_1
"    double[] var = {1.0, 2.0, 3.0};    AlgVector var = new AlgVector(data);    AlgVector var = new AlgVector(data);    AlgVector var = var.add(v2);    for (int i = 0; i < var.length; i++) {      assertEquals((i+1) + "". value differs"", 2.0 * data[i], var.getElement(i));    }",./CodexTest_0_3_4.java,weka_1
"    AlgVector var = new AlgVector(2);    AlgVector var = new AlgVector(2);    var.setElement(0, 1.0);    var.setElement(1, 2.0);    var.setElement(0, 3.0);    var.setElement(1, 4.0);    AlgVector var = var.add(v1);    assertEquals(var.getElement(0), 4.0, 0.0);    assertEquals(var.getElement(1), 6.0, 0.0);",./CodexTest_0_5_3.java,weka_1
"    double[] var = {1.5, -3.2, 2.3, 5.6};    AlgVector var = new AlgVector(data);    AlgVector var = new AlgVector(data);    AlgVector var = var.add(v2);    for (int i = 0; i < var.numElements(); i++) {      assertEquals((i+1) + "". value differs"", data[i] * 2.0, var.getElement(i), 0.0);    }",./CodexTest_0_7_7.java,weka_1
"        AlgVector var = new AlgVector(new double[]{1, 2, 3});        AlgVector var = new AlgVector(new double[]{2, 3, 4});        AlgVector var = var.add(v2);        assertEquals(3, var.getElement(0), 1e-10);        assertEquals(5, var.getElement(1), 1e-10);        assertEquals(7, var.getElement(2), 1e-10);",./CodexTest_0_4_9.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1.0, 2.0, 3.0});    AlgVector var = new AlgVector(new double[]{4.0, 5.0, 6.0});    AlgVector var = var.add(v2);    assertEquals(""Length differs"", 3, var.numElements());    assertEquals(""0. value differs"", 5.0, var.getElement(0), 1e-7);    assertEquals(""1. value differs"", 7.0, var.getElement(1), 1e-7);    assertEquals(""2. value differs"", 9.0, var.getElement(2), 1e-7);",./CodexTest_0_3_7.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1, 2, 3});    AlgVector var = new AlgVector(new double[]{4, 5, 6});    AlgVector var = var.add(b);    assertEquals(""Length differs"", 3, var.numElements());    assertEquals(""1. value differs"", 5.0, var.getElement(0));    assertEquals(""2. value differs"", 7.0, var.getElement(1));    assertEquals(""3. value differs"", 9.0, var.getElement(2));",./CodexTest_0_5_4.java,weka_1
"    AlgVector var = new AlgVector(new double[] {1.0, 2.0, 3.0});    AlgVector var = new AlgVector(new double[] {4.0, 5.0, 6.0});    AlgVector var = var.add(v2);    assertEquals(var.getElement(0), 5.0, 0.0);    assertEquals(var.getElement(1), 7.0, 0.0);    assertEquals(var.getElement(2), 9.0, 0.0);",./CodexTest_0_4_5.java,weka_1
"    double[] var = {2.3, 1.2, 5.0};    AlgVector var = new AlgVector(data);    AlgVector var = new AlgVector(data);    AlgVector var = var.add(v2);    assertEquals(""Length differs"", var.length, var.numElements());    for (int i = 0; i < var.length; i++)      assertEquals((i+1) + "". value differs"", data[i] + data[i], var.getElement(i));",./CodexTest_0_3_2.java,weka_1
"    AlgVector var = new AlgVector(new double[]{2, 3, 4});    AlgVector var = new AlgVector(new double[]{1, 2, 3});    AlgVector var = var.add(v2);    assertEquals(""Length differs"", 3, var.numElements());    assertEquals(""Element 1 differs"", 3, var.getElement(0), 0.00001);    assertEquals(""Element 2 differs"", 5, var.getElement(1), 0.00001);    assertEquals(""Element 3 differs"", 7, var.getElement(2), 0.00001);",./CodexTest_0_4_1.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1, 2, 3});    AlgVector var = new AlgVector(new double[]{4, 5, 6});    AlgVector var = var.add(v2);    assertEquals(""Length differs"", var.numElements(), var.numElements());    for (int i = 0; i < var.numElements(); i++)      assertEquals((i+1) + "". value differs"", var.getElement(i) + var.getElement(i), var.getElement(i));",./CodexTest_0_3_10.java,weka_1
"	AlgVector var = new AlgVector(2);	var.setElement(0, 5);	var.setElement(1, 4);	AlgVector var = new AlgVector(2);	var.setElement(0, 2);	var.setElement(1, 1);	AlgVector var = new AlgVector(2);	var.setElement(0, 7);	var.setElement(1, 5);	AlgVector var = var.add(m2);	assertEquals(var, result);",./CodexTest_0_9_8.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1, 2, 3});    AlgVector var = new AlgVector(new double[]{4, 5, 6});    AlgVector var = var.add(w);    assertEquals(""Length differs"", 3, var.numElements());    assertEquals(""Value 1 differs"", 5, var.getElement(0), 1e-15);    assertEquals(""Value 2 differs"", 7, var.getElement(1), 1e-15);    assertEquals(""Value 3 differs"", 9, var.getElement(2), 1e-15);",./CodexTest_0_6_7.java,weka_1
"    AlgVector var = new AlgVector(2);    AlgVector var = new AlgVector(2);    var.setElement(0, 1.0);    var.setElement(1, 1.0);    var.setElement(0, 1.0);    var.setElement(1, 1.0);    AlgVector var = var.add(v2);    assertEquals(""Sum differs"", 2.0, var.getElement(0));    assertEquals(""Sum differs"", 2.0, var.getElement(1));",./CodexTest_0_6_2.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1, 2, 3, 4});    AlgVector var = new AlgVector(new double[]{10, 20, 30, 40});    var.add(v2);    AlgVector var = new AlgVector(new double[]{11, 22, 33, 44});    assertEquals(""Result differs"", var, v1);",./CodexTest_0_5_9.java,weka_1
"    AlgVector var = new AlgVector(new double[]{0, 2, 4});    AlgVector var = new AlgVector(new double[]{2, 0, 2});    AlgVector var = new AlgVector(new double[]{2., 2., 6.});    assertEquals(""Wrong addition result"", var, var.add(b));",./CodexTest_0_9_10.java,weka_1
"    AlgVector var = new AlgVector(new double[]{1, 2, 3});    AlgVector var = new AlgVector(new double[]{4, 5, 6});    AlgVector var = var.add(b);    assertEquals(""Length differs"", var.numElements(), var.numElements());    for (int i = 0; i < var.numElements(); i++)      assertEquals((i+1) + "". value differs"", var.getElement(i) + var.getElement(i), var.getElement(i));",./CodexTest_0_2_6.java,weka_1
"    int var = 3;    int var = 10;    int var = 3;    Instances var = new Instances(""Test"", 				    new FastVector(numAtt), numInst);    for (int i = 0; i < numAtt; i++) {      if (i == var - 1) {	var.insertAttributeAt(new Attribute(""Att"" + i, numClasses), i);      } else {	var.insertAttributeAt(new Attribute(""Att"" + i), i);      }    }    var.insertAttributeAt(new Attribute(""Class"", numClasses), numAtt);    var.setClassIndex(numAtt);    double[] var = new double[numAtt];    for (int i = 0; i < numInst; i++) {      for (int j = 0; j < numAtt; j++) {	values[j] = i + j;      }      var.add(new DenseInstance(1.0, values));    }    AlgVector var = new AlgVector(values);    try {      Instance inst = var.getAsInstance(var, new Random(1));      assertEquals(""Number of attributes differ"", var, inst.numAttributes());      for (int i = 0; i < numAtt; i++) {	if (i == var - 1) {	  assertEquals(""Value differs"", (int) inst.value(i), 1);	} else {	  assertEquals(""Value differs"", inst.value(i), i + i);	}      }    } catch (Exception ex) {      fail(""Exception: "" + ex.getMessage());    }",./CodexTest_0_4_4.java,weka_2
    	        assertNotNull(new AlgVector(3));,./CodexTest_0_9_5.java,weka_2
"		double[] var = { 2.3, 1.2, 5.0 };		AlgVector var = new AlgVector(data);		Random var = new Random(1);		try {			Instance inst = var.getAsInstance(null, random);			assertEquals(1.2, inst.value(1), 1e-15);		} catch (Exception e) {			e.printStackTrace();		}",./CodexTest_0_6_6.java,weka_2
"    AlgVector var = new AlgVector(new double[]{1.0, 2.0, 3.0});    try {      var.getAsInstance(null, null);      fail(""Exception expected, but not thrown"");    } catch (Exception ex) {      // expected    }",./CodexTest_0_5_4.java,weka_2
    // GWT.isClient() should always be false if running with java -Dgwt.args=...    assertFalse(GWT.isClient());,./CodexTest_0_9_3.java,gwt_1
        assertTrue(GWT.isClient());,./CodexTest_0_3_1.java,gwt_1
"    assertEquals(true, GWT.isClient());",./CodexTest_0_8_1.java,gwt_1
        assertTrue(GWT.isClient());,./CodexTest_0_2_2.java,gwt_1
    assertTrue(GWT.isClient());,./CodexTest_0_2_1.java,gwt_1
    if (!GWT.isClient()) {      // TODO(user): deferred binding failure for requirement      // com.google.gwt.user.client.ui.Widget      return;    }    assertTrue(GWT.isClient());,./CodexTest_0_6_1.java,gwt_1
    assertFalse(GWT.isClient());,./CodexTest_0_4_1.java,gwt_1
        assertFalse(GWT.isClient());,./CodexTest_0_6_2.java,gwt_1
      // Test if the method works well in your situation      assertTrue(GWT.isClient());,./CodexTest_0_8_2.java,gwt_1
    boolean isClient;    if(GWT.isClient()) {      var = true;    } else {      var = false;    }    assertFalse(isClient);,./CodexTest_0_8_3.java,gwt_1
    try {      Ints.min(null);      fail();    } catch (NullPointerException expected) {    },./CodexTest_0_7_4.java,guava_2
"		HashCode var = HashCode.fromInt(0x1234);		byte[] var = new byte[8];		assertEquals(1, var.writeBytesTo(var, 2, 8));		byte[] var = { 0, 0, 0x12, 0x34, 0, 0, 0, 0 };		assertTrue(Arrays.equals(var, dest));",./CodexTest_0_9_3.java,guava_2
"    byte[] var = new byte[4];    HashCode var = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);    int var = var.writeBytesTo(var, 0, var.length);    assertEquals(4, bytesWritten);    assertEquals(var.asBytes()[0], dest[0]);    assertEquals(var.asBytes()[1], dest[1]);    assertEquals(var.asBytes()[2], dest[2]);    assertEquals(var.asBytes()[3], dest[3]);",./CodexTest_0_3_1.java,guava_2
"    byte[] var = new byte[4];    int var = 1;    int var = 3;    HashCode var = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);    int var = var.writeBytesTo(var, var, maxLength);    assertEquals(var, actualLength);    assertEquals(0, dest[0]);    assertEquals(0x9b, dest[1] & 0xff);    assertEquals(0x98, dest[2] & 0xff);    assertEquals(0x58, dest[3] & 0xff);",./CodexTest_0_3_4.java,guava_2
"    byte[] var = new byte[3];    int var = HashCode.fromInt(0x12345678).writeBytesTo(var, 0, var.length);    assertEquals(3, written);    assertEquals(0x12, dest[0]);    assertEquals(0x34, dest[1]);    assertEquals(0x56, dest[2]);",./CodexTest_0_2_1.java,guava_2
"    byte[] var = new byte[10];    byte[] var = new byte[10];    HashCode var = Hashing.sha1().hashLong(42L);    System.arraycopy(var.asBytes(), 0, var, 0, 5);    int var = var.writeBytesTo(var, 0, 5);    assertEquals(5, writtenBytes);    assertEquals(var, dest);",./CodexTest_0_4_8.java,guava_2
"    for (long i = 0; i < 1000000; i++) {      HashCode hashCode = Hashing.goodFastHash(64)          .hashLong(i);      assertEquals(Long.valueOf(i).hashCode(), hashCode.asInt());    }",./CodexTest_0_8_8.java,guava_2
"    HashCode var = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);    HashCode var = HashCode.fromBytes(BaseEncoding.base16().lowerCase().decode(var.toString()));    assertEquals(var, hash2);",./CodexTest_0_6_1.java,guava_2
"        assertTrue(Arrays.equals(new int[] { (int) 0 }, new int[] { (int) 0 }));        assertFalse(Arrays.equals(new int[] { (int) 1 }, new int[] { (int) 0 }));        assertFalse(Arrays.equals(new int[] { (int) 0 }, new int[] { (int) 1 }));        assertFalse(Arrays.equals(new int[] { (int) 1 }, new int[] { (int) 2 }));",./CodexTest_0_9_10.java,guava_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_5_1.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 1.0e-12);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_7_6.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNorm(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_9_7.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_7_5.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0, Vector1D.distance(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNorm(), Vector1D.distance(var, v2), 1.0e-12);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_9_1.java,math_2
"        final Vector1D var = new Vector1D(1);        final Vector1D var = new Vector1D(4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(1), new Vector1D(1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_9_5.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_7_1.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distance(var, v2), 1.0e-12);",./CodexTest_0_9_6.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0, Vector1D.distance(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNorm(), Vector1D.distance(var, v2), 1.0e-12);",./CodexTest_0_3_1.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_0_1.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_8_6.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0, Vector1D.distance(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNorm(), Vector1D.distance(var, v2), 1.0e-12);",./CodexTest_0_7_3.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_5_3.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0 * 5.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_8_4.java,math_2
"    Vector1D var = new Vector1D(1);    Vector1D var = new Vector1D(-4);    Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);    Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_8_8.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 0);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 0);",./CodexTest_0_6_1.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_7_2.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(25.0, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_9_2.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_5_2.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0, Vector1D.distanceSq(var, v2), 0);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 0);",./CodexTest_0_6_2.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0, Math.abs(Vector1D.distanceSq(var, v2) - 25), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_8_2.java,math_2
"      Vector1D var = new Vector1D(1);      Vector1D var = new Vector1D(-4);      Assert.assertEquals(5.0 * 5.0, Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_9_10.java,math_2
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distanceSq(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(25, Vector1D.distanceSq(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNormSq(), Vector1D.distanceSq(var, v2), 1.0e-12);",./CodexTest_0_8_3.java,math_2
        Path var = new Path();        Path var = new Path();        assertTrue(var.equals(p2));,./CodexTest_0_4_4.java,graphstream_2
"        Path var = new Path();        Assert.assertEquals(var, p);",./CodexTest_0_9_3.java,graphstream_2
"        Path var = new Path();        Path var = new Path();        assertEquals(var, p2);        assertEquals(var.hashCode(), var.hashCode());",./CodexTest_0_6_6.java,graphstream_2
"        List<String> var = new ArrayList<String>();        var.add(""foo"");        assertTrue(var.contains(""foo""));        assertFalse(var.contains(""bar""));",./CodexTest_0_3_5.java,jdk_2
        List<Integer> var = new ArrayList<Integer>();        for (int i = -2; i < 3; i++) {            var.add(i);        }        assertTrue(var.contains(0));        assertTrue(var.contains(-2));        assertTrue(var.contains(2));        assertFalse(var.contains(3));        assertFalse(var.contains(-3));,./CodexTest_0_4_4.java,jdk_2
"        ArrayList<String> var = new ArrayList<String>();        var.add(""a"");        var.add(""b"");        assertTrue(var.contains(""a""));        assertFalse(var.contains(""c""));",./CodexTest_0_7_4.java,jdk_2
"        // given        List<String> var = new LinkedList<>();        var.add(""item1"");        var.add(""item2"");        // when        boolean var = var.contains(""item1"");        // then        assertTrue(result);",./CodexTest_0_7_8.java,jdk_2
"        // given        List<String> var = new ArrayList<>();        var.add(""A"");        // when        boolean var = var.contains(""A"");        // then        assertTrue(result);",./CodexTest_0_5_5.java,jdk_2
"        Random var = new Random();        for (int i = 0; i < 100; i++) {            int len = var.nextInt(100);            List<Integer> list = new ArrayList<Integer>(len);            for (int j = 0; j < len; j++) {                list.add(j);            }            Collections.shuffle(list, random);            for (int j = 0; j < len; j++) {                assertTrue(""list should contain value "" + j, list.contains(j));            }        }",./CodexTest_0_7_1.java,jdk_2
"        // given        List<Object> var = new ArrayList<>();        var.add(""Y"");        var.add(""N"");        // when        boolean var = var.contains(""Y"");        // then        assertTrue(result);",./CodexTest_0_8_1.java,jdk_2
"        // given        List<String> var = new ArrayList<String>();        var.add(""a"");        var.add(""b"");        var.add(""c"");        // when        boolean var = var.contains(""a"");        // then        assertTrue(result);",./CodexTest_0_4_2.java,jdk_2
"        List<String> var = new ArrayList<String>();        var.add(""a"");        var.add(""b"");        assertTrue(var.contains(""a""));        assertTrue(var.contains(""b""));        assertFalse(var.contains(""c""));        var.add(null);        assertTrue(var.contains(null));        assertFalse(var.contains(new Object()));",./CodexTest_0_8_6.java,jdk_2
"        // given        List<String> var = new ArrayList<String>();        var.add(""a"");        var.add(""b"");        // when        boolean var = var.contains(""a"");        // then        assertTrue(result);",./CodexTest_0_7_3.java,jdk_2
"        // given        List<String> var = new ArrayList<>();        var.add(""a"");        var.add(""b"");        var.add(""c"");        // when        boolean var = var.contains(""b"");        // then        assertTrue(result);",./CodexTest_0_4_3.java,jdk_2
"        // given        String var = ""element"";        String var = ""otherElement"";        Set<String> var = new HashSet<String>();        var.add(element);        // when        boolean var = var.contains(element);        // then        assertTrue(result);",./CodexTest_0_5_3.java,jdk_2
"        // given        List<String> var = Arrays.asList("""");        // when        boolean var = var.contains(null);        // then        assertFalse(result);",./CodexTest_0_8_4.java,jdk_2
        List<Integer> var = new ArrayList<Integer>();        assertFalse(var.contains(null));        var.add(null);        assertTrue(var.contains(null));,./CodexTest_0_6_1.java,jdk_2
"        // given        LinkedList<String> var = new LinkedList<>();        // when        boolean var = var.contains(""xyz"");        // then        assertFalse(result);",./CodexTest_0_7_9.java,jdk_2
        List<Integer> var = new ArrayList<Integer>();        for (int i = -2; i < 3; i++) {            var.add(i);        }        for (int i = -2; i < 3; i++) {            assertTrue(var.contains(i));        }        assertTrue(!var.contains(5));,./CodexTest_0_3_6.java,jdk_2
"        List<String> var = Arrays.asList(""a"",""b"",""c"");        assertTrue(var.contains(""b""));        assertFalse(var.contains(""d""));",./CodexTest_0_6_2.java,jdk_2
"        List<String> var = new ArrayList<String>();        assertFalse(var.contains(null));        var.add(null);        assertTrue(var.contains(null));        assertFalse(var.contains(""foo""));        var.add(""foo"");        assertTrue(var.contains(""foo""));",./CodexTest_0_6_4.java,jdk_2
"        // given        List<String> var = new ArrayList<String>();        var.add(""a"");        var.add(""b"");        var.add(""c"");        // when        boolean var = var.contains(""d"");        // then        assertFalse(result);",./CodexTest_0_5_9.java,jdk_2
"        Object[] var = { ""A"", ""B"", ""C"", ""D"", ""E"", ""F"" };        ArrayList<Object> var = new ArrayList<>();        for (Object s : a) {            vavar.add(s);        }        Object[] var = { ""B"", ""C"", ""D"", ""E"", ""F"" };        assertEquals(""A"", vavar.remove(0));        assertEquals(Arrays.asList(r), l);        assertEquals(""F"", vavar.remove(4));        assertEquals(Arrays.asList(""B"", ""C"", ""D"", ""E""), l);        assertEquals(""B"", vavar.remove(0));        assertEquals(Arrays.asList(""C"", ""D"", ""E""), l);        assertEquals(""E"", vavar.remove(2));        assertEquals(Arrays.asList(""C"", ""D""), l);        assertEquals(""C"", vavar.remove(0));        assertEquals(Arrays.asList(""D""), l);        assertEquals(""D"", vavar.remove(0));        assertEquals(Arrays.asList(), l);",./CodexTest_0_4_4.java,jdk_1
"        ArrayList<Integer> var = new ArrayList<Integer>();        var.add(1);        var.add(2);        var.add(3);        var.add(4);        var.add(5);        assertEquals(5, var.size());        assertEquals(1, (int) var.remove(0));        assertEquals(4, var.size());        assertEquals(2, (int) var.remove(0));        assertEquals(3, (int) var.remove(0));        assertEquals(4, (int) var.remove(0));        assertEquals(5, (int) var.remove(0));        assertEquals(0, var.size());",./CodexTest_0_5_1.java,jdk_1
"        Object[] var = new Object[]{1, 2, 3, 4, 5};        ArrayList<Object> var = new ArrayList<Object>(Arrays.asList(objects));        assertEquals(5, var.size());        assertEquals(1, var.remove(0));        assertEquals(4, var.size());        assertEquals(2, var.remove(0));        assertEquals(3, var.remove(var.size() - 1));        var = new Object[1000];        for (int i = 0; i < var.length; i++) {            objects[i] = i;        }        var = new ArrayList<Object>(Arrays.asList(objects));        for (int i = var.size() - 1; i >= 0; i--) {            assertEquals(i, var.remove(i));        }",./CodexTest_0_7_5.java,jdk_1
        List<Integer> var = new ArrayList<Integer>();        var.remove(0);,./CodexTest_0_9_1.java,jdk_1
"        ArrayList<String> var = new ArrayList<>();        var.add(""0"");        var.add(""1"");        var.add(""2"");        var.add(""3"");        var.add(""4"");        var.add(""5"");        var.add(""6"");        var.add(""7"");        var.add(""8"");        var.add(""9"");        var.remove(0);        assertEquals(""1"", var.get(0));        assertEquals(""2"", var.get(1));        assertEquals(""3"", var.get(2));        assertEquals(""4"", var.get(3));        assertEquals(""5"", var.get(4));        assertEquals(""6"", var.get(5));        assertEquals(""7"", var.get(6));        assertEquals(""8"", var.get(7));        assertEquals(""9"", var.get(8));",./CodexTest_0_5_8.java,jdk_1
        ArrayList<Integer> var = new ArrayList<>();        var.add(new Integer(2));        var.trimToSize();        var.clear();        var.add(new Integer(3));        var.trimToSize();        var.clear();,./CodexTest_0_9_5.java,jdk_1
        Vector<Integer> var = new Vector<Integer>();        var.add(1);        var.add(2);        var.add(3);        var.add(4);        var.remove(new Integer(3));        var.remove(new Integer(1));        var.remove(new Integer(2));        var.remove(new Integer(4));        assertTrue(var.isEmpty());,./CodexTest_0_7_1.java,jdk_1
"        Object[] var = { ""A"", ""B"", ""C"", ""D"" };        ArrayList<Object> var = new ArrayList<>(Arrays.asList(a));        assertEquals(""B"", var.remove(1));        assertEquals(3, var.size());        assertEquals(""A"", var.remove(0));        assertEquals(2, var.size());        assertEquals(""D"", var.remove(1));        assertEquals(1, var.size());        assertEquals(""C"", var.remove(0));        assertEquals(0, var.size());",./CodexTest_0_5_7.java,jdk_1
"        ArrayList<Integer> var = new ArrayList<>(Arrays.asList(1, 2, 3));        assertEquals(Integer.valueOf(1), var.remove(0));        assertEquals(Arrays.asList(2, 3), list);        assertEquals(Integer.valueOf(2), var.remove(0));        assertEquals(Arrays.asList(3), list);        assertEquals(Integer.valueOf(3), var.remove(0));        assertEquals(Collections.emptyList(), list);        try {            var.remove(0);            fail();        } catch (IndexOutOfBoundsException expected) {        }",./CodexTest_0_3_1.java,jdk_1
"        List<String> var = new ArrayList<>();        var.add(""foo"");        var.add(""bar"");        assertEquals(""foo"", var.remove(0));        assertEquals(""bar"", var.remove(0));        assertTrue(var.isEmpty());",./CodexTest_0_6_8.java,jdk_1
        final int var = 10;        List<Integer> var = new ArrayList<Integer>(SIZE);        for (int i = 0; i < SIZE; i++) {            var.add(i);        }        for (int i = 0; i < SIZE; i++) {            var.remove(0);        }        assertTrue(var.isEmpty());,./CodexTest_0_6_5.java,jdk_1
"        String[] var = {""1"", ""2"", ""3"", ""4"", ""5"", ""6""};        List<String> var = new ArrayList<String>(Arrays.asList(data));        var.remove(1);        assertEquals(Arrays.asList(new String[]{""1"", ""3"", ""4"", ""5"", ""6""}), list);",./CodexTest_0_6_9.java,jdk_1
"        ArrayList<Integer> var = new ArrayList<>();        var.add(1);        var.add(2);        var.add(3);        var.add(4);        var.add(5);        assertEquals(Integer.valueOf(2), var.remove(1));        assertEquals(Integer.valueOf(1), var.get(0));        assertEquals(Integer.valueOf(3), var.get(1));        assertEquals(Integer.valueOf(4), var.get(2));        assertEquals(Integer.valueOf(5), var.get(3));",./CodexTest_0_4_2.java,jdk_1
"        ArrayList<Integer> var = new ArrayList<>();        var.add(1);        var.add(null);        var.add(3);        assertEquals(Integer.valueOf(null), var.remove(1));",./CodexTest_0_7_3.java,jdk_1
"        ArrayList<String> var = new ArrayList<String>();        var.add(""foo"");        var.add(""bar"");        var.add(""baz"");        var.add(""qux"");        assertEquals(""bar"", var.remove(1));        assertEquals(""baz"", var.remove(1));        assertEquals(""foo"", var.remove(0));        assertEquals(""qux"", var.remove(0));        assertEquals(0, var.size());",./CodexTest_0_4_3.java,jdk_1
"        final int var = 10;        final int var = 5;        final List<Integer> var = new ArrayList<Integer>();        for (int i = 0; i < size; i++) {            var.add(i);        }        var.remove(range);        assertEquals(size - 1, var.size());        for (int i = 0; i < range; i++) {            assertEquals(i, var.get(i).intValue());        }        for (int i = range; i < var - 1; i++) {            assertEquals(i + 1, var.get(i).intValue());        }",./CodexTest_0_3_4.java,jdk_1
"        int var = 100;        List<Integer> var = new ArrayList<>();        Arrays.asList(1, 2, 3, 4).forEach(i -> var.add(i));        Integer var = 5;        assertEquals(var.size(), size);        assertEquals(var.remove(var.size() - 1), val);        assertEquals(var.size() + 1, size);",./CodexTest_0_8_4.java,jdk_1
"        ArrayList<String> var = new ArrayList<>(Arrays.asList(""1"", ""2"", ""3"", ""4"", ""5""));        String var = var.remove(2);        assertEquals(""3"", removed);        assertEquals(Arrays.asList(""1"", ""2"", ""4"", ""5""), list);",./CodexTest_0_4_8.java,jdk_1
"        Object var = new Object();        Object var = new Object();        Object var = new Object();        ArrayList<Object> var = new ArrayList<Object>();        var.add(x);        var.add(y);        var.add(z);        var.remove(y);        assertEquals(2, var.size());        assertEquals(var, var.get(0));        assertEquals(var, var.get(1));",./CodexTest_0_5_4.java,jdk_1
"        ArrayList<Integer> var = new ArrayList<>();        var.add(1);        var.add(2);        var.add(3);        Assert.assertEquals(new Integer(3), var.remove(2));        Assert.assertEquals(2, var.size());        Assert.assertEquals(new Integer(1), var.get(0));        Assert.assertEquals(new Integer(2), var.get(1));",./CodexTest_0_7_10.java,jdk_1
"        Object[] var = new Object[2];        a[1] = null;        List<Object> var = Arrays.asList(a);        assertNull(var.remove(1));        assertEquals(1, var.size());        assertEquals(Arrays.asList(new Object[] { null }), list);",./CodexTest_0_6_10.java,jdk_1
"    Object var = new Object();    List<Object> var = Arrays.asList(expected);    assertSame(var, var.get(0));",./CodexTest_0_8_8.java,jdk_1
"        ArrayList<Integer> var = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4));        assertEquals(2, var.remove(1).intValue());        assertEquals(Arrays.asList(1, 3, 4), list);        var.remove(0);        assertEquals(Arrays.asList(3, 4), list);        var.remove(1);        assertEquals(Arrays.asList(3), list);        var.remove(0);        assertEquals(Arrays.asList(), list);",./CodexTest_0_3_2.java,jdk_1
"        List<String> var = new ArrayList<>();        var.add(""a"");        var.add(""b"");        var.add(""c"");        var.add(""d"");        var.add(""e"");        var.add(""f"");        var.add(""g"");        var.add(""h"");        assertEquals(""a"", var.remove(0));        assertEquals(""b"", var.remove(0));        assertEquals(""c"", var.remove(0));        assertEquals(""d"", var.remove(0));        assertEquals(""e"", var.remove(0));        assertEquals(""f"", var.remove(0));        assertEquals(""g"", var.remove(0));        assertEquals(""h"", var.remove(0));        assertEquals(0, var.size());        var.add(""a"");        var.add(""b"");        var.add(""c"");        var.add(""d"");        var.add(""e"");        var.add(""f"");        var.add(""g"");        var.add(""h"");        assertEquals(""a"", var.remove(0));        assertEquals(""b"", var.remove(0));        assertEquals(""c"", var.remove(0));        assertEquals(""d"", var.remove(0));        assertEquals(""e"", var.remove(0));        assertEquals(""f"", var.remove(0));        assertEquals(""g"", var.remove(0));        assertEquals(""h"", var.remove(0));        assertEquals(0, var.size());",./CodexTest_0_6_1.java,jdk_1
"        ArrayList<Integer> var = new ArrayList<Integer>();        var.add(new Integer(1));        var.add(new Integer(2));        var.add(new Integer(3));        var.add(new Integer(4));        assertEquals(new Integer(2), var.remove(1));        assertEquals(new Integer(1), var.get(0));        assertEquals(new Integer(3), var.get(1));        assertEquals(new Integer(4), var.get(2));        assertEquals(3, var.size());",./CodexTest_0_8_9.java,jdk_1
"        Object[] var = {1, 2, 3, 4, 5};        List<Object> var = new ArrayList<>(Arrays.asList(elements));        var.remove(2);        Object[] var = {1, 2, 4, 5};        assertArrayEquals(var, var.toArray());",./CodexTest_0_5_2.java,jdk_1
        Vector<Integer> var = new Vector<Integer>();        var.add(new Integer(0));        var.add(new Integer(1));        var.add(new Integer(2));        var.add(new Integer(3));        var.add(new Integer(4));        var.add(new Integer(5));        var.add(new Integer(6));        var.add(new Integer(7));        var.add(new Integer(8));        var.add(new Integer(9));        var.remove(new Integer(5));        for (int i = 0; i < var.size(); i++) {            if (i < 5) {                assertTrue(var.get(i).equals(new Integer(i)));            } else {                assertTrue(var.get(i).equals(new Integer(i + 1)));            }        },./CodexTest_0_6_7.java,jdk_1
"        List<Integer> var = new ArrayList<>(Arrays.asList(1, 2, 3));        var.remove(Integer.valueOf(2));        assertTrue(var.equals(Arrays.asList(1, 3)));",./CodexTest_0_6_2.java,jdk_1
"        ArrayList<String> var = new ArrayList<String>();        var.add(""A"");        var.add(""B"");        var.add(""C"");        var.add(""D"");        var.add(""E"");        assertEquals(""A"", var.remove(0));        assertEquals(""B"", var.remove(0));        assertEquals(""C"", var.remove(0));        assertEquals(""D"", var.remove(0));        assertEquals(""E"", var.remove(0));",./CodexTest_0_5_9.java,jdk_1
"        ArrayList<String> var = new ArrayList<String>();        var.add(""Hello"");        var.add(""World"");        assertEquals(""Hello"", var.remove(0));        assertEquals(""World"", var.get(0));",./CodexTest_0_6_3.java,jdk_1
"        int var = 9;        int var = var / 2;        List<Integer> var = new ArrayList<Integer>(n);        for (int i = 0; i < n; ++i) {            var.add(i);        }        int var = var.remove(removedIndex);        assertEquals(n - 1, var.size());        assertEquals(var, removed);        for (int i = 0; i < n; ++i) {            if (i < removedIndex) {                assertEquals(new Integer(i), var.get(i));            } else if (i > removedIndex) {                assertEquals(new Integer(i), var.get(i - 1));            }        }",./CodexTest_0_8_5.java,jdk_1
"    assertEquals(""Expected UncaughtExceptionHandler not set"", GWT.getUncaughtExceptionHandler(), null);",./CodexTest_0_6_8.java,gwt_2
    GWT.setUncaughtExceptionHandler(null);    assertNull(GWT.getUncaughtExceptionHandler());,./CodexTest_0_8_6.java,gwt_2
"    try {      throw new Exception();    } catch (Exception e) {      assertEquals(e.getClass(), GWT.getUncaughtExceptionHandler().getClass());    }",./CodexTest_0_9_10.java,gwt_2
"        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        var.source(var, XContentType.JSON);",./CodexTest_0_4_4.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(jsonMap);        assertEquals(var, var.sourceAsMap());",./CodexTest_0_1_4.java,elasticsearch_2
"        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"").source(var, XContentType.CBOR);        assertEquals(XContentType.CBOR, var.getContentType());        assertEquals(var, var.sourceAsMap());",./CodexTest_0_5_8.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(source);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_5_5.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(var, XContentType.JSON);        assertEquals(XContentType.JSON, var.getContentType());        String var = ""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"";        assertEquals(var, var.source().utf8ToString());",./CodexTest_0_5_7.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"");        Map<String, Object> var = Collections.singletonMap(""field"", ""value"");        var.source(var, XContentType.JSON);        assertEquals(var, var.sourceAsMap());",./CodexTest_0_6_6.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        String var = ""{ \""field\"" : \""value\"" }"";        var.source(var, XContentType.JSON);        assertEquals(var, var.source().utf8ToString());",./CodexTest_0_2_7.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        var.source(Collections.singletonMap(""field"", ""value""));        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_3_1.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(var, XContentType.JSON);        assertEquals(var, var.sourceAsMap());",./CodexTest_0_2_9.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(source);        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", var.source().utf8ToString());",./CodexTest_0_5_6.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(jsonMap);        assertEquals(var, var.sourceAsMap());",./CodexTest_0_1_1.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(var, XContentType.JSON);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_0_1.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(map);        String var = var.source().utf8ToString();        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", sSource);",./CodexTest_0_4_2.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(var, XContentType.JSON);        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", var.source().utf8ToString());        assertEquals(XContentType.JSON, var.getContentType());",./CodexTest_0_3_4.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(jsonMap);        assertEquals(var, var.sourceAsMap());",./CodexTest_0_1_3.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(var, XContentType.JSON);        assertEquals(var, var.sourceAsMap());",./CodexTest_0_3_7.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        var.source(""{ \""field\"": \""value\"" }"", XContentType.JSON);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_4_8.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(var, XContentType.JSON);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_1_2.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(source);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_2_4.java,elasticsearch_2
"        IndexRequest var = new IndexRequest();        String var = ""{ \""field1\"" : \""value1\""}"";        var.source(var, XContentType.JSON);        assertEquals(var, var.source().utf8ToString());",./CodexTest_0_3_3.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(var, XContentType.JSON);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_3_2.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(var, XContentType.JSON);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_3_6.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        var.source(var, XContentType.JSON);        assertEquals(""{\""field\"":\""value\""}"", var.source().utf8ToString());",./CodexTest_0_6_2.java,elasticsearch_2
"        Map<String, Object> var = new HashMap<>();        var.put(""field"", ""value"");        IndexRequest var = new IndexRequest(""index"", ""type"");        var.source(var, XContentType.JSON);        assertEquals(var, var.sourceAsMap());",./CodexTest_0_6_4.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(var, XContentType.JSON);        assertEquals(""{\""field1\"":\""value1\"",\""field2\"":\""value2\""}"", var.source().utf8ToString());",./CodexTest_0_2_5.java,elasticsearch_2
"        IndexRequest var = new IndexRequest(""index"", ""type"", ""id"");        Map<String, Object> var = new HashMap<>();        var.put(""field1"", ""value1"");        var.put(""field2"", ""value2"");        var.source(var, XContentType.JSON);        assertEquals(XContentType.JSON.mediaTypeWithoutParameters(), var.getContentType());        assertEquals(var, var.sourceAsMap());",./CodexTest_0_2_8.java,elasticsearch_2
"        double[] var = { 1, 2, 3, 4, 5, 6 };        double[][] var = { { 1, 2, 3, 4, 5, 6 }, { 2, 3, 4, 5, 6, 7 } };        DoubleFactory2D var = DoubleFactory2D.dense;        DoubleMatrix1D var = new DenseDoubleMatrix1D(data);        DoubleMatrix2D var = var.make(arrMatrix);        DoubleMatrix2D var = var.like2D(var.rows(), var.columns());        var = var.assign(matrix);        System.out.println(matrix);",./CodexTest_0_9_6.java,colt_2
"        DoubleMatrix2D var = new DenseDoubleMatrix2D(            new double[][] { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} } );        assertEquals(var.get(0, 0), 1, 0);        assertEquals(var.get(1, 0), 4, 0);        assertEquals(var.get(2, 0), 7, 0);        assertEquals(var.get(0, 1), 2, 0);        assertEquals(var.get(1, 1), 5, 0);        assertEquals(var.get(2, 1), 8, 0);",./CodexTest_0_7_10.java,colt_2
"        int var = 22;        int var = 33;        DoubleMatrix2D var = new DenseDoubleMatrix2D(var, cols);        assertEquals(""Rows differ"", var, var.rows());        assertEquals(""Columns differ"", var, var.columns());",./CodexTest_0_7_2.java,colt_2
"			double[][] var = { 				{ 1, 2, 3, 4, 5, 6},				{ 2, 3, 4, 5, 6, 7}			};			DoubleMatrix2D var = DoubleFactory2D.dense.make(arrMatrix2);			DoubleMatrix2D var = var.zMult(var, null);			System.out.println(product);",./CodexTest_0_7_9.java,colt_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""true"");        // then        assertTrue(result);",./CodexTest_0_4_4.java,hibernate_2
"		// given		BooleanTypeDescriptor var = new BooleanTypeDescriptor();		// when		Boolean var = var.fromString(""true"");		// then		assertTrue(result);",./CodexTest_0_7_4.java,hibernate_2
"		// given		BooleanTypeDescriptor var = new BooleanTypeDescriptor();		// when		Boolean var = var.fromString(""N"");		// then		assertFalse(result);",./CodexTest_0_5_1.java,hibernate_2
"		assertFalse(BooleanTypeDescriptor.INSTANCE.fromString(""false""));",./CodexTest_0_7_8.java,hibernate_2
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Boolean var = var.fromString(""false"");    // then    assertFalse(result);",./CodexTest_0_7_6.java,hibernate_2
"        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        assertEquals("""", """", var.fromString(""""));",./CodexTest_0_9_7.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""false"");        // then        assertFalse(result);",./CodexTest_0_7_5.java,hibernate_2
"          assertFalse(BooleanTypeDescriptor.INSTANCE.fromString(""false""));",./CodexTest_0_9_1.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""N"");        // then        assertFalse(result);",./CodexTest_0_5_5.java,hibernate_2
        assertFalse(new BooleanTypeDescriptor().fromString(null));,./CodexTest_0_9_3.java,hibernate_2
"	String var = ""true"";	Boolean var = Boolean.TRUE;		String var = ""false"";	Boolean var = Boolean.FALSE;		assertEquals( ""\nReturned value did not match expected: "", var, var.toString() );	assertEquals( ""\nReturned value did not match expected: "", var, var.toString() );	assertFalse( ""\nReturned value did not match expected: "", var.equals( var ) );	assertTrue( ""\nReturned value did not match expected: "", var.equals( var ) );",./CodexTest_0_9_5.java,hibernate_2
"        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""true""));        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""false""));",./CodexTest_0_7_1.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""false"");        // then        assertFalse(result);",./CodexTest_0_9_6.java,hibernate_2
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Boolean var = var.fromString(""true"");    // then    assertTrue(result);",./CodexTest_0_6_6.java,hibernate_2
"        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        assertEquals(Boolean.TRUE, var.fromString(""true""));        assertEquals(Boolean.FALSE, var.fromString(""false""));",./CodexTest_0_4_7.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""true"");        // then        assertTrue(result);",./CodexTest_0_3_1.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""t"");        // then        assertTrue(result);",./CodexTest_0_6_8.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""false"");        // then        assertFalse(result);",./CodexTest_0_5_6.java,hibernate_2
"        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""true"");        // then        assertTrue(result);",./CodexTest_0_5_6.java,hibernate_2
        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(null);        // then        assertNull(result);,./CodexTest_0_5_6.java,hibernate_2
"    assertEquals(Boolean.TRUE, Boolean.valueOf( ""true"" ));    assertEquals(Boolean.FALSE, Boolean.valueOf( ""false"" ));",./CodexTest_0_8_1.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""true"");        // then        assertTrue(result);",./CodexTest_0_1_1.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""false"");        // then        assertFalse(result);",./CodexTest_0_0_1.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""false"");        // then        assertFalse(result);",./CodexTest_0_4_2.java,hibernate_2
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Boolean var = var.fromString(""true"");    // then    Assert.assertTrue(result);",./CodexTest_0_8_6.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""Y"");        // then        assertTrue(result);",./CodexTest_0_7_3.java,hibernate_2
"        assertTrue(new BooleanTypeDescriptor().fromString(""true""));        assertFalse(new BooleanTypeDescriptor().fromString(""false""));",./CodexTest_0_4_3.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""false"");        // then        assertFalse(result);",./CodexTest_0_3_4.java,hibernate_2
"        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        assertFalse(var.fromString(""N""));",./CodexTest_0_8_4.java,hibernate_2
"		// given		BooleanTypeDescriptor var = new BooleanTypeDescriptor();		// when		Boolean var = var.fromString(""false"");		// then		assertFalse(result);",./CodexTest_0_7_7.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""F"");        // then        assertFalse(result);",./CodexTest_0_1_2.java,hibernate_2
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Boolean var = var.fromString(""true"");    // then    assertTrue(result);",./CodexTest_0_5_4.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""true"");        // then        assertTrue(result);",./CodexTest_0_8_8.java,hibernate_2
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Boolean var = var.fromString(""false"");    // then    assertFalse(result);",./CodexTest_0_3_3.java,hibernate_2
"        assertTrue(Boolean.TRUE.equals(BooleanTypeDescriptor.INSTANCE.fromString(""true"")));        assertTrue(Boolean.FALSE.equals(BooleanTypeDescriptor.INSTANCE.fromString(""false"")));",./CodexTest_0_4_5.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""Y"");        // then        assertTrue(result);",./CodexTest_0_3_2.java,hibernate_2
"        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        assertEquals(Boolean.TRUE, var.fromString(""true""));        assertEquals(Boolean.FALSE, var.fromString(""false""));",./CodexTest_0_6_1.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""false"");        // then        assertFalse(result);",./CodexTest_0_8_9.java,hibernate_2
"         assertEquals(Boolean.TRUE, new BooleanTypeDescriptor().fromString(""true""));",./CodexTest_0_7_2.java,hibernate_2
,./CodexTest_0_7_2.java,hibernate_2
,./CodexTest_0_7_2.java,hibernate_2
,./CodexTest_0_7_2.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""true"");        // then        assertTrue(result);",./CodexTest_0_9_2.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""f"");        // then        assertFalse(result);",./CodexTest_0_4_1.java,hibernate_2
"        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        assertTrue(var.fromString(""true""));",./CodexTest_0_5_2.java,hibernate_2
"  	// given  	BooleanTypeDescriptor var = new BooleanTypeDescriptor();  	// when  	Boolean var = var.fromString(""1"");  	// then  	assertTrue(result);",./CodexTest_0_8_7.java,hibernate_2
"        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        assertTrue(var.fromString(""true""));        assertFalse(var.fromString(""false""));        assertNull(var.fromString(null));",./CodexTest_0_6_7.java,hibernate_2
"      // given      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // when      Boolean var = var.fromString(""N"");      // then      assertFalse(result);",./CodexTest_0_6_2.java,hibernate_2
"			BooleanTypeDescriptor var = new BooleanTypeDescriptor();			assertEquals(Boolean.TRUE, var.fromString(""true""));			assertEquals(Boolean.FALSE, var.fromString(""false""));",./CodexTest_0_8_2.java,hibernate_2
"		assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""true""));		assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""false""));",./CodexTest_0_8_3.java,hibernate_2
"        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""true""));        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""false""));        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""TRUE""));        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""FALSE""));        assertEquals(Boolean.TRUE, BooleanTypeDescriptor.INSTANCE.fromString(""1""));        assertEquals(Boolean.FALSE, BooleanTypeDescriptor.INSTANCE.fromString(""0""));",./CodexTest_0_6_3.java,hibernate_2
"		// given		BooleanTypeDescriptor var = new BooleanTypeDescriptor();		// when		Boolean var = var.fromString(""true"");		// then		assertTrue(result);",./CodexTest_0_4_6.java,hibernate_2
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Boolean var = var.fromString(""true"");        // then        assertTrue(result);",./CodexTest_0_8_5.java,hibernate_2
"    HashCode var = HashCode.fromLong(42L);    assertEquals(42, var.hashCode());",./CodexTest_0_3_5.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_7_4.java,guava_1
"        HashCode var = HashCode.fromLong(42);        assertEquals(42, var.hashCode());",./CodexTest_0_5_1.java,guava_1
"    HashCode var = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);    HashCode var = HashCode.fromBytes(BaseEncoding.base16().lowerCase().decode(var.toString()));    assertEquals(var, hash2);",./CodexTest_0_7_5.java,guava_1
"    HashCode var = HashCode.fromInt(42);    HashCode var = HashCode.fromInt(42);    assertEquals(var, hashCode2);    assertEquals(var.hashCode(), var.hashCode());",./CodexTest_0_9_1.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_5_5.java,guava_1
"    			HashCode var = HashCode.fromInt(42);    			assertEquals(42, var.hashCode());",./CodexTest_0_9_5.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_6_6.java,guava_1
"    assertEquals(42, HashCode.fromLong(42).hashCode());",./CodexTest_0_3_1.java,guava_1
"      HashCode var = HashCode.fromInt(42);      assertEquals(42, var.hashCode());",./CodexTest_0_5_6.java,guava_1
"    for (int i = 0; i < 100; i++) {      HashCode hashCode1 = HashCode.fromLong(i);      HashCode hashCode2 = HashCode.fromLong(i);      assertEquals(hashCode1, hashCode2);      assertTrue(hashCode1.equals(hashCode2));      assertTrue(hashCode1.hashCode() == hashCode2.hashCode());    }",./CodexTest_0_6_5.java,guava_1
"        HashCode var = HashCode.fromLong(42L);        assertEquals(42, var.hashCode());",./CodexTest_0_8_1.java,guava_1
"    HashCode var = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);    HashCode var = HashCode.fromBytes(BaseEncoding.base16().lowerCase().decode(var.toString()));    assertEquals(var, hash2);",./CodexTest_0_8_10.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_0_1.java,guava_1
"    HashCode var = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);    HashCode var = HashCode.fromLong(var.asLong());    assertEquals(var, hash2);",./CodexTest_0_9_4.java,guava_1
"    assertEquals(42, HashCode.fromLong(42).hashCode());",./CodexTest_0_7_3.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_4_3.java,guava_1
"    assertEquals(0, HashCode.fromLong(0).hashCode());    assertEquals(1, HashCode.fromLong(1).hashCode());    assertEquals(31, HashCode.fromLong(31).hashCode());    assertEquals(32, HashCode.fromLong(32).hashCode());    assertEquals(63, HashCode.fromLong(63).hashCode());    assertEquals(64, HashCode.fromLong(64).hashCode());    assertEquals(127, HashCode.fromLong(127).hashCode());    assertEquals(128, HashCode.fromLong(128).hashCode());    assertEquals(Integer.MAX_VALUE, HashCode.fromLong(Integer.MAX_VALUE).hashCode());    assertEquals(Integer.MIN_VALUE, HashCode.fromLong(Integer.MIN_VALUE).hashCode());    assertEquals(-1, HashCode.fromLong(-1).hashCode());    assertEquals(-32, HashCode.fromLong(-32).hashCode());    assertEquals(-63, HashCode.fromLong(-63).hashCode());    assertEquals(-64, HashCode.fromLong(-64).hashCode());    assertEquals(-127, HashCode.fromLong(-127).hashCode());    assertEquals(-128, HashCode.fromLong(-128).hashCode());    assertEquals(-129, HashCode.fromLong(-129).hashCode());    assertEquals(-Integer.MAX_VALUE, HashCode.fromLong(-Integer.MAX_VALUE).hashCode());    assertEquals(-Integer.MIN_VALUE, HashCode.fromLong(-Integer.MIN_VALUE).hashCode());",./CodexTest_0_3_4.java,guava_1
"        HashCode var = HashCode.fromLong(42);        assertEquals(42, var.hashCode());",./CodexTest_0_5_3.java,guava_1
"		HashCode var = HashCode.fromLong(42);		assertEquals(42, var.hashCode());",./CodexTest_0_8_4.java,guava_1
"    HashCode var = HashCode.fromInt(42);    assertEquals(42, var.hashCode());",./CodexTest_0_5_4.java,guava_1
"    HashCode var = Hashing.sha1().hashString(""foo"", Charsets.US_ASCII);    String var = var.toString();    HashCode var = HashCode.fromString(BaseEncoding.base16().lowerCase().encode(var.getBytes(Charsets.UTF_8)));    assertEquals(var, hash2);",./CodexTest_0_8_8.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_3_3.java,guava_1
"      HashCode var = HashCode.fromLong(42);      assertEquals(42, var.hashCode());",./CodexTest_0_3_2.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.asLong());",./CodexTest_0_6_1.java,guava_1
"    for (int shift = 0; shift < 64; shift += 2) {      long hash1 = 0x123456789abcdef0L + shift;      HashCode hash2 = Hashing.sha1().hashLong(hash1);      assertEquals(HashCode.fromLong(hash1), hash2);    }",./CodexTest_0_8_9.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_7_2.java,guava_1
"		HashCode var = HashCode.fromLong(42);		assertEquals(42, var.hashCode());",./CodexTest_0_4_1.java,guava_1
"    HashCode var = HashCode.fromLong(42);    assertEquals(42, var.hashCode());",./CodexTest_0_5_2.java,guava_1
"        HashCode var = HashCode.fromInt(42);        assertEquals(42, var.hashCode());",./CodexTest_0_8_7.java,guava_1
"    HashCode var = HashCode.fromLong(42L);    HashCode var = HashCode.fromLong(42L);    assertEquals(var, hashCode2);",./CodexTest_0_6_7.java,guava_1
"    HashCode var = HashCode.fromLong(42L);    assertEquals(42L, var.asLong());",./CodexTest_0_6_2.java,guava_1
"    HashCode var = HashCode.fromLong(0x1234567890ABCDEFL);    assertEquals(0x1234567890ABCDEFL, var.asLong());",./CodexTest_0_6_4.java,guava_1
"			HashCode var = HashCode.fromLong(42);			assertEquals(var, hashCode42);",./CodexTest_0_8_3.java,guava_1
    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Short var = var.toShort(null);    // then    assertNull(result);,./CodexTest_0_3_5.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(Short.valueOf((short) 0), result);",./CodexTest_0_4_4.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_7_4.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(Short.valueOf((short) -1), result);",./CodexTest_0_5_1.java,hibernate_1
        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(null);        // then        assertNull(result);,./CodexTest_0_7_8.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(0, var.intValue());",./CodexTest_0_7_6.java,hibernate_1
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Short var = var.toShort(false);    // then    assertEquals(0, var.shortValue());",./CodexTest_0_7_5.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(0, var.intValue());",./CodexTest_0_9_1.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(Boolean.TRUE);        // then        assertEquals(1, var.intValue());",./CodexTest_0_5_8.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(Short.valueOf((short)0), result);",./CodexTest_0_5_5.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(1, (short)result);",./CodexTest_0_9_3.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(Short.valueOf(result), Short.valueOf((short)1));",./CodexTest_0_7_1.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(0, var.intValue());",./CodexTest_0_9_6.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(Short.valueOf((short) 0), result);",./CodexTest_0_5_7.java,hibernate_1
      // given      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // when      Short var = var.toShort(null);      // then      assertNull(result);,./CodexTest_0_6_6.java,hibernate_1
"      // given      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // when      Short var = var.toShort(true);      // then      assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_4_7.java,hibernate_1
		// given		BooleanTypeDescriptor var = new BooleanTypeDescriptor();		// when		Short var = var.toShort(null);		// then		assertNull(result);,./CodexTest_0_3_1.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(0, var.shortValue());",./CodexTest_0_6_8.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(TRUE);        // then        assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_5_6.java,hibernate_1
"      // given      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // when      Short var = var.toShort(Boolean.TRUE);      // then      assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_8_1.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_1_1.java,hibernate_1
        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(null);        // then        assertNull(result);,./CodexTest_0_0_1.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(0, var.shortValue());",./CodexTest_0_4_2.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(Boolean.TRUE);        // then        assertEquals(new Short((short) 1), result);",./CodexTest_0_9_4.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(Short.valueOf((short)0), result);",./CodexTest_0_7_3.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(Short.valueOf((short) -1), result);",./CodexTest_0_4_3.java,hibernate_1
        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(null);        // then        assertNull(result);,./CodexTest_0_3_4.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(Boolean.TRUE);        // then        assertEquals(var.shortValue(), 1);",./CodexTest_0_5_3.java,hibernate_1
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Short var = var.toShort(false);    // then    assertEquals(Short.valueOf((short) -1), result);",./CodexTest_0_8_4.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(new Short((short)1), result);",./CodexTest_0_7_7.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(FALSE);        // then        assertEquals(Short.valueOf((short) 0), result);",./CodexTest_0_5_4.java,hibernate_1
"      // given      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // when      Short var = var.toShort(true);      // then      assertEquals(var, Short.valueOf((short)1));",./CodexTest_0_8_8.java,hibernate_1
        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(null);        // then        assertNull(result);,./CodexTest_0_3_3.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(Boolean.FALSE);        // then        assertEquals(new Short((short)0), result);",./CodexTest_0_4_5.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(Boolean.FALSE);        // then        assertEquals(Short.valueOf((short) 0), result);",./CodexTest_0_3_2.java,hibernate_1
"			// given			BooleanTypeDescriptor var = new BooleanTypeDescriptor();			// when			Short var = var.toShort(Boolean.TRUE);			// then			assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_6_1.java,hibernate_1
"    // given    BooleanTypeDescriptor var = new BooleanTypeDescriptor();    // when    Short var = var.toShort(false);    // then    assertEquals(Short.valueOf((short) 0), result);",./CodexTest_0_7_2.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(Boolean.TRUE);        // then        assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_4_1.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(1, var.shortValue());",./CodexTest_0_5_2.java,hibernate_1
        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(null);        // then        Assert.assertNull(result);,./CodexTest_0_7_9.java,hibernate_1
"      // given      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // when      Short var = var.toShort(Boolean.TRUE);      // then      assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_8_7.java,hibernate_1
        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(null);        // then        assertNull(result);,./CodexTest_0_6_7.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(Boolean.FALSE);        // then        assertEquals(Short.valueOf((short) -1), result);",./CodexTest_0_6_2.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_6_4.java,hibernate_1
"		// given		BooleanTypeDescriptor var = new BooleanTypeDescriptor();		// when		Short var = var.toShort(Boolean.FALSE);		// then		assertEquals(Short.valueOf((short)0), result);",./CodexTest_0_9_10.java,hibernate_1
"      // given      BooleanTypeDescriptor var = new BooleanTypeDescriptor();      // when      Short var = var.toShort(Boolean.FALSE);      // then      assertEquals((short) 0, var.shortValue());",./CodexTest_0_8_3.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(false);        // then        assertEquals(0, var.intValue());",./CodexTest_0_9_9.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(Short.valueOf((short)1), result);",./CodexTest_0_6_3.java,hibernate_1
"        // given        BooleanTypeDescriptor var = new BooleanTypeDescriptor();        // when        Short var = var.toShort(true);        // then        assertEquals(Short.valueOf((short) 1), result);",./CodexTest_0_4_6.java,hibernate_1
"    double[] var = {1,2,3,4,5,6};    DoubleMatrix1D var = new DenseDoubleMatrix1D(values);    DoubleMatrix1D var = new DenseDoubleMatrix1D(var.length);    var.assign(values);    assertEquals(var,B);",./CodexTest_0_5_1.java,colt_1
"        double[] var = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        DoubleMatrix1D var = new DenseDoubleMatrix1D(var.length);        var.assign(A);        for (int i = 0; i < var.size(); ++i) {            assertEquals(var.getQuick(i), var.getQuick(i));        }",./CodexTest_0_5_8.java,colt_1
"    int var = 100000;    DoubleMatrix1D var = new DenseDoubleMatrix1D(size);    DoubleMatrix1D var = new SparseDoubleMatrix1D(size);    for (int i=size; --i >= 0;) {      double value = Math.random();      var.setQuick(i,value);      var.setQuick(i,value);    }    for (int i=size; --i >= 0;) {      double value = Math.random();      var.setQuick(i,value);      var.setQuick(i,value);    }    assertTrue(var.equals(sparse));    assertTrue(var.equals(dense));",./CodexTest_0_7_1.java,colt_1
"    double[] var = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};    DoubleMatrix1D var = new DenseDoubleMatrix1D(values);    DoubleMatrix1D var = new DenseDoubleMatrix1D(12);    var.assign(values);    assertEquals(var, B);",./CodexTest_0_2_3.java,colt_1
"		double[] var = {1,2,3,4,5,6};		DoubleMatrix1D var = new DenseDoubleMatrix1D(data);		double[] var = {1,2,3,4,5,6};		DoubleMatrix1D var = new DenseDoubleMatrix1D(data2);		var.assign(vector2);		System.out.println(vector);",./CodexTest_0_4_7.java,colt_1
"        double[] var = new double[] {1,2,3,4,5,6,7,8,9,10,11,12};        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        DoubleMatrix1D var = new DenseDoubleMatrix1D(var.length);        var.assign(values);        assertEquals(var,B);",./CodexTest_0_3_1.java,colt_1
"		double[] var = {1,2,3,4,5,6};		DoubleMatrix1D var = new DenseDoubleMatrix1D(values);		DoubleMatrix1D var = new DenseDoubleMatrix1D(var.length);		var.assign(values);		assertEquals(var,m2);",./CodexTest_0_2_2.java,colt_1
"        double[] var = {0,1,2,3};        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        DoubleMatrix1D var = new DenseDoubleMatrix1D(4);        var.assign(values);        assertEquals(var,B);",./CodexTest_0_4_3.java,colt_1
"        double[] var = new double[] {3, 2, 1, 0, -1, -2, -3, -4};        DoubleMatrix1D var = new DenseDoubleMatrix1D(assigned);        DoubleMatrix1D var = new DenseDoubleMatrix1D(var.size());        var.assign(assigned);        assertEquals(var, B);",./CodexTest_0_5_3.java,colt_1
"        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        var.assign(values);        assertEquals(var, B);",./CodexTest_0_8_4.java,colt_1
"        double[] var = new double[] {1,2,3,4,5,6,7,8,9,10,11,12};        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        DoubleMatrix1D var = new DenseDoubleMatrix1D(12);        var.assign(values);        assertEquals(var, B);",./CodexTest_0_1_2.java,colt_1
"        double[] var = {1, 2, 3, 4, 5, 6};        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        DoubleMatrix1D var = new DenseDoubleMatrix1D(var.length);        var.assign(values);        assertEquals(var, m2);",./CodexTest_0_3_2.java,colt_1
"        double[] var = new double[] {1,2,3,4,5,6,7,8,9,10,11,12};        DoubleMatrix1D var = new DenseDoubleMatrix1D(values);        DoubleMatrix1D var = new DenseDoubleMatrix1D(12);        var.assign(values);        assertEquals(var,B);",./CodexTest_0_0_2.java,colt_1
"        DoubleMatrix2D var = new DenseDoubleMatrix2D(3, 3);        DoubleMatrix2D var = new DenseDoubleMatrix2D(3, 3);        var.assign(m2);        assertEquals(var, m2);",./CodexTest_0_4_1.java,colt_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(5.0, Vector1D.distance(var, v2), 1.0e-12);        Assert.assertEquals(var.subtract(v2).getNorm(), Vector1D.distance(var, v2), 1.0e-12);",./CodexTest_0_5_10.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));",./CodexTest_0_3_5.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(1.0, var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(2.0, var.scalarMultiply(2).getNorm(), 1.0e-12);        Assert.assertEquals(3.0, var.scalarMultiply(3).getNorm(), 1.0e-12);        Assert.assertEquals(4.0, var.scalarMultiply(4).getNorm(), 1.0e-12);",./CodexTest_0_4_4.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = var.scalarMultiply(5);        Assert.assertEquals(5.0, var.getX(), 1.0e-12);        Assert.assertEquals(5.0, var.scalarMultiply(5).getX(), 1.0e-12);",./CodexTest_0_7_4.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(10), var.scalarMultiply(10));        Assert.assertEquals(new Vector1D(4), var.scalarMultiply(-1));        Assert.assertEquals(new Vector1D(-5), var.scalarMultiply(5.0 / 4));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));",./CodexTest_0_5_1.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0.0).getNorm(), 0);        Assert.assertEquals(var.scalarMultiply(2.0).getNorm(), var.scalarMultiply(-2.0).getNorm(), 0);",./CodexTest_0_7_8.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(new Vector1D(10), var.scalarMultiply(10));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(-10), var.scalarMultiply(-10));",./CodexTest_0_7_6.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, var.scalarMultiply(0.0).getX(), 1.0e-12);        Assert.assertEquals(-4.0, var.scalarMultiply(-4.0).getX(), 1.0e-12);        Assert.assertEquals(var.scalarMultiply(2.0), var.add(v1));        Assert.assertEquals(var.scalarMultiply(2.0), var.add(v2));",./CodexTest_0_4_10.java,math_1
"        Vector1D var = new Vector1D(0.0);		Vector1D var = new Vector1D(0);		Vector1D var = new Vector1D(-14.0);		Vector1D var = new Vector1D(-14);		Vector1D var = new Vector1D(7.0);		Vector1D var = new Vector1D(7);		Assert.assertEquals(0.0, var.getNorm(), 1.0e-12);		Assert.assertEquals(1.0, var.scalarMultiply(-0.14285714285714285).getNorm(), 1.0e-12);		Assert.assertEquals(7.0, var.getNorm(), 1.0e-12);		Assert.assertEquals(var, v1D);		Assert.assertEquals(var, v2D);		Assert.assertEquals(var, v3D);",./CodexTest_0_9_7.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Vector1D var = new Vector1D(0);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 0);        Assert.assertEquals(2.0, var.scalarMultiply(2).getNorm(), 0);        Assert.assertEquals(FastMath.sqrt(8.0), var.scalarMultiply(2).distance(w), 1.0e-12);        Assert.assertEquals(new Vector1D(2).getNorm(), var.scalarMultiply(2).distance(w), 1.0e-12);        Assert.assertEquals(new Vector1D(2).getNorm(), var.scalarMultiply(-2).distance(u), 1.0e-12);",./CodexTest_0_7_5.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var, var.scalarMultiply(1));        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));",./CodexTest_0_5_8.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Vector1D var = var.scalarMultiply(4);        Assert.assertEquals(4.0, var.getX(), 1.0e-12);        Assert.assertEquals(var.getX(), var.getX() / 4, 1.0e-12);        Assert.assertEquals(var.getX(), var.getX() / -4, 1.0e-12);        Assert.assertEquals(var.add(v2).getNorm(), var.scalarMultiply(2.0).getNorm(), 1.0e-12);",./CodexTest_0_5_5.java,math_1
        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertTrue(var.scalarMultiply(2.0).equals(new Vector1D(2.0)));        Assert.assertTrue(var.scalarMultiply(5.0).equals(new Vector1D(-20.0)));,./CodexTest_0_9_5.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = var.scalarMultiply(5);        Assert.assertEquals(5.0, var.getX(), 1.0e-12);",./CodexTest_0_7_1.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var, var.scalarMultiply(1));        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.scalarMultiply(-1), var.negate());",./CodexTest_0_2_3.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(-10), var.scalarMultiply(-5));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));",./CodexTest_0_5_7.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 0);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 0);        Assert.assertEquals(var.scalarMultiply(2).getNorm(), var.add(v1).getNorm(), 0);        Assert.assertEquals(var.scalarMultiply(-1).getNorm(), var.getNorm(), 0);",./CodexTest_0_4_7.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(-8), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));",./CodexTest_0_3_1.java,math_1
"        Vector1D var = new Vector1D(3.0);        Assert.assertEquals(new Vector1D(15.0), var.scalarMultiply(5));        Assert.assertEquals(new Vector1D(-5.0), var.scalarMultiply(-1.6666666666666667));",./CodexTest_0_6_8.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(1));        Assert.assertEquals(new Vector1D(-2), var.scalarMultiply(-1));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(-0.0));        Assert.assertEquals(new Vector1D(3), var.scalarMultiply(3));        Assert.assertEquals(new Vector1D(-3), var.scalarMultiply(-3));        Assert.assertEquals(new Vector1D(Double.POSITIVE_INFINITY), var.scalarMultiply(Double.POSITIVE_INFINITY));        Assert.assertEquals(new Vector1D(Double.NEGATIVE_INFINITY), var.scalarMultiply(Double.NEGATIVE_INFINITY));        Assert.assertEquals(new Vector1D(Double.NaN), var.scalarMultiply(Double.NaN));",./CodexTest_0_5_6.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, var.scalarMultiply(0.0).distance(new Vector1D(0.0)), 0);        Assert.assertEquals(var.distance(v2),                            var.scalarMultiply(-1.0).distance(var.scalarMultiply(-1.0)),                            1.0e-12);",./CodexTest_0_6_5.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = var.scalarMultiply(4);        Assert.assertEquals(4.0, var.getX(), 1.0e-12);        Assert.assertTrue(v2 instanceof Vector1D);        Assert.assertEquals(0.0, Vector1D.distance(var, v2), 1.0e-12);",./CodexTest_0_8_1.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(-1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm() * var.getNorm(), var.scalarMultiply(var.getNorm()).getNorm(), 1.0e-12);",./CodexTest_0_1_1.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Vector1D var = var.scalarMultiply(-1);        Assert.assertEquals(0.0, Vector1D.distance(new Vector1D(-1), new Vector1D(-1)), 0);        Assert.assertEquals(0.0, Vector1D.distance(var, v1), 1.0e-12);        Assert.assertEquals(var.getX(), var.scalarMultiply(1.0).getX(), 1.0e-12);        Assert.assertEquals(var.scalarMultiply(-1).getX(), var.getX(), 1.0e-12);",./CodexTest_0_8_10.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.scalarMultiply(2).getNorm(), var.add(v).getNorm(), 1.0e-12);",./CodexTest_0_2_2.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var, var.scalarMultiply(1));        Assert.assertEquals(var.negate(), var.scalarMultiply(-1));        Assert.assertEquals(var.getNorm(), var.scalarMultiply(var.getNorm()).getNorm(), 1.0e-12);",./CodexTest_0_0_1.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = var.scalarMultiply(5);        Assert.assertEquals(5.0, var.getX(), 1.0e-12);        Assert.assertEquals(var.getX(), var.scalarMultiply(1).getX(), 1.0e-12);",./CodexTest_0_6_9.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(-2), var.scalarMultiply(-2));        Assert.assertEquals(new Vector1D(-2), var.scalarMultiply(-2));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));",./CodexTest_0_4_2.java,math_1
"        Vector1D var = new Vector1D(5);        Vector1D var = var.scalarMultiply(2);        Assert.assertEquals(2 * var.getX(), var.getX(), 1.0e-12);        Assert.assertEquals(new Vector1D(10.0), v);",./CodexTest_0_8_6.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(8), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(-2), var.scalarMultiply(-2));        Assert.assertEquals(new Vector1D(-8), var.scalarMultiply(-2));",./CodexTest_0_3_4.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var, var.scalarMultiply(1));        Assert.assertEquals(var.negate(), var.scalarMultiply(-1));        Assert.assertEquals(var.add(v), var.scalarMultiply(2));        Assert.assertEquals(var.subtract(v), var.scalarMultiply(0));",./CodexTest_0_2_1.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm() * var.getNorm(), var.scalarMultiply(var.getNorm()).getNorm(), 1.0e-12);",./CodexTest_0_1_3.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, var.scalarMultiply(0).getX(), 1.0e-12);        Assert.assertEquals(var, var.scalarMultiply(1));        Assert.assertEquals(var, var.scalarMultiply(-4));        Assert.assertEquals(var.scalarMultiply(2), var.add(v1));        Assert.assertEquals(var.scalarMultiply(-2), var.subtract(v1).negate());",./CodexTest_0_5_3.java,math_1
"			Vector1D var = new Vector1D(5);			Vector1D var = var.scalarMultiply(2);			Assert.assertEquals(10.0, var.getNorm(), 1.0e-12);",./CodexTest_0_8_4.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, var.scalarMultiply(0).getX(), 0);        Assert.assertEquals(var.getX(), var.scalarMultiply(1).getX(), 0);        Assert.assertEquals(var.getX(), var.scalarMultiply(1).getX(), 0);        Assert.assertEquals(var.getX() * 10, var.scalarMultiply(10).getX(), 0);        Assert.assertEquals(var.getX() * 10, var.scalarMultiply(10).getX(), 0);",./CodexTest_0_4_9.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(-1).getNorm(), 1.0e-12);        Assert.assertEquals(2 * var.getNorm(), var.scalarMultiply(2).getNorm(), 1.0e-12);        Assert.assertEquals(2 * var.getNorm(), var.scalarMultiply(-2).getNorm(), 1.0e-12);",./CodexTest_0_1_2.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Assert.assertEquals(0.0, Vector1D.distance(var.scalarMultiply(2), v2), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(2).getNorm(), 1.0e-12);",./CodexTest_0_5_4.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Assert.assertEquals(0.0, var.scalarMultiply(0.0).getNorm(), 0);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(2).getNorm(), 1.0e-12);        Assert.assertEquals(var.add(v2).getNorm(), var.scalarMultiply(3).getNorm(), 1.0e-12);",./CodexTest_0_7_10.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(3);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(3).getNorm(), 1.0e-12);        Assert.assertEquals(var.scalarMultiply(-1).getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);",./CodexTest_0_6_10.java,math_1
"        Vector1D var = new Vector1D(6);        Assert.assertEquals(new Vector1D(12), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(3), var.scalarMultiply(0.5));        Assert.assertEquals(new Vector1D(-6), var.scalarMultiply(-1));",./CodexTest_0_8_8.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(-2), var.scalarMultiply(-2));",./CodexTest_0_2_4.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(4), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));        Assert.assertEquals(new Vector1D(-2), var.scalarMultiply(-2));        Assert.assertEquals(new Vector1D(-4), var.scalarMultiply(-2));",./CodexTest_0_4_5.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = var.scalarMultiply(2);        Assert.assertEquals(2.0, var.getX(), 1.0e-12);        Assert.assertEquals(var.getX(), var.getX(), 1.0e-12);        Assert.assertEquals(var.getX(), var.subtract(v).getX(), 1.0e-12);",./CodexTest_0_3_2.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var, var.scalarMultiply(1));        Assert.assertEquals(var.negate(), var.scalarMultiply(-1));        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1.0 / var.getNorm()).getNorm(), 1.0e-12);",./CodexTest_0_0_2.java,math_1
"          Vector1D var = new Vector1D(1.0);          Assert.assertEquals(Vector1D.ZERO, var.scalarMultiply(0.0));          Assert.assertEquals(var, var.scalarMultiply(1.0));          Assert.assertEquals(new Vector1D(-1.0), var.scalarMultiply(-1.0));          Assert.assertEquals(new Vector1D(2.0), var.scalarMultiply(2.0));          Assert.assertEquals(new Vector1D(4.0), var.scalarMultiply(4.0));",./CodexTest_0_8_9.java,math_1
"        // scalarMultiply(double a)        Vector1D var = new Vector1D(1);        Assert.assertEquals(new Vector1D(2), var.scalarMultiply(2));        Assert.assertEquals(new Vector1D(-1), var.scalarMultiply(-1));        Assert.assertEquals(new Vector1D(0), var.scalarMultiply(0));",./CodexTest_0_7_2.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(2 * var.getNorm(), var.scalarMultiply(2).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(-1).getNorm(), 1.0e-12);        Assert.assertEquals(2 * var.getNorm(), var.scalarMultiply(-2).getNorm(), 1.0e-12);",./CodexTest_0_4_1.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.add(v).getNorm(), var.scalarMultiply(2).getNorm(), 1.0e-12);        Assert.assertEquals(var.subtract(v).getNorm(), var.scalarMultiply(-1).getNorm(), 1.0e-12);",./CodexTest_0_5_2.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Assert.assertEquals(new Vector1D(1), var.subtract(v1));",./CodexTest_0_8_7.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(1.0, var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(2.0, var.scalarMultiply(2).getNorm(), 1.0e-12);        Assert.assertEquals(4.0, var.scalarMultiply(4).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);",./CodexTest_0_6_7.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(-1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(-1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(-1).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(1).getNorm(), 1.0e-12);",./CodexTest_0_6_2.java,math_1
"        Vector1D var = new Vector1D(1);        for (double a : new double[] {0, 2, -5, 0.1, -0.1}) {            Assert.assertEquals(Vector1D.distance(var, var.scalarMultiply(a)), FastMath.abs(a), 1.0e-12);        }",./CodexTest_0_8_2.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = var.scalarMultiply(2);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(2.0, var.getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(0.5).getNorm(), 1.0e-12);",./CodexTest_0_5_9.java,math_1
"         Vector1D var = new Vector1D(2);         var = var.scalarMultiply(3);         Assert.assertEquals(6, var.getX(), 1.0e-12);",./CodexTest_0_9_9.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(-4);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(1.0, var.scalarMultiply(1.0).getNorm(), 1.0e-12);        Assert.assertEquals(var.getNorm(), var.scalarMultiply(-4).getNorm(), 1.0e-12);",./CodexTest_0_6_3.java,math_1
"        Vector1D var = new Vector1D(1);        Assert.assertEquals(var.scalarMultiply(2), new Vector1D(2));",./CodexTest_0_4_6.java,math_1
"        Vector1D var = new Vector1D(1);        Vector1D var = new Vector1D(2);        Assert.assertEquals(2.0, var.scalarMultiply(2).getNorm(), 1.0e-12);        Assert.assertEquals(0.0, var.scalarMultiply(0).getNorm(), 1.0e-12);        Assert.assertEquals(1.0, var.scalarMultiply(1).getNorm(), 1.0e-12);        Assert.assertEquals(3.0, var.scalarMultiply(1).add(w).getNorm(), 1.0e-12);",./CodexTest_0_8_5.java,math_1
