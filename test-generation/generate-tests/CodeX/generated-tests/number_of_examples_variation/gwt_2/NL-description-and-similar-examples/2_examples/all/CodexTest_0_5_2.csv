prompt,output
"Suggest a test for a method with the UncaughtExceptionHandler getUncaughtExceptionHandler() signature.

Input: public static String getModuleName() {
    return Impl.getModuleName();
  }
Output: public void testGetModuleName() {
    assertEquals(""com.google.gwt.core.Core.JUnit"", GWT.getModuleName());
  }

Input: public static HashCode fromInt(int hash) {
			return new IntHashCode(hash);
		  }
Output: public void testObjectHashCode() {
			HashCode hashCode42 = HashCode.fromInt(42);
			assertEquals(42, hashCode42.hashCode());
		  }

Input: public static UncaughtExceptionHandler getUncaughtExceptionHandler() {
    return sUncaughtExceptionHandler;
  }
Output:
  ","import com.google.gwt.core.client.*;
import com.google.gwt.core.client.impl.Impl;

import com.google.gwt.core.client.*;
import com.google.gwt.junit.client.GWTTestCase;
import static org.junit.Assert.*;
import org.junit.Test;

import org.junit.*;


public class CodexTest_0_5_2 { 
  @Test
  public void testUncaughtExceptionHandler() {
    UncaughtExceptionHandler ueh = GWT.getUncaughtExceptionHandler();
    assertNotNull(ueh);
  }
 */
public class TestSuggestor {
  private static String[] reservedWords = { ""abstract"", ""assert"", ""boolean"", ""break"", ""byte"", ""case"",
      ""catch"", ""char"", ""class"", ""const"", ""continue"", ""default"", ""do"", ""double"", ""else"", ""enum"",
      ""extends"", ""final"", ""finally"", ""float"", ""for"", ""goto"", ""if"", ""implements"", ""import"",
      ""instanceof"", ""int"", ""interface"", ""long"", ""native"", ""new"", ""package"", ""private"", ""protected"",
      ""public"", ""return"", ""short"", ""static"", ""strictfp"", ""super"", ""switch"", ""synchronized"",
      ""this"", ""throw"", ""throws"", ""transient"", ""try"", ""void"", ""volatile"", ""while"" };
}"
