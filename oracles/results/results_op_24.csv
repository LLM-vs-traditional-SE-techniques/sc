class_name,method_name,comment,oracles,oracle_count,entity_count,translation_miss_count,error,tp,fp,fn,exist_tp,exist_fp,exist_fn,setup_time,entity_extraction_time,oracle_detection_time,time
cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"aggregate(cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"aggregate(cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction, cern.colt.function.DoubleDoubleFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,assign(double[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,assign(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,assign(cern.colt.function.DoubleFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,assign(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"assign(cern.colt.matrix.DoubleMatrix2D, cern.colt.function.DoubleDoubleFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,cardinality(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,equals(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,forEachNonZero(cern.colt.function.IntIntDoubleFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"get(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,getContent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.DoubleArrayList)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"getQuick(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,haveSharedCells(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,haveSharedCellsRaw(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,like(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"like(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,like1D(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"like1D(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"set(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"setQuick(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,view(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,viewColumn(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,viewColumnFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,viewDice(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"viewPart(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,viewRow(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,viewRowFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"viewSelection(int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,viewSelection(cern.colt.matrix.DoubleMatrix1DProcedure),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"viewSelectionLike(int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,viewSorted(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"viewStrides(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"zAssign8Neighbors(cern.colt.matrix.DoubleMatrix2D, cern.colt.function.Double9Function)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"zMult(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"zMult(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, double, double, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"zMult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,"zMult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, double, double, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.DoubleMatrix2D,zSum(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,cern.colt.matrix.linalg.Algebra(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,cern.colt.matrix.linalg.Algebra(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,cond(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,det(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"hypot(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,hypotFunction(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,inverse(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"mult(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.linalg.Algebra,"mult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix1D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"mult(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"multOuter(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,norm1(cern.colt.matrix.DoubleMatrix1D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,norm1(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,norm2(cern.colt.matrix.DoubleMatrix1D),,"[{'condition': 'true', 'entities': ['this.mult(x, x)', 'this.norm2(x)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,norm2(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,normF(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,normInfinity(cern.colt.matrix.DoubleMatrix1D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,normInfinity(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"permute(cern.colt.matrix.DoubleMatrix1D, int[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"permute(cern.colt.matrix.DoubleMatrix2D, int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"permuteColumns(cern.colt.matrix.DoubleMatrix2D, int[], int[])",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.linalg.Algebra,"permuteRows(cern.colt.matrix.DoubleMatrix2D, int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"pow(cern.colt.matrix.DoubleMatrix2D, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,property(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,rank(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,setProperty(cern.colt.matrix.linalg.Property),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"solve(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"solveTranspose(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,"subMatrix(cern.colt.matrix.DoubleMatrix2D, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,toString(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,toVerboseString(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,trace(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,transpose(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Algebra,trapezoidalLower(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,cern.colt.matrix.linalg.Property(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,blanks(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,checkRectangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,checkSquare(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,density(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,"equals(cern.colt.matrix.DoubleMatrix1D, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,"equals(cern.colt.matrix.DoubleMatrix1D, cern.colt.matrix.DoubleMatrix1D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,"equals(cern.colt.matrix.DoubleMatrix2D, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,"equals(cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,"equals(cern.colt.matrix.DoubleMatrix3D, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,"equals(cern.colt.matrix.DoubleMatrix3D, cern.colt.matrix.DoubleMatrix3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,generateNonSingular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,"get(cern.colt.list.ObjectArrayList, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isDiagonal(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isDiagonallyDominantByColumn(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isDiagonallyDominantByRow(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isIdentity(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isLowerBidiagonal(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isLowerTriangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isNonNegative(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isOrthogonal(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isPositive(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isSingular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isSkewSymmetric(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isSquare(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isStrictlyLowerTriangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isStrictlyTriangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isStrictlyUpperTriangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isSymmetric(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isTriangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isTridiagonal(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isUnitTriangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isUpperBidiagonal(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isUpperTriangular(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,isZero(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,lowerBandwidth(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,semiBandwidth(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,setTolerance(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,tolerance(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,toString(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.linalg.Property,upperBandwidth(cern.colt.matrix.DoubleMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,cern.colt.matrix.ObjectMatrix1D(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"aggregate(cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"aggregate(cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,assign(java.lang.Object[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,assign(cern.colt.function.ObjectFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,assign(cern.colt.matrix.ObjectMatrix1D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"assign(cern.colt.matrix.ObjectMatrix1D, cern.colt.function.ObjectObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,assign(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,cardinality(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,equals(java.lang.Object),,"[{'condition': 'true', 'entities': ['this.equals(otherObj)', 'this.equals(otherObj, true)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"equals(java.lang.Object, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,get(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,getContent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,getQuick(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,haveSharedCells(cern.colt.matrix.ObjectMatrix1D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix1D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,like(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,like(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"like2D(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"set(int, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"setQuick(int, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,swap(cern.colt.matrix.ObjectMatrix1D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,toArray(java.lang.Object[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,view(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,viewFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,"viewPart(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,viewSelection(int[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,viewSelection(cern.colt.function.ObjectProcedure),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,viewSelectionLike(int[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,viewSorted(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix1D,viewStrides(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,cern.colt.matrix.ObjectMatrix2D(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"aggregate(cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"aggregate(cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,assign(java.lang.Object[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,assign(cern.colt.function.ObjectFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,assign(cern.colt.matrix.ObjectMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"assign(cern.colt.matrix.ObjectMatrix2D, cern.colt.function.ObjectObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,assign(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,cardinality(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,equals(java.lang.Object),,"[{'condition': 'true', 'entities': ['this.equals(otherObj)', 'this.equals(otherObj, true)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"equals(java.lang.Object, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"get(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,getContent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"getQuick(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,haveSharedCells(cern.colt.matrix.ObjectMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix2D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,like(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"like(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,like1D(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"like1D(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"set(int, int, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"setQuick(int, int, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,view(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,viewColumn(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,viewColumnFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,viewDice(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"viewPart(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,viewRow(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,viewRowFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"viewSelection(int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,viewSelection(cern.colt.matrix.ObjectMatrix1DProcedure),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"viewSelectionLike(int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,viewSorted(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix2D,"viewStrides(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,cern.colt.matrix.ObjectMatrix3D(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"aggregate(cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"aggregate(cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction, cern.colt.function.ObjectObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,assign(java.lang.Object[][][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,assign(cern.colt.function.ObjectFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,assign(cern.colt.matrix.ObjectMatrix3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"assign(cern.colt.matrix.ObjectMatrix3D, cern.colt.function.ObjectObjectFunction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,assign(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,cardinality(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,equals(java.lang.Object),,"[{'condition': 'true', 'entities': ['this.equals(otherObj)', 'this.equals(otherObj, true)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"equals(java.lang.Object, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"get(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,getContent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"getNonZeros(cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList, cern.colt.list.ObjectArrayList)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"getQuick(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,haveSharedCells(cern.colt.matrix.ObjectMatrix3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,like(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"like(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"like2D(int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"set(int, int, int, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"setQuick(int, int, int, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,view(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,viewColumn(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,viewColumnFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"viewDice(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"viewPart(int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,viewRow(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,viewRowFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"viewSelection(int[], int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,viewSelection(cern.colt.matrix.ObjectMatrix2DProcedure),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"viewSelectionLike(int[], int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,viewSlice(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,viewSliceFlip(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"viewSorted(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.matrix.ObjectMatrix3D,"viewStrides(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,cern.colt.Partitioning(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"dualPartition(double[], double[], int, int, double[], int, int, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"dualPartition(double[], double[], int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"dualPartition(int[], int[], int, int, int[], int, int, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"dualPartition(int[], int[], int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"genericPartition(int, int, int, int, int[], cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.function.IntComparator, cern.colt.Swapper)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"partition(double[], int, int, double[], int, int, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"partition(double[], int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"partition(int[], int, int, int[], int, int, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"partition(int[], int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"partition(java.lang.Object[], int, int, java.lang.Object[], int, int, int[], java.util.Comparator)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"partition(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"partition(cern.colt.list.DoubleArrayList, int, int, cern.colt.list.DoubleArrayList, cern.colt.list.IntArrayList)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.Partitioning,"partition(cern.colt.list.IntArrayList, int, int, cern.colt.list.IntArrayList, cern.colt.list.IntArrayList)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.colt.Partitioning,"triplePartition(double[], double[], double[], int, int, double[], int, int, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"triplePartition(double[], double[], double[], int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"triplePartition(int[], int[], int[], int, int, int[], int, int, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Partitioning,"triplePartition(int[], int[], int[], int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,cern.colt.Timer(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,display(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,elapsedTime(),,"[{'condition': 'true', 'entities': ['this.elapsedTime()', 'this.seconds()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
cern.colt.Timer,millis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,minus(cern.colt.Timer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,minutes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,plus(cern.colt.Timer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,reset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,seconds(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,start(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,stop(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,test(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.colt.Timer,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,cern.jet.stat.Probability(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"beta(double, double, double)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
cern.jet.stat.Probability,"betaComplemented(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"binomial(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"binomialComplemented(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"chiSquare(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"chiSquareComplemented(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,errorFunction(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,errorFunctionComplemented(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"gamma(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"gammaComplemented(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"negativeBinomial(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"negativeBinomialComplemented(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,normal(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"normal(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,normalInverse(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"poisson(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"poissonComplemented(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"studentT(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.Probability,"studentTInverse(double, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.quantile.Utils,cern.jet.stat.quantile.Utils(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
cern.jet.stat.quantile.Utils,epsilonCeiling(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,hep.aida.bin.QuantileBin1D(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,hep.aida.bin.QuantileBin1D(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,"hep.aida.bin.QuantileBin1D(boolean, long, double, double, int, cern.jet.random.engine.RandomEngine)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,"hep.aida.bin.QuantileBin1D(boolean, long, double, double, int, cern.jet.random.engine.RandomEngine, boolean, boolean, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,"addAllOfFromTo(cern.colt.list.DoubleArrayList, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,compareWith(hep.aida.bin.AbstractBin1D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,median(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,quantile(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,quantileInverse(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,quantiles(cern.colt.list.DoubleArrayList),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,"sizeOfRange(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,"splitApproximately(cern.colt.list.DoubleArrayList, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,"splitApproximately(hep.aida.IAxis, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.bin.QuantileBin1D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,"binEntries(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,binEntriesX(int),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
hep.aida.IHistogram2D,binEntriesY(int),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
hep.aida.IHistogram2D,"binError(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,"binHeight(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,binHeightX(int),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
hep.aida.IHistogram2D,binHeightY(int),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
hep.aida.IHistogram2D,"fill(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,"fill(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,meanX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,meanY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,minMaxBins(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,projectionX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,projectionY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,rmsX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,rmsY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,sliceX(int),,"[{'condition': 'true', 'entities': ['this.sliceX(indexY)', 'this.sliceX(indexY, indexY)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
hep.aida.IHistogram2D,"sliceX(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,sliceY(int),,"[{'condition': 'true', 'entities': ['this.sliceY(indexX)', 'this.sliceY(indexX, indexX)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
hep.aida.IHistogram2D,"sliceY(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,xAxis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram2D,yAxis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,"binEntries(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,"binError(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,"binHeight(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,"fill(double, double, double)",,"[{'condition': 'true', 'entities': ['this.fill(x, y, z)', 'this.fill(x, y, z, 1)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
hep.aida.IHistogram3D,"fill(double, double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,meanX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,meanY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,meanZ(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,minMaxBins(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,projectionXY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,projectionXZ(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,projectionYZ(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,rmsX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,rmsY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,rmsZ(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,sliceXY(int),,"[{'condition': 'true', 'entities': ['this.sliceXY(indexZ)', 'this.sliceXY(indexZ, indexZ)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
hep.aida.IHistogram3D,"sliceXY(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,sliceXZ(int),,"[{'condition': 'true', 'entities': ['this.sliceXZ(indexY)', 'this.sliceXZ(indexY, indexY)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
hep.aida.IHistogram3D,"sliceXZ(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,sliceYZ(int),,"[{'condition': 'true', 'entities': ['this.sliceYZ(indexX)', 'this.sliceYZ(indexX, indexX)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
hep.aida.IHistogram3D,"sliceYZ(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,xAxis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,yAxis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
hep.aida.IHistogram3D,zAxis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.action.index.MappingUpdatedAction,"updateMappingOnMaster(org.elasticsearch.index.Index, java.lang.String, org.elasticsearch.index.mapper.Mapping, org.elasticsearch.common.unit.TimeValue)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.action.index.MappingUpdatedAction,"org.elasticsearch.cluster.action.index.MappingUpdatedAction(org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.ClusterSettings)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.action.index.MappingUpdatedAction,"updateMappingOnMaster(org.elasticsearch.index.Index, java.lang.String, org.elasticsearch.index.mapper.Mapping)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.action.index.MappingUpdatedAction,setClient(org.elasticsearch.client.Client),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"resolveSearchRoutingAllIndices(org.elasticsearch.cluster.metadata.MetaData, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"indexAliases(org.elasticsearch.cluster.ClusterState, java.lang.String, java.util.function.Predicate<org.elasticsearch.cluster.metadata.AliasMetaData>, boolean, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteIndices(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.support.IndicesOptions, long, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"resolveSearchRouting(org.elasticsearch.cluster.ClusterState, java.lang.String, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteIndexNames(org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.Context, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteIndexNames(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.IndicesRequest)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"hasIndexOrAlias(java.lang.String, org.elasticsearch.cluster.ClusterState)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteIndices(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.IndicesRequest)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteIndices(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.support.IndicesOptions, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,resolveDateMathExpression(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"isPatternMatchingAllIndices(org.elasticsearch.cluster.metadata.MetaData, java.lang.String[], java.lang.String[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"matchesIndex(java.lang.String, java.lang.String, org.elasticsearch.cluster.ClusterState)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteIndexNames(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.support.IndicesOptions, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteIndices(org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.Context, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,org.elasticsearch.cluster.metadata.IndexNameExpressionResolver(org.elasticsearch.common.settings.Settings),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"filteringAliases(org.elasticsearch.cluster.ClusterState, java.lang.String, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,"concreteSingleIndex(org.elasticsearch.cluster.ClusterState, org.elasticsearch.action.IndicesRequest)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,isAllIndices(java.util.List<java.lang.String>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver,isExplicitAllPattern(java.util.List<java.lang.String>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.routing.ShardShuffler,nextSeed(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.routing.ShardShuffler,"shuffle(java.util.List<org.elasticsearch.cluster.routing.ShardRouting>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.cluster.routing.ShardShuffler,shuffle(java.util.List<org.elasticsearch.cluster.routing.ShardRouting>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,"appendElement(T[], T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,"copyOf(java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,org.elasticsearch.common.collect.CopyOnWriteHashMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,"copyAndPut(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,get(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,entrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,"copyAndPutAll(java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,"insertElement(T[], T, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,copyAndRemove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,copyAndRemoveAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,containsKey(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,"copyAndPutAll(java.lang.Iterable<java.util.Map.Entry<K1, V1>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.collect.CopyOnWriteHashMap,"copyAndPutAll(java.util.stream.Stream<java.util.Map.Entry<K1, V1>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,isValidLongitude(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,normalizeLat(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"rectangleContainsPoint(org.apache.lucene.geo.Rectangle, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,quadTreeCellWidth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,parseGeoPoint(org.elasticsearch.common.xcontent.XContentParser),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"parseGeoPoint(org.elasticsearch.common.xcontent.XContentParser, org.elasticsearch.common.geo.GeoPoint)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"distanceValues(org.elasticsearch.common.geo.GeoDistance, org.elasticsearch.common.unit.DistanceUnit, org.elasticsearch.index.fielddata.MultiGeoPointValues, org.elasticsearch.common.geo.GeoPoint...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,quadTreeLevelsForPrecision(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,geoHashCellHeight(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,quadTreeLevelsForPrecision(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,geoHashLevelsForPrecision(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,geoHashCellSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,geoHashLevelsForPrecision(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"planeDistance(double, double, double, double)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,normalizePoint(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"parseGeoPoint(java.lang.String, org.elasticsearch.common.geo.GeoPoint)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,quadTreeCellHeight(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,normalizePoint(org.elasticsearch.common.geo.GeoPoint),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"maxRadialDistanceMeters(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"normalizePoint(org.elasticsearch.common.geo.GeoPoint, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,quadTreeCellSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"arcDistance(double, double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,normalizeLon(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,geoHashCellWidth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,isValidLatitude(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.geo.GeoUtils,"normalizePoint(double[], boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,reset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,toCharArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,org.elasticsearch.common.io.FastCharArrayWriter(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,flush(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,append(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,org.elasticsearch.common.io.FastCharArrayWriter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,unsafeCharArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,"append(java.lang.CharSequence, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,append(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,close(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,"write(java.lang.String, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,"write(char[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,writeTo(java.io.Writer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,write(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,toStringTrim(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.FastCharArrayWriter,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,org.elasticsearch.common.io.UTF8StreamWriter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,"write(char[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,flush(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,"write(java.lang.String, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,write(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,close(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,org.elasticsearch.common.io.UTF8StreamWriter(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,write(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,setOutput(java.io.OutputStream),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,reset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,setOutputStream(java.io.OutputStream),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.common.io.UTF8StreamWriter,write(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.Randomness,createSecure(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.Randomness,shuffle(java.util.List<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.Randomness,"get(org.elasticsearch.common.settings.Settings, org.elasticsearch.common.settings.Setting<java.lang.Long>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.Randomness,get(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.AbstractRunnable,onRejection(java.lang.Exception),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.AbstractRunnable,onAfter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.AbstractRunnable,run(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.AbstractRunnable,onFailure(java.lang.Exception),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.AbstractRunnable,isForceExecution(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.AbstractRunnable,doRun(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,getTasks(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,"afterExecute(java.lang.Runnable, java.lang.Throwable)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,wrapRunnable(java.lang.Runnable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,execute(java.lang.Runnable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, org.elasticsearch.common.util.concurrent.XRejectedExecutionHandler, org.elasticsearch.common.util.concurrent.ThreadContext)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,shutdown(org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor.ShutdownListener),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,unwrap(java.lang.Runnable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,"org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, org.elasticsearch.common.util.concurrent.ThreadContext)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,terminated(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.EsThreadPoolExecutor,doExecute(java.lang.Runnable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,isDefaultContext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,"putTransient(java.lang.String, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,org.elasticsearch.common.util.concurrent.ThreadContext(org.elasticsearch.common.settings.Settings),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,writeTo(org.elasticsearch.common.io.stream.StreamOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,wrapRestorable(org.elasticsearch.common.util.concurrent.ThreadContext.StoredContext),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,"addResponseHeader(java.lang.String, java.lang.String, java.util.function.Function<java.lang.String, java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,getHeaders(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,markAsSystemContext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,isSystemContext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,getTransient(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,stashContext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,getResponseHeaders(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,"putHeader(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,"stashAndMergeHeaders(java.util.Map<java.lang.String, java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,newStoredContext(boolean),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,getHeader(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,"putHeader(java.util.Map<java.lang.String, java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,isClosed(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,newRestorableContext(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,readHeaders(org.elasticsearch.common.io.stream.StreamInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,"copyHeaders(java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,close(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,"addResponseHeader(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,preserveContext(java.lang.Runnable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.common.util.concurrent.ThreadContext,unwrap(java.lang.Runnable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,rawPath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,getLocalAddress(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"org.elasticsearch.rest.RestRequest(org.elasticsearch.common.xcontent.NamedXContentRegistry, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"param(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"applyContentParser(org.elasticsearch.common.CheckedConsumer<org.elasticsearch.common.xcontent.XContentParser, java.io.IOException>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,contentParser(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,contentOrSourceParamParser(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,param(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"org.elasticsearch.rest.RestRequest(org.elasticsearch.common.xcontent.NamedXContentRegistry, java.util.Map<java.lang.String, java.lang.String>, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,paramAsStringArrayOrEmptyIfAll(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,hasContentOrSourceParam(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,requiredContent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,getHeaders(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,setXContentType(org.elasticsearch.common.xcontent.XContentType),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsTime(java.lang.String, org.elasticsearch.common.unit.TimeValue)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,getXContentType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsStringArray(java.lang.String, java.lang.String[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsFloat(java.lang.String, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,hasParam(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,consumedParams(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,method(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,uri(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,content(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,unconsumedParams(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsLong(java.lang.String, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,getAllHeaderValues(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,path(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,getRemoteAddress(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsInt(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsSize(java.lang.String, org.elasticsearch.common.unit.ByteSizeValue)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,getXContentRegistry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,params(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,hasContent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"withContentOrSourceParamParserOrNull(org.elasticsearch.common.CheckedConsumer<org.elasticsearch.common.xcontent.XContentParser, java.io.IOException>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,contentOrSourceParam(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsBoolean(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,"paramAsBoolean(java.lang.String, java.lang.Boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestRequest,header(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestUtils,decodeComponent(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.rest.RestUtils,checkCorsSettingForRegex(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestUtils,"decodeQueryString(java.lang.String, int, java.util.Map<java.lang.String, java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.rest.RestUtils,"decodeComponent(java.lang.String, java.nio.charset.Charset)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.rest.RestUtils,corsSettingAsArray(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,bucketAggregations(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,maxBucketOrd(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,close(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,"org.elasticsearch.search.aggregations.bucket.BucketsAggregator(java.lang.String, org.elasticsearch.search.aggregations.AggregatorFactories, org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.Aggregator, java.util.List<org.elasticsearch.search.aggregations.pipeline.PipelineAggregator>, java.util.Map<java.lang.String, java.lang.Object>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,"collectBucket(org.elasticsearch.search.aggregations.LeafBucketCollector, int, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,getDocCounts(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,grow(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,bucketDocCount(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,"collectExistingBucket(org.elasticsearch.search.aggregations.LeafBucketCollector, int, long)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,"incrementBucketDocCount(long, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.BucketsAggregator,bucketEmptyAggregations(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,innerEquals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"addRange(java.lang.String, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"addUnboundedFrom(java.lang.String, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,unit(org.elasticsearch.common.unit.DistanceUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,range(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,distanceType(org.elasticsearch.common.geo.GeoDistance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,innerHashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,origin(org.elasticsearch.common.geo.GeoPoint),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,keyed(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,keyed(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"addRange(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,addUnboundedTo(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,getType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,addUnboundedFrom(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,innerWriteTo(org.elasticsearch.common.io.stream.StreamOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"addUnboundedTo(java.lang.String, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"innerBuild(org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource.GeoPoint>, org.elasticsearch.search.aggregations.AggregatorFactory<?>, org.elasticsearch.search.aggregations.AggregatorFactories.Builder)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder(java.lang.String, org.elasticsearch.common.geo.GeoPoint)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"doXContentBody(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,distanceType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,addRange(org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder.Range),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,origin(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,unit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder,"parse(java.lang.String, org.elasticsearch.common.xcontent.XContentParser)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,keyed(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,script(org.elasticsearch.script.Script),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"innerBuild(org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource.Bytes>, org.elasticsearch.search.aggregations.AggregatorFactory<?>, org.elasticsearch.search.aggregations.AggregatorFactories.Builder)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,getType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,keyed(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,innerWriteTo(org.elasticsearch.common.io.stream.StreamOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"addMaskRange(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,addUnboundedFrom(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"doXContentBody(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"addUnboundedFrom(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,addMaskRange(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,addRange(org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder.Range),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,getRanges(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"addRange(java.lang.String, java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"addUnboundedTo(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,innerEquals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"addRange(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,"parse(java.lang.String, org.elasticsearch.common.xcontent.XContentParser)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,innerHashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder,addUnboundedTo(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,"addUnboundedFrom(java.lang.String, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,"addRange(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,"parse(java.lang.String, org.elasticsearch.common.xcontent.XContentParser)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,getType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,addUnboundedFrom(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,addUnboundedTo(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,"innerBuild(org.elasticsearch.search.internal.SearchContext, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource.Numeric>, org.elasticsearch.search.aggregations.AggregatorFactory<?>, org.elasticsearch.search.aggregations.AggregatorFactories.Builder)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,"addRange(java.lang.String, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder,"addUnboundedTo(java.lang.String, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder(org.elasticsearch.common.io.stream.StreamInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,"innerToXContent(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,"contexts(java.util.Map<java.lang.String, java.util.List<? extends org.elasticsearch.common.xcontent.ToXContent>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,regex(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,"parseContextBytes(org.elasticsearch.common.bytes.BytesReference, org.elasticsearch.common.xcontent.NamedXContentRegistry, org.elasticsearch.search.suggest.completion.context.ContextMappings)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,prefix(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,skipDuplicates(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,doEquals(org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,"prefix(java.lang.String, org.elasticsearch.search.suggest.completion.FuzzyOptions)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,"regex(java.lang.String, org.elasticsearch.search.suggest.completion.RegexOptions)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,skipDuplicates(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,fromXContent(org.elasticsearch.common.xcontent.XContentParser),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,build(org.elasticsearch.index.query.QueryShardContext),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,doHashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,doWriteTo(org.elasticsearch.common.io.stream.StreamOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,"prefix(java.lang.String, org.elasticsearch.common.unit.Fuzziness)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder,getWriteableName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,writeTo(org.elasticsearch.common.io.stream.StreamOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,org.elasticsearch.search.suggest.SuggestionBuilder(org.elasticsearch.common.io.stream.StreamInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,prefix(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,fromXContent(org.elasticsearch.common.xcontent.XContentParser),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,"toXContent(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,shardSize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,org.elasticsearch.search.suggest.SuggestionBuilder(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,size(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,doWriteTo(org.elasticsearch.common.io.stream.StreamOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,analyzer(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,"populateCommonFields(org.elasticsearch.index.mapper.MapperService, org.elasticsearch.search.suggest.SuggestionSearchContext.SuggestionContext)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,"org.elasticsearch.search.suggest.SuggestionBuilder(java.lang.String, org.elasticsearch.search.suggest.SuggestionBuilder<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,regex(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,analyzer(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,doHashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,prefix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,field(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,"innerToXContent(org.elasticsearch.common.xcontent.XContentBuilder, org.elasticsearch.common.xcontent.ToXContent.Params)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,text(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,shardSize(java.lang.Integer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,doEquals(T),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,text(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,regex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.elasticsearch.search.suggest.SuggestionBuilder,build(org.elasticsearch.index.query.QueryShardContext),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Edge,isDirected(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Edge,getNode1(),,"[{'condition': 'true', 'entities': ['this.getNode1()', 'this.getTargetNode()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.graphstream.graph.Edge,getSourceNode(),,"[{'condition': 'true', 'entities': ['this.getNode0()', 'this.getSourceNode()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.graphstream.graph.Edge,getOpposite(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Edge,getTargetNode(),,"[{'condition': 'true', 'entities': ['this.getNode1()', 'this.getTargetNode()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.graphstream.graph.Edge,isLoop(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Edge,getNode0(),,"[{'condition': 'true', 'entities': ['this.getNode0()', 'this.getSourceNode()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.graphstream.graph.Element,getHash(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getId(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,"addAttributes(java.util.Map<java.lang.String, java.lang.Object>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getNumber(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,"setAttribute(java.lang.String, java.lang.Object...)",,"[{'condition': 'true', 'entities': ['this.addAttribute(attribute, values)', 'this.setAttribute(attribute, values)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.graphstream.graph.Element,"addAttribute(java.lang.String, java.lang.Object...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getLabel(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,hasHash(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,hasVector(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,hasAttribute(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,hasNumber(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,"getFirstAttributeOf(java.lang.Class<T>, java.lang.String...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getArray(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getFirstAttributeOf(java.lang.String...),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.graphstream.graph.Element,getVector(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,"changeAttribute(java.lang.String, java.lang.Object...)",,"[{'condition': 'true', 'entities': ['this.addAttribute(attribute, values)', 'this.changeAttribute(attribute, values)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.graphstream.graph.Element,"hasAttribute(java.lang.String, java.lang.Class<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,hasArray(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getAttributeCount(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,removeAttribute(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getEachAttributeKey(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,clearAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,"getAttribute(java.lang.String, java.lang.Class<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getAttribute(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,hasLabel(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getAttributeKeyIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Element,getAttributeKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,getEdgeSetBetween(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,removeEdge(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,"org.graphstream.graph.implementations.MultiNode(org.graphstream.graph.implementations.AbstractGraph, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,clearCallback(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,getEdgeSetBetween(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,getNeighborNodeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,"locateEdge(org.graphstream.graph.Node, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.MultiNode,getEdgeSetBetween(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.SingleNode,clearCallback(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.SingleNode,getNeighborNodeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.SingleNode,"locateEdge(org.graphstream.graph.Node, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.SingleNode,"org.graphstream.graph.implementations.SingleNode(org.graphstream.graph.implementations.AbstractGraph, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.SingleNode,addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.implementations.SingleNode,removeEdge(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getBreadthFirstIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getDepthFirstIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getNeighborNodeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeBetween(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEnteringEdgeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeFrom(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeFrom(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeFrom(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEachEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeToward(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getGraph(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeBetween(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getInDegree(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getBreadthFirstIterator(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEachLeavingEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeFrom(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeBetween(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEachEnteringEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getLeavingEdgeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeToward(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getDepthFirstIterator(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeFrom(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeFrom(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getOutDegree(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getLeavingEdge(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getLeavingEdgeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeToward(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeToward(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEnteringEdge(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdge(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeBetween(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeToward(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEdgeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeToward(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getDegree(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,getEnteringEdgeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeBetween(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Node,hasEdgeBetween(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getNodeCount(),,"[{'condition': 'true', 'entities': ['this.getNodeCount()', 'this.size()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.graphstream.graph.Path,getEachNode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,"push(org.graphstream.graph.Node, org.graphstream.graph.Edge)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.graphstream.graph.Path,getACopy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,contains(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getNodePath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,push(org.graphstream.graph.Edge),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.graphstream.graph.Path,popEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getEdgePath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,equals(org.graphstream.graph.Path),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,peekNode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,setRoot(org.graphstream.graph.Node),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,add(org.graphstream.graph.Edge),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getNodeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getEdgeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,empty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,"add(org.graphstream.graph.Node, org.graphstream.graph.Edge)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,contains(org.graphstream.graph.Edge),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getEachEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getPathWeight(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,org.graphstream.graph.Path(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getEdgeCount(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,removeLoops(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getRoot(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,peekEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,popNode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getEdgeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Path,getNodeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getEdgeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getNodeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getEdgeCount(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getNodeCount(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getNodeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getEdgeIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getEachEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.graph.Structure,getEachNode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,org.graphstream.ui.geom.Vector2(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,"dotProduct(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,length(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,mult(org.graphstream.ui.geom.Vector2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,scalarAdd(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,scalarMult(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,dotProduct(org.graphstream.ui.geom.Vector2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,isZero(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,"set(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,"org.graphstream.ui.geom.Vector2(org.graphstream.ui.geom.Point2, org.graphstream.ui.geom.Point2)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,scalarDiv(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,add(org.graphstream.ui.geom.Vector2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,normalize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,at(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,sub(org.graphstream.ui.geom.Vector2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,copy(org.graphstream.ui.geom.Vector2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,org.graphstream.ui.geom.Vector2(org.graphstream.ui.geom.Vector2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,fill(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,validComponent(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,scalarSub(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,"set(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,x(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,copy(org.graphstream.ui.geom.Point2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,org.graphstream.ui.geom.Vector2(org.graphstream.ui.geom.Point2),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,"org.graphstream.ui.geom.Vector2(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector2,y(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,org.graphstream.ui.geom.Vector3(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,length(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,crossProduct(org.graphstream.ui.geom.Vector3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,add(org.graphstream.ui.geom.Vector3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,"crossProduct(org.graphstream.ui.geom.Vector3, org.graphstream.ui.geom.Vector3)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,scalarDiv(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,sub(org.graphstream.ui.geom.Vector3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,org.graphstream.ui.geom.Vector3(org.graphstream.ui.geom.Vector3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,"dotProduct(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,fill(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,copy(org.graphstream.ui.geom.Vector3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,validComponent(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,"set(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,scalarSub(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,isZero(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,org.graphstream.ui.geom.Vector3(org.graphstream.ui.geom.Point3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,"org.graphstream.ui.geom.Vector3(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,copy(org.graphstream.ui.geom.Point3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,"set(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,normalize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,mult(org.graphstream.ui.geom.Vector3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,scalarAdd(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,dotProduct(org.graphstream.ui.geom.Vector3),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,scalarMult(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.graphstream.ui.geom.Vector3,z(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,apply(java.lang.Character),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,and(com.google.common.base.CharMatcher),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,javaLetterOrDigit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,countIn(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,ascii(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,whitespace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,setBits(java.util.BitSet),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,indexIn(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,noneOf(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,matchesNoneOf(java.lang.CharSequence),,"[{'condition': 'true', 'entities': ['!this.matchesAnyOf(sequence)', 'this.matchesNoneOf(sequence)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.base.CharMatcher,"collapseFrom(java.lang.CharSequence, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,trimTrailingFrom(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,breakingWhitespace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,javaLowerCase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,"inRange(char, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,retainFrom(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,"replaceFrom(java.lang.CharSequence, java.lang.CharSequence)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,isNot(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,precomputed(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,removeFrom(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,trimLeadingFrom(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,singleWidth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,none(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,matchesAllOf(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,lastIndexIn(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,javaDigit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,matchesAnyOf(java.lang.CharSequence),,"[{'condition': 'true', 'entities': ['!this.matchesNoneOf(sequence)', 'this.matchesAnyOf(sequence)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.base.CharMatcher,com.google.common.base.CharMatcher(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,any(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,javaLetter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,is(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,digit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,invisible(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,"indexIn(java.lang.CharSequence, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,forPredicate(com.google.common.base.Predicate<? super java.lang.Character>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,or(com.google.common.base.CharMatcher),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,javaIsoControl(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,negate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,trimFrom(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,anyOf(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,javaUpperCase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,matches(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,precomputedInternal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,"trimAndCollapseFrom(java.lang.CharSequence, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.CharMatcher,"replaceFrom(java.lang.CharSequence, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,or(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,or(com.google.common.base.Predicate<? super T>...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,and(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,and(com.google.common.base.Predicate<? super T>...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,"or(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,in(java.util.Collection<? extends T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,"and(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,defensiveCopy(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,containsPattern(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,instanceOf(java.lang.Class<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,alwaysTrue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,not(com.google.common.base.Predicate<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,contains(java.util.regex.Pattern),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,notNull(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,equalTo(T),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,alwaysFalse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,assignableFrom(java.lang.Class<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,"compose(com.google.common.base.Predicate<B>, com.google.common.base.Function<A, ? extends B>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Predicates,isNull(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,on(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,withKeyValueSeparator(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,withKeyValueSeparator(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,trimResults(),,"[{'condition': 'true', 'entities': ['this.trimResults()', 'this.trimResults(com.google.common.base.CharMatcher.WHITESPACE)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.base.Splitter,limit(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,withKeyValueSeparator(com.google.common.base.Splitter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,omitEmptyStrings(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,onPattern(java.lang.String),,"[{'condition': 'true', 'entities': ['com.google.common.base.Splitter.onPattern(separatorPattern)', 'this.on(java.util.regex.Pattern.compile(separatorPattern))']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.base.Splitter,split(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,trimResults(com.google.common.base.CharMatcher),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,on(com.google.common.base.CharMatcher),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,on(java.util.regex.Pattern),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,on(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,fixedLength(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Splitter,splitToList(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Utf8,encodedLength(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Utf8,"isWellFormed(byte[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.base.Utf8,isWellFormed(byte[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,"fn(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,intValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,sumThenReset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,sum(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,add(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,doubleValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,floatValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,com.google.common.cache.LongAdder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,decrement(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,increment(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,longValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.cache.LongAdder,reset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,"com.google.common.collect.AbstractListMultimap(java.util.Map<K, java.util.Collection<V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,createUnmodifiableEmptyCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractListMultimap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,"setMap(java.util.Map<K, java.util.Collection<V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,entries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,"wrapCollection(K, java.util.Collection<V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,unmodifiableCollectionSubclass(java.util.Collection<V>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,createKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,createAsMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,createUnmodifiableEmptyCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,valueIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,"com.google.common.collect.AbstractMapBasedMultimap(java.util.Map<K, java.util.Collection<V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,backingMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,containsKey(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultimap,createCollection(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,entrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,"setCount(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,"add(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,"remove(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,count(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,"setBackingMap(java.util.Map<E, com.google.common.collect.Count>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,"com.google.common.collect.AbstractMapBasedMultiset(java.util.Map<E, com.google.common.collect.Count>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,distinctElements(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMapBasedMultiset,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,createValues(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,keys(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,createEntries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,createKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,createKeys(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,"putAll(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,valueIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,createAsMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,"putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,entries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultimap,"containsEntry(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,addAll(java.util.Collection<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,add(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,remove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,distinctElements(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,count(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,"add(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,entrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,createElementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,"setCount(E, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,removeAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,retainAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,elementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,"setCount(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,"remove(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractMultiset,createEntrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,createUnmodifiableEmptyCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,entries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,"com.google.common.collect.AbstractSetMultimap(java.util.Map<K, java.util.Collection<V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSetMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedKeySortedSetMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedKeySortedSetMultimap,"com.google.common.collect.AbstractSortedKeySortedSetMultimap(java.util.SortedMap<K, java.util.Collection<V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedKeySortedSetMultimap,backingMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedKeySortedSetMultimap,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,pollLastEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,com.google.common.collect.AbstractSortedMultiset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,pollFirstEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,"subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,createElementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,com.google.common.collect.AbstractSortedMultiset(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,firstEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,descendingMultiset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,createDescendingMultiset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,elementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,lastEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,comparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,descendingIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedMultiset,descendingEntryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,"com.google.common.collect.AbstractSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,createUnmodifiableEmptyCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractSortedSetMultimap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,createValues(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,containsRow(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,"get(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,containsColumn(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,"put(R, C, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,createCellSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,valuesIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,columnKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,"contains(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,cellSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,cellIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.AbstractTable,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayListMultimap,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayListMultimap,"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayListMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayListMultimap,"create(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayListMultimap,trimToSize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,column(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"contains(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"put(R, C, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,cellSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"create(com.google.common.collect.Table<R,, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"at(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,rowKeyList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"set(int, int, V)",,"[{'condition': 'true', 'entities': ['this.put(this.rowKeyList().get(rowIndex), this.columnKeyList().get(columnIndex), value)', 'this.set(rowIndex, columnIndex, value)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.collect.ArrayTable,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"get(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,eraseAll(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,clear(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.ArrayTable,toArray(java.lang.Class<V>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,containsRow(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,row(R),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,cellIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,containsColumn(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"erase(java.lang.Object, java.lang.Object)",,"[{'condition': 'true', 'entities': ['this.erase(rowKey, columnKey)', 'this.put(rowKey, columnKey, null)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.collect.ArrayTable,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,columnKeyList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,rowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.ArrayTable,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,columnMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ArrayTable,columnKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,"safeContains(java.util.Collection<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,orderedPermutations(java.lang.Iterable<E>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.Collections2,"safeRemove(java.util.Collection<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,"containsAllImpl(java.util.Collection<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,permutations(java.util.Collection<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,"filter(java.util.Collection<E>, com.google.common.base.Predicate<? super E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,newStringBuilderForCollection(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,"orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,cast(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,toStringImpl(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Collections2,"transform(java.util.Collection<F>, com.google.common.base.Function<? super, T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,"remove(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,"setCount(E, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,createEntrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,toArray(T[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,createElementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,count(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,create(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,distinctElements(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,"com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,create(com.google.common.collect.MapMaker),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,"add(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,"removeExactly(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ConcurrentHashMultiset,"setCount(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"headSetImpl(C, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,intersection(com.google.common.collect.ContiguousSet<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,range(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.ContiguousSet,"subSet(C, boolean, C, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,com.google.common.collect.ContiguousSet(com.google.common.collect.DiscreteDomain<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"subSet(C, C)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,tailSet(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"tailSetImpl(C, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"headSet(C, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,builder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"create(com.google.common.collect.Range<C>, com.google.common.collect.DiscreteDomain<C>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"tailSet(C, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,"subSetImpl(C, boolean, C, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ContiguousSet,headSet(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,filter(java.lang.Class<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,get(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,anyMatch(com.google.common.base.Predicate<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,toSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,of(E[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,toArray(java.lang.Class<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,toSortedList(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,"toMap(com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,append(E...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,allMatch(com.google.common.base.Predicate<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,cycle(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,com.google.common.collect.FluentIterable(java.lang.Iterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,"transformAndConcat(com.google.common.base.Function<? super, ? extends java.lang.Iterable<? extends T>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,first(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,toMultiset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,"uniqueIndex(com.google.common.base.Function<? super, K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,skip(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,last(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,append(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,com.google.common.collect.FluentIterable(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,"transform(com.google.common.base.Function<? super, T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,copyInto(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,"index(com.google.common.base.Function<? super, K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,toSortedSet(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,firstMatch(com.google.common.base.Predicate<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,join(com.google.common.base.Joiner),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,from(java.lang.Iterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,from(com.google.common.collect.FluentIterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,filter(com.google.common.base.Predicate<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,toList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,limit(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.FluentIterable,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,"contains(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,containsRow(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,containsColumn(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,"get(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,"com.google.common.collect.HashBasedTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.collect.HashBasedTable.Factory<C, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,"create(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,"create(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashBasedTable,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashMultimap,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashMultimap,"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashMultimap,"create(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashMultiset,create(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashMultiset,create(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.HashMultiset,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,toArray(T[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,removeAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,addAll(java.util.Collection<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,remove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,asList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,add(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,retainAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,isPartialView(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,"copyIntoArray(java.lang.Object[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,writeReplace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableCollection,createAsList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"of(K, V, K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,builder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"of(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"of(K, V, K, V, K, V, K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap(com.google.common.collect.ImmutableMap<K, com.google.common.collect.ImmutableList<V>>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K, ? extends V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"of(K, V, K, V, K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,"of(K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,of(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableListMultimap,inverse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,createKeys(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"of(K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,inverse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,containsKey(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,of(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K, ? extends V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,keys(),,"[{'condition': 'true', 'entities': ['this.keySet()', 'this.keys()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,createValues(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"com.google.common.collect.ImmutableMultimap(com.google.common.collect.ImmutableMap<K, ? extends com.google.common.collect.ImmutableCollection<V>>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,isPartialView(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"putAll(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,createAsMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,createEntries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,valueIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"of(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"of(K, V, K, V, K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,entries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,builder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"of(K, V, K, V, K, V, K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultimap,"of(K, V, K, V, K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,entrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"remove(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,getEntry(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"setCount(E, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"of(E, E, E, E, E, E, E...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,of(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,builder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"of(E, E, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,of(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"of(E, E, E, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,copyFromEntries(java.util.Collection<? extends com.google.common.collect.Multiset.Entry<? extends E>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"copyIntoArray(java.lang.Object[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,com.google.common.collect.ImmutableMultiset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"of(E, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"setCount(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,writeReplace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,copyOf(E[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,copyOf(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,copyOf(java.util.Iterator<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"of(E, E, E, E, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,"add(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableMultiset,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,add(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,removeAll(com.google.common.collect.RangeSet<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,encloses(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,span(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,of(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.ImmutableRangeSet,rangeContaining(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,asRanges(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,asSet(com.google.common.collect.DiscreteDomain<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,asDescendingSetOfRanges(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,all(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,complement(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,addAll(com.google.common.collect.RangeSet<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,subRangeSet(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,com.google.common.collect.ImmutableRangeSet(com.google.common.collect.ImmutableList<com.google.common.collect.Range<C>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,isPartialView(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,copyOf(com.google.common.collect.RangeSet<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,writeReplace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,of(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,builder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableRangeSet,remove(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,cellIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,"put(R, C, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,row(R),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,"contains(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,"copyOf(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,cellSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,"of(R, C, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,builder(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.ImmutableTable,createValues(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,columnMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,column(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,columnKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,of(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,"cellOf(R, C, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,rowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,com.google.common.collect.ImmutableTable(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,createCellSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,valuesIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ImmutableTable,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"frequency(java.lang.Iterable<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"filter(java.lang.Iterable<?>, java.lang.Class<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"get(java.lang.Iterable<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,consumingIterable(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"skip(java.lang.Iterable<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"limit(java.lang.Iterable<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"get(java.lang.Iterable<? extends T>, int, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"any(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"transform(java.lang.Iterable<F>, com.google.common.base.Function<? super, ? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,isEmpty(java.lang.Iterable<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"removeFirstMatching(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"indexOf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"find(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"contains(java.lang.Iterable<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"getLast(java.lang.Iterable<? extends T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,cycle(T...),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.Iterables,"partition(java.lang.Iterable<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,cycle(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"removeAll(java.lang.Iterable<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,unmodifiableIterable(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,unmodifiableIterable(com.google.common.collect.ImmutableCollection<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"removeIf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,getOnlyElement(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"toArray(java.lang.Iterable<? extends T>, T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"all(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,toArray(java.lang.Iterable<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"paddedPartition(java.lang.Iterable<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"getFirst(java.lang.Iterable<? extends T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,concat(java.lang.Iterable<? extends T>...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,toString(java.lang.Iterable<?>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.Iterables,"concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"find(java.lang.Iterable<? extends T>, com.google.common.base.Predicate<? super T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,getLast(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"retainAll(java.lang.Iterable<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"getOnlyElement(java.lang.Iterable<? extends T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,size(java.lang.Iterable<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterables,"tryFind(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,forEnumeration(java.util.Enumeration<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"forArray(T[], int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"getLast(java.util.Iterator<? extends T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,cast(java.util.Iterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,toString(java.util.Iterator<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,peekingIterator(java.util.Iterator<? extends T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"advance(java.util.Iterator<?>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"frequency(java.util.Iterator<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"all(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,consumingIterator(java.util.Iterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"limit(java.util.Iterator<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"get(java.util.Iterator<? extends T>, int, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"transform(java.util.Iterator<F>, com.google.common.base.Function<? super, ? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"any(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,pollNext(java.util.Iterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"filter(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,emptyModifiableIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"removeIf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,forArray(T...),,"[{'condition': 'true', 'entities': ['com.google.common.collect.Iterators.forArray(array)', 'java.util.Arrays.asList(array)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.common.collect.Iterators,"tryFind(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,getLast(java.util.Iterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,emptyListIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"getNext(java.util.Iterator<? extends T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,clear(java.util.Iterator<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"partition(java.util.Iterator<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"contains(java.util.Iterator<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"find(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,concat(java.util.Iterator<? extends T>...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"removeAll(java.util.Iterator<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,size(java.util.Iterator<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"getOnlyElement(java.util.Iterator<? extends T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"paddedPartition(java.util.Iterator<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"find(java.util.Iterator<? extends T>, com.google.common.base.Predicate<? super T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,cycle(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,emptyIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,getOnlyElement(java.util.Iterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,cycle(T...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"get(java.util.Iterator<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,asEnumeration(java.util.Iterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,unmodifiableIterator(java.util.Iterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,checkNonnegative(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,singletonIterator(T),,"[{'condition': 'true', 'entities': ['com.google.common.collect.Iterators.singletonIterator(value)', 'java.util.Collections.singleton(value)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.collect.Iterators,peekingIterator(com.google.common.collect.PeekingIterator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"retainAll(java.util.Iterator<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"filter(java.util.Iterator<?>, java.lang.Class<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Iterators,"indexOf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,valueIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,entries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,"create(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,createCollection(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",,"[{'condition': 'true', 'entities': ['com.google.common.collect.LinkedHashMultimap.create(multimap)', 'this.create(multimap)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.common.collect.LinkedHashMultimap,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultiset,create(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultiset,create(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedHashMultiset,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,create(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",,"[{'condition': 'true', 'entities': ['com.google.common.collect.LinkedListMultimap.create(multimap)', 'this.create(multimap)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,containsKey(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,createKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,createValues(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,createEntries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,createAsMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,com.google.common.collect.LinkedListMultimap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.LinkedListMultimap,entries(),,"[{'condition': 'true', 'entities': ['this.asMap().entrySet()', 'this.entries()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.common.collect.ListMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ListMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ListMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ListMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.ListMultimap,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newArrayList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,charactersOf(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"indexOfImpl(java.util.List<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newCopyOnWriteArrayList(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"asList(E, E, E[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newArrayList(E...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newArrayList(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newArrayList(java.util.Iterator<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"addAllImpl(java.util.List<E>, int, java.lang.Iterable<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,computeArrayListCapacity(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newLinkedList(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"asList(E, E[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,charactersOf(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"lastIndexOfImpl(java.util.List<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newCopyOnWriteArrayList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,reverse(java.util.List<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newLinkedList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,hashCodeImpl(java.util.List<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,cast(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"subListImpl(java.util.List<E>, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newArrayListWithExpectedSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"partition(java.util.List<T>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"listIteratorImpl(java.util.List<E>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,newArrayListWithCapacity(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,cartesianProduct(java.util.List<? extends java.util.List<? extends B>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,cartesianProduct(java.util.List<? extends B>...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"equalsImpl(java.util.List<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Lists,"transform(java.util.List<F>, com.google.common.base.Function<? super, ? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,keyFunction(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"valueOrNull(java.util.Map.Entry<?, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"containsEntryImpl(java.util.Collection<java.util.Map.Entry<K, V>>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asValueToValueFunction(com.google.common.collect.Maps.EntryTransformer<? super,, V2>, K)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"uniqueIndex(java.lang.Iterable<V>, com.google.common.base.Function<? super, K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"uniqueIndex(java.util.Iterator<V>, com.google.common.base.Function<? super, K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"keyIterator(java.util.Iterator<java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,valueFunction(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"immutableEnumMap(java.util.Map<K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asEntryToValueFunction(com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asConverter(com.google.common.collect.BiMap<A, B>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asMap(java.util.Set<K>, com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asMap(java.util.SortedSet<K>, com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asMap(java.util.NavigableSet<K>, com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newTreeMap(java.util.Comparator<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"newEnumMap(java.util.Map<K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"unmodifiableEntryIterator(java.util.Iterator<java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"synchronizedBiMap(com.google.common.collect.BiMap<K, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"safeGet(java.util.Map<?, V>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"toStringImpl(java.util.Map<?, ?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newTreeMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"unmodifiableEntrySet(java.util.Set<java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformEntry(com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>, java.util.Map.Entry<K, V1>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterEntries(java.util.Map<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterEntries(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterEntries(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,keyPredicateOnEntries(com.google.common.base.Predicate<? super K>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"unmodifiableBiMap(com.google.common.collect.BiMap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,indexMap(java.util.Collection<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newLinkedHashMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,fromProperties(java.util.Properties),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newLinkedHashMapWithExpectedSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, com.google.common.base.Equivalence<? super V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"newTreeMap(java.util.SortedMap<K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"equalsImpl(java.util.Map<?, ?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,valuePredicateOnEntries(com.google.common.base.Predicate<? super V>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformEntries(java.util.Map<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformEntries(java.util.SortedMap<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformEntries(java.util.NavigableMap<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"unmodifiableEntry(java.util.Map.Entry<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterValues(java.util.Map<K, V>, com.google.common.base.Predicate<? super V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterValues(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterValues(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterValues(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"unmodifiableNavigableMap(java.util.NavigableMap<K, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"safeRemove(java.util.Map<?, V>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newHashMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterKeys(java.util.Map<K, V>, com.google.common.base.Predicate<? super K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterKeys(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterKeys(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"newHashMap(java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"removeEntryImpl(java.util.Collection<java.util.Map.Entry<K, V>>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"valueIterator(java.util.Iterator<java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformValues(java.util.SortedMap<K, V1>, com.google.common.base.Function<? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformValues(java.util.NavigableMap<K, V1>, com.google.common.base.Function<? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,capacity(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asMapSortedIgnoreNavigable(java.util.SortedSet<K>, com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newEnumMap(java.lang.Class<K>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"toMap(java.lang.Iterable<K>, com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"toMap(java.util.Iterator<K>, com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newConcurrentMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"keyOrNull(java.util.Map.Entry<K, ?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"safeContainsKey(java.util.Map<?, ?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"immutableEntry(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asEntryToEntryFunction(com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"newLinkedHashMap(java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"transformEntriesIgnoreNavigable(java.util.SortedMap<K, V1>, com.google.common.collect.Maps.EntryTransformer<? super, ? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"containsValueImpl(java.util.Map<?, ?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"synchronizedNavigableMap(java.util.NavigableMap<K, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,orNaturalOrder(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asEntryTransformer(com.google.common.base.Function<? super, V2>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newHashMapWithExpectedSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"containsKeyImpl(java.util.Map<?, ?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"filterSortedIgnoreNavigable(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map.Entry<K, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"asMapEntryIterator(java.util.Set<K>, com.google.common.base.Function<? super, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,"putAllImpl(java.util.Map<K, V>, java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Maps,newIdentityHashMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,entries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,isEmpty(),,"[{'condition': 'true', 'entities': ['this.isEmpty()', 'this.size() == 0']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.collect.Multimap,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,"putAll(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.Multimap,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,"[{'condition': 'true', 'entities': ['this.removeAll(key)', 'this.replaceValues(key, values)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.collect.Multimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,"putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,containsKey(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,keys(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,"containsEntry(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,unmodifiableMultiset(com.google.common.collect.Multiset<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"retainAllImpl(com.google.common.collect.Multiset<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"union(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"removeAllImpl(com.google.common.collect.Multiset<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"addAllImpl(com.google.common.collect.Multiset<E>, java.util.Collection<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"intersection(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,cast(java.lang.Iterable<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"retainOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"equalsImpl(com.google.common.collect.Multiset<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,unmodifiableMultiset(com.google.common.collect.ImmutableMultiset<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,inferDistinctElements(java.lang.Iterable<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,sizeImpl(com.google.common.collect.Multiset<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"setCountImpl(com.google.common.collect.Multiset<E>, E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"immutableEntry(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"filter(com.google.common.collect.Multiset<E>, com.google.common.base.Predicate<? super E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,iteratorImpl(com.google.common.collect.Multiset<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"setCountImpl(com.google.common.collect.Multiset<E>, E, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"containsOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,copyHighestCountFirst(com.google.common.collect.Multiset<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"sum(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multisets,"removeOccurrences(com.google.common.collect.Multiset<?>, java.lang.Iterable<?>)",,"[{'condition': 'true', 'entities': ['com.google.common.collect.Multisets.removeOccurrences(multisetToModify, occurrencesToRemove)', 'this.removeOccurrences(multisetToModify, occurrencesToRemove)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.collect.Multisets,"removeOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)",,"[{'condition': 'true', 'entities': ['com.google.common.collect.Multisets.removeOccurrences(multisetToModify, occurrencesToRemove)', 'this.removeOccurrences(multisetToModify, occurrencesToRemove)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.collect.Multisets,"difference(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,add(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,entrySet(),,"[{'condition': 'true', 'entities': ['this.entrySet()', 'this.entrySet()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.common.collect.Multiset,"setCount(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,"setCount(E, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,count(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,retainAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,elementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,remove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,removeAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,"add(E, int)",,[],0,0,0,,0,0,2,0,0,1,0,0,0,0
com.google.common.collect.Multiset,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Multiset,"remove(java.lang.Object, int)",,"[{'condition': 'true', 'entities': ['this.remove(element)', 'this.remove(element, occurrences)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.collect.Multiset,containsAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,reverse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,max(java.util.Iterator<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,com.google.common.collect.Ordering(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,min(java.lang.Iterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"max(E, E, E, E...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"compare(T, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,natural(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,explicit(java.util.List<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,min(java.util.Iterator<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"binarySearch(java.util.List<? extends T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"greatestOf(java.util.Iterator<E>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,lexicographical(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,from(java.util.Comparator<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"leastOf(java.util.Iterator<E>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,usingToString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,nullsFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,isStrictlyOrdered(java.lang.Iterable<? extends T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,nullsLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,isOrdered(java.lang.Iterable<? extends T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,immutableSortedCopy(java.lang.Iterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,allEqual(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"explicit(T, T...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"min(E, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,arbitrary(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,onKeys(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,from(com.google.common.collect.Ordering<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,sortedCopy(java.lang.Iterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"onResultOf(com.google.common.base.Function<F, ? extends T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"max(E, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"greatestOf(java.lang.Iterable<E>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"leastOf(java.lang.Iterable<E>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,max(java.lang.Iterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,"min(E, E, E, E...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Ordering,compound(java.util.Comparator<? super U>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,span(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,getEntry(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,asDescendingMapOfRanges(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,"putAll(com.google.common.collect.RangeMap<K, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,asMapOfRanges(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,subRangeMap(com.google.common.collect.Range<K>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,remove(com.google.common.collect.Range<K>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeMap,"put(com.google.common.collect.Range<K>, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,asDescendingSetOfRanges(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,complement(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,remove(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,enclosesAll(com.google.common.collect.RangeSet<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,removeAll(com.google.common.collect.RangeSet<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,span(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,contains(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,rangeContaining(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,addAll(com.google.common.collect.RangeSet<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,asRanges(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,add(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,encloses(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RangeSet,clear(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.RangeSet,subRangeSet(com.google.common.collect.Range<C>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RowSortedTable,rowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.RowSortedTable,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SetMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SetMultimap,entries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SetMultimap,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SetMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SetMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SetMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"union(java.util.Set<? extends E>, java.util.Set<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newLinkedHashSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,synchronizedNavigableSet(java.util.NavigableSet<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"intersection(java.util.Set<E>, java.util.Set<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"newSetFromMap(java.util.Map<E, java.lang.Boolean>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newTreeSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newLinkedHashSetWithExpectedSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newHashSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newConcurrentHashSet(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newTreeSet(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newLinkedHashSet(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,powerSet(java.util.Set<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"removeAllImpl(java.util.Set<?>, java.util.Iterator<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newHashSet(E...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newHashSet(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newHashSet(java.util.Iterator<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"filter(java.util.Set<E>, com.google.common.base.Predicate<? super E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"filter(java.util.SortedSet<E>, com.google.common.base.Predicate<? super E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"filterSortedIgnoreNavigable(java.util.SortedSet<E>, com.google.common.base.Predicate<? super E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"filter(java.util.NavigableSet<E>, com.google.common.base.Predicate<? super E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"immutableEnumSet(E, E...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newIdentityHashSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,immutableEnumSet(java.lang.Iterable<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newCopyOnWriteArraySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newCopyOnWriteArraySet(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"removeAllImpl(java.util.Set<?>, java.util.Collection<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,complementOf(java.util.Collection<E>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.Sets,cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,cartesianProduct(java.util.Set<? extends B>...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"difference(java.util.Set<E>, java.util.Set<?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"equalsImpl(java.util.Set<?>, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newTreeSet(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newConcurrentHashSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,hashCodeImpl(java.util.Set<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,newHashSetWithExpectedSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Sets,"complementOf(java.util.Collection<E>, java.lang.Class<E>)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.collect.Sets,unmodifiableNavigableSet(java.util.NavigableSet<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedIterable,comparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedIterable,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedLists,"binarySearch(java.util.List<E>, com.google.common.base.Function<? super, K>, K, java.util.Comparator<? super K>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedLists,"binarySearch(java.util.List<E>, com.google.common.base.Function<? super, K>, K, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedLists,"binarySearch(java.util.List<? extends E>, E, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedLists,"binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists.KeyPresentBehavior, com.google.common.collect.SortedLists.KeyAbsentBehavior)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultisetBridge,elementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,"headMultiset(E, com.google.common.collect.BoundType)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,"tailMultiset(E, com.google.common.collect.BoundType)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,lastEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,pollFirstEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,firstEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,pollLastEntry(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,elementSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,descendingMultiset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,"subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)",,"[{'condition': 'true', 'entities': ['this.subMultiset(lowerBound, lowerBoundType, upperBound, upperBoundType)', 'this.tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound, upperBoundType)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,entrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedMultiset,comparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedSetMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedSetMultimap,valueComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedSetMultimap,"replaceValues(K, java.lang.Iterable<? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedSetMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.SortedSetMultimap,removeAll(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardRowSortedTable,"com.google.common.collect.StandardRowSortedTable(java.util.SortedMap<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardRowSortedTable,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardRowSortedTable,createRowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardRowSortedTable,rowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,containsColumn(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,rowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,"put(R, C, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,cellSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,"get(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,createRowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,createColumnKeyIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,"contains(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,row(R),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,containsRow(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,columnMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,column(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,cellIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,columnKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.StandardTable,"com.google.common.collect.StandardTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,cellSet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,columnMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,"putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,column(C),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,containsColumn(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,"contains(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,"put(R, C, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,rowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,"get(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,columnKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,row(R),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,containsRow(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.Table,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,rowKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,columnComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,rowComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,row(R),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,rowMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,createColumnKeyIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,"com.google.common.collect.TreeBasedTable(java.util.Comparator<? super R>, java.util.Comparator<? super C>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,"create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeBasedTable,"create(com.google.common.collect.TreeBasedTable<R,, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,unmodifiableCollectionSubclass(java.util.Collection<V>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,keyComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,"wrapCollection(K, java.util.Collection<V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,asMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,createKeySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,"create(com.google.common.collect.Multimap<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,valueComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,"create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,"com.google.common.collect.TreeMultimap(java.util.Comparator<? super K>, java.util.Comparator<? super V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,backingMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,get(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,createAsMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,createCollection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,createCollection(K),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultimap,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,count(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,"setCount(E, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,"remove(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,"tailMultiset(E, com.google.common.collect.BoundType)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,distinctElements(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,"headMultiset(E, com.google.common.collect.BoundType)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,"setCount(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,"add(E, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,create(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,entryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,create(java.lang.Iterable<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,descendingEntryIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,"com.google.common.collect.TreeMultiset(com.google.common.collect.TreeMultiset.Reference<com.google.common.collect.TreeMultiset.AvlNode<E>>, com.google.common.collect.GeneralRange<E>, com.google.common.collect.TreeMultiset.AvlNode<E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.collect.TreeMultiset,distinctElements(com.google.common.collect.TreeMultiset.AvlNode<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putDouble(double),,"[{'condition': 'true', 'entities': ['this.putDouble(d)', 'this.putLong(java.lang.Double.doubleToRawLongBits(d))']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.hash.Hasher,"putObject(T, com.google.common.hash.Funnel<? super T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putFloat(float),,"[{'condition': 'true', 'entities': ['this.putFloat(f)', 'this.putInt(java.lang.Float.floatToRawIntBits(f))']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.hash.Hasher,putBytes(byte[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putShort(short),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putLong(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putByte(byte),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putBoolean(boolean),,"[{'condition': 'true', 'entities': ['this.putBoolean(b)', 'this.putByte(b ? (byte) 1 : (byte) 0)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.hash.Hasher,putUnencodedChars(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putChar(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,"putBytes(byte[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,putInt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.hash.Hasher,"putString(java.lang.CharSequence, java.nio.charset.Charset)",,"[{'condition': 'true', 'entities': ['this.putBytes(charSequence.toString().getBytes(charset))', 'this.putString(charSequence, charset)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.hash.Hasher,hash(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,empty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,hash(com.google.common.hash.HashFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,com.google.common.io.ByteSource(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,copyTo(com.google.common.io.ByteSink),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,openStream(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,concat(java.lang.Iterable<? extends com.google.common.io.ByteSource>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,openBufferedStream(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,contentEquals(com.google.common.io.ByteSource),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,read(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,wrap(byte[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,asCharSource(java.nio.charset.Charset),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,sizeIfKnown(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,copyTo(java.io.OutputStream),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,concat(java.util.Iterator<? extends com.google.common.io.ByteSource>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,concat(com.google.common.io.ByteSource...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,read(com.google.common.io.ByteProcessor<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.ByteSource,"slice(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSink,write(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSink,openStream(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSink,"writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSink,com.google.common.io.CharSink(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSink,openBufferedStream(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSink,writeLines(java.lang.Iterable<? extends java.lang.CharSequence>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.io.CharSink,writeFrom(java.lang.Readable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,copyTo(java.lang.Appendable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,openStream(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,readLines(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,readFirstLine(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,length(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,empty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,concat(java.lang.Iterable<? extends com.google.common.io.CharSource>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,wrap(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,read(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,com.google.common.io.CharSource(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,lengthIfKnown(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,concat(java.util.Iterator<? extends com.google.common.io.CharSource>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,concat(com.google.common.io.CharSource...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,openBufferedStream(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,copyTo(com.google.common.io.CharSink),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.CharSource,readLines(com.google.common.io.LineProcessor<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.Flushables,"flush(java.io.Flushable, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.io.Flushables,flushQuietly(java.io.Flushable),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.math.DoubleMath,mean(double...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,"log2(double, java.math.RoundingMode)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,"roundToLong(double, java.math.RoundingMode)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,mean(int...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,"roundToBigInteger(double, java.math.RoundingMode)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,mean(long...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,"fuzzyEquals(double, double, double)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.util.Precision.equals(a, b, tolerance)', 'org.apache.commons.math3.util.Precision.equals(a, b, tolerance)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.math.DoubleMath,"roundToInt(double, java.math.RoundingMode)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,"fuzzyCompare(double, double, double)",,"[{'condition': 'true', 'entities': ['com.google.common.math.DoubleMath.fuzzyCompare(a, b, tolerance)', 'this.fuzzyEquals(a, b, tolerance) ? 0 : java.lang.Double.compare(a, b)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.math.DoubleMath,isPowerOfTwo(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,mean(java.lang.Iterable<? extends java.lang.Number>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,mean(java.util.Iterator<? extends java.lang.Number>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,"roundIntermediate(double, java.math.RoundingMode)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,log2(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.math.DoubleMath,isMathematicalInteger(double),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.math.DoubleMath,factorial(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,topPrivateDomain(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,hasParent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,child(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,isTopPrivateDomain(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,isUnderPublicSuffix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,parent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,publicSuffix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,isValid(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,parts(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,hasPublicSuffix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,from(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,isPublicSuffix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.net.InternetDomainName,com.google.common.net.InternetDomainName(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,toArray(java.util.Collection<java.lang.Boolean>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,countTrue(boolean...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,"join(java.lang.String, boolean...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,"compare(boolean, boolean)",,[],0,0,0,,0,0,2,0,0,1,0,0,0,0
com.google.common.primitives.Booleans,lexicographicalComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,"indexOf(boolean[], boolean[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,"ensureCapacity(boolean[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,concat(boolean[]...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,asList(boolean...),,"[{'condition': 'true', 'entities': ['java.util.Arrays.asList(backingArray)', 'java.util.Arrays.asList(backingArray)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Booleans,hashCode(boolean),,"[{'condition': 'true', 'entities': ['((Boolean) value).hashCode()', 'java.lang.Boolean.hashCode(value)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Booleans,"lastIndexOf(boolean[], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,"contains(boolean[], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Booleans,"indexOf(boolean[], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,checkedCast(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,min(char...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,"fromBytes(byte, byte)",,"[{'condition': 'true', 'entities': ['com.google.common.primitives.Chars.fromBytes(b1, b2)', 'this.fromByteArray(new byte[] { b1, b2 })']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Chars,"compare(char, char)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Chars,"join(java.lang.String, char...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,toArray(java.util.Collection<java.lang.Character>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,"indexOf(char[], char[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,asList(char...),,"[{'condition': 'true', 'entities': ['java.util.Arrays.asList(backingArray)', 'java.util.Arrays.asList(backingArray)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Chars,saturatedCast(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,concat(char[]...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,"ensureCapacity(char[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,"contains(char[], char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,fromByteArray(byte[]),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Chars,lexicographicalComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,toByteArray(char),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Chars,hashCode(char),,"[{'condition': 'true', 'entities': ['((Character) value).hashCode()', 'java.lang.Character.hashCode(value)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Chars,"lastIndexOf(char[], char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,max(char...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Chars,"indexOf(char[], char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,tryParse(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,max(double...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,"compare(double, double)",,[],0,0,0,,0,0,2,0,0,1,0,0,0,0
com.google.common.primitives.Doubles,"join(java.lang.String, double...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,"indexOf(double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,concat(double[]...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,lexicographicalComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,stringConverter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,toArray(java.util.Collection<? extends java.lang.Number>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,min(double...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,asList(double...),,"[{'condition': 'true', 'entities': ['java.util.Arrays.asList(backingArray)', 'java.util.Arrays.asList(backingArray)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Doubles,"lastIndexOf(double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,"ensureCapacity(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,"indexOf(double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Doubles,isFinite(double),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Doubles,hashCode(double),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Doubles,"contains(double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,"ensureCapacity(float[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,asList(float...),,"[{'condition': 'true', 'entities': ['java.util.Arrays.asList(backingArray)', 'java.util.Arrays.asList(backingArray)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Floats,"indexOf(float[], float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,concat(float[]...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,toArray(java.util.Collection<? extends java.lang.Number>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,stringConverter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,hashCode(float),,"[{'condition': 'true', 'entities': ['((Float) value).hashCode()', 'java.lang.Float.hashCode(value)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Floats,lexicographicalComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,max(float...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,"lastIndexOf(float[], float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,"join(java.lang.String, float...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,"contains(float[], float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,"indexOf(float[], float[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,isFinite(float),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Floats,tryParse(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Floats,"compare(float, float)",,[],0,0,0,,0,0,2,0,0,1,0,0,0,0
com.google.common.primitives.Floats,min(float...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,min(int...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,"indexOf(int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,concat(int[]...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,toByteArray(int),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Ints,"ensureCapacity(int[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,toArray(java.util.Collection<? extends java.lang.Number>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,"fromBytes(byte, byte, byte, byte)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Ints,hashCode(int),,"[{'condition': 'true', 'entities': ['((Integer) value).hashCode()', 'java.lang.Integer.hashCode(value)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Ints,"compare(int, int)",,"[{'condition': 'true', 'entities': ['cern.colt.function.IntComparator.compare(a, b)', 'java.lang.Integer.compare(a, b)']}]",1,0,0,,0,1,2,1,0,0,0,0,0,0
com.google.common.primitives.Ints,max(int...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,"join(java.lang.String, int...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,stringConverter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,lexicographicalComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,asList(int...),,"[{'condition': 'true', 'entities': ['java.util.Arrays.asList(backingArray)', 'java.util.Arrays.asList(backingArray)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Ints,saturatedCast(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,"indexOf(int[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,tryParse(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,"lastIndexOf(int[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,fromByteArray(byte[]),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Ints,"tryParse(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,"contains(int[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Ints,checkedCast(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,"indexOf(long[], long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,tryParse(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,asList(long...),,"[{'condition': 'true', 'entities': ['java.util.Arrays.asList(backingArray)', 'java.util.Arrays.asList(backingArray)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Longs,"tryParse(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,"lastIndexOf(long[], long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,"indexOf(long[], long[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,fromByteArray(byte[]),,"[{'condition': 'true', 'entities': ['com.google.common.primitives.Longs.fromByteArray(bytes)', 'java.nio.ByteBuffer.wrap(bytes).getLong()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.primitives.Longs,max(long...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,concat(long[]...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,"ensureCapacity(long[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,"compare(long, long)",,"[{'condition': 'true', 'entities': ['cern.colt.function.LongComparator.compare(a, b)', 'java.lang.Long.compare(a, b)']}]",1,0,0,,0,1,2,1,0,0,0,0,0,0
com.google.common.primitives.Longs,min(long...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,stringConverter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,"contains(long[], long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,toByteArray(long),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Longs,"fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Longs,hashCode(long),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Longs,lexicographicalComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,"join(java.lang.String, long...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Longs,toArray(java.util.Collection<? extends java.lang.Number>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,"indexOf(short[], short)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,fromByteArray(byte[]),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Shorts,"join(java.lang.String, short...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,lexicographicalComparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,"indexOf(short[], short[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,max(short...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,"compare(short, short)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Shorts,checkedCast(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,toArray(java.util.Collection<? extends java.lang.Number>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,"ensureCapacity(short[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,hashCode(short),,"[{'condition': 'true', 'entities': ['((Short) value).hashCode()', 'java.lang.Short.hashCode(value)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Shorts,saturatedCast(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,concat(short[]...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,"contains(short[], short)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,stringConverter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,"lastIndexOf(short[], short)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.primitives.Shorts,"fromBytes(byte, byte)",,"[{'condition': 'true', 'entities': ['com.google.common.primitives.Shorts.fromByteArray(new byte[] { b1, b2 })', 'com.google.common.primitives.Shorts.fromBytes(b1, b2)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.primitives.Shorts,asList(short...),,"[{'condition': 'true', 'entities': ['java.util.Arrays.asList(backingArray)', 'java.util.Arrays.asList(backingArray)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.common.primitives.Shorts,toByteArray(short),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.common.primitives.Shorts,min(short...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.reflect.TypeToInstanceMap,"putInstance(com.google.common.reflect.TypeToken<T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.reflect.TypeToInstanceMap,"putInstance(java.lang.Class<T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.reflect.TypeToInstanceMap,getInstance(java.lang.Class<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.reflect.TypeToInstanceMap,getInstance(com.google.common.reflect.TypeToken<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.CycleDetectingLockFactory,newReentrantReadWriteLock(java.lang.String),,"[{'condition': 'true', 'entities': ['this.newReentrantReadWriteLock(lockName)', 'this.newReentrantReadWriteLock(lockName, false)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.util.concurrent.CycleDetectingLockFactory,"newInstanceWithExplicitOrdering(java.lang.Class<E>, com.google.common.util.concurrent.CycleDetectingLockFactory.Policy)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.CycleDetectingLockFactory,createNodes(java.lang.Class<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.CycleDetectingLockFactory,newReentrantLock(java.lang.String),,"[{'condition': 'true', 'entities': ['this.newReentrantLock(lockName)', 'this.newReentrantLock(lockName, false)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.util.concurrent.CycleDetectingLockFactory,"newReentrantReadWriteLock(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.CycleDetectingLockFactory,"newReentrantLock(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.CycleDetectingLockFactory,newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory.Policy),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.JdkFutureAdapters,listenInPoolThread(java.util.concurrent.Future<V>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.JdkFutureAdapters,"listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"enterInterruptibly(long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,waitFor(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,hasQueuedThreads(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,hasQueuedThread(java.lang.Thread),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,leave(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,com.google.common.util.concurrent.Monitor(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"enterWhen(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,isFair(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,getWaitQueueLength(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,tryEnter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"waitFor(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,tryEnterIf(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,enterIf(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"enterIfInterruptibly(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,com.google.common.util.concurrent.Monitor(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,enterInterruptibly(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,getOccupiedDepth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"waitForUninterruptibly(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"enter(long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,waitForUninterruptibly(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,enter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,enterIfInterruptibly(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,hasWaiters(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,"enterIf(com.google.common.util.concurrent.Monitor.Guard, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,isOccupiedByCurrentThread(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,enterWhen(com.google.common.util.concurrent.Monitor.Guard),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,getQueueLength(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.Monitor,isOccupied(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"renamingDecorator(java.util.concurrent.ExecutorService, com.google.common.base.Supplier<java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"renamingDecorator(java.util.concurrent.ScheduledExecutorService, com.google.common.base.Supplier<java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService, java.util.Collection<? extends java.util.concurrent.Callable<T>>, boolean, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,directExecutor(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,listeningDecorator(java.util.concurrent.ExecutorService),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,listeningDecorator(java.util.concurrent.ScheduledExecutorService),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"renamingDecorator(java.util.concurrent.Executor, com.google.common.base.Supplier<java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,newDirectExecutorService(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,sameThreadExecutor(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"newThread(java.lang.String, java.lang.Runnable)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,"getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,platformThreadFactory(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.MoreExecutors,getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,acquire(),,"[{'condition': 'true', 'entities': ['this.acquire()', 'this.acquire(1)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,tryAcquire(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,tryAcquire(),,"[{'condition': 'true', 'entities': ['this.tryAcquire()', 'this.tryAcquire(1)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"reserveAndGetWaitLength(int, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,getRate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"tryAcquire(long, java.util.concurrent.TimeUnit)",,"[{'condition': 'true', 'entities': ['this.tryAcquire(1, timeout, unit)', 'this.tryAcquire(timeout, unit)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter.SleepingStopwatch),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"tryAcquire(int, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,queryEarliestAvailable(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"doSetRate(double, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,doGetRate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,acquire(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"reserveEarliestAvailable(int, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,create(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,reserve(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"create(double, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"create(com.google.common.util.concurrent.RateLimiter.SleepingStopwatch, double, long, java.util.concurrent.TimeUnit, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,setRate(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.common.util.concurrent.RateLimiter,"create(com.google.common.util.concurrent.RateLimiter.SleepingStopwatch, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,cancel(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,"run(int, double)",,"[{'condition': 'true', 'entities': ['this.run(duration, startTime)', 'this.run(duration, startTime, null)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,interpolate(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,com.google.gwt.animation.client.Animation(com.google.gwt.animation.client.AnimationScheduler),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,run(int),,"[{'condition': 'true', 'entities': ['this.run(duration)', 'this.run(duration, null)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,"run(int, com.google.gwt.dom.client.Element)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,"run(int, double, com.google.gwt.dom.client.Element)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,onStart(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,onComplete(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,com.google.gwt.animation.client.Animation(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,onCancel(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.animation.client.Animation,onUpdate(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.impl.WeakMapping,"get(java.lang.Object, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.impl.WeakMapping,"set(java.lang.Object, java.lang.String, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.impl.WeakMapping,"setWeak(java.lang.Object, java.lang.String, java.lang.Object)",,"[{'condition': 'true', 'entities': ['this.set(instance, key, value)', 'this.setWeak(instance, key, value)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.gwt.core.client.JsDate,toDateString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,toLocaleDateString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,toLocaleTimeString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getTimezoneOffset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setTime(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setYear(int),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.core.client.JsDate,getTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setUTCMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCHours(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"UTC(int, int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getMilliseconds(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"create(int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"create(int, int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setHours(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCMilliseconds(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getYear(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.core.client.JsDate,"setHours(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getHours(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setDate(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setMinutes(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setMinutes(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getDate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setUTCHours(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCHours(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setFullYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setSeconds(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getFullYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setFullYear(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getMinutes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setSeconds(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setFullYear(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCMinutes(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCDay(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setUTCSeconds(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,create(double),,"[{'condition': 'true', 'entities': ['com.google.gwt.core.client.JsDate.create(milliseconds)', 'this.create(milliseconds)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.gwt.core.client.JsDate,getDay(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCSeconds(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,com.google.gwt.core.client.JsDate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,parse(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCFullYear(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,toLocaleString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setUTCFullYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setUTCMinutes(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getSeconds(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCDate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,valueOf(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"create(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setUTCDate(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"create(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCFullYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,toTimeString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,create(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"create(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setMonth(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,toUTCString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCMonth(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setHours(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCHours(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,create(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCHours(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,toGMTString(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCFullYear(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"create(int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setHours(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,setMinutes(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCMinutes(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,"setUTCSeconds(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.core.client.JsDate,getUTCMinutes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,addTo(com.google.gwt.i18n.client.AutoDirectionHandler.Target),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,setDirectionEstimator(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,"addTo(com.google.gwt.i18n.client.AutoDirectionHandler.Target, boolean)",,"[{'condition': 'true', 'entities': ['com.google.gwt.i18n.client.AutoDirectionHandler.addTo(target, enabled ? new WordCountDirectionEstimator() : null)', 'com.google.gwt.i18n.client.AutoDirectionHandler.addTo(target, enabled)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,getDirectionEstimator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,"addTo(com.google.gwt.i18n.client.AutoDirectionHandler.Target, com.google.gwt.i18n.shared.DirectionEstimator)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,setDirectionEstimator(com.google.gwt.i18n.shared.DirectionEstimator),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.AutoDirectionHandler,refreshDirection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,getCurrencyCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,isSymbolPositionFixed(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,getDefaultFractionDigits(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,getPortableCurrencySymbol(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,isSymbolPrefix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,isSpacingFixed(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,getSimpleCurrencySymbol(),,"[{'condition': 'true', 'entities': ['this.getCurrencySymbol()', 'this.getSimpleCurrencySymbol()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,getCurrencySymbol(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,isDeprecated(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.client.CurrencyData,isSpaceForced(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,getMatchLocale(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,getRequiredString(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,setPath(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,getPath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,getString(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,"getExtendedKey(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,"getStringExt(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,getExtensions(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,com.google.gwt.i18n.rebind.AbstractResource(com.google.gwt.i18n.shared.GwtLocale),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,"getRequiredStringExt(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,notEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,getEntry(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,toVerboseString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.rebind.AbstractResource,addToKeySet(java.util.Set<java.lang.String>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"unicodeWrapWithKnownDirBase(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"estimateDirection(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"dirAttrBase(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,knownDirAttrBase(com.google.gwt.i18n.client.HasDirection.Direction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"spanWrapBase(java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"com.google.gwt.i18n.shared.BidiFormatterBase(com.google.gwt.i18n.client.HasDirection.Direction, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"spanWrapWithKnownDirBase(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"unicodeWrapBase(java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,getContextDir(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,isRtlContext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,getAlwaysSpan(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,startEdgeBase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,markBase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,endEdgeBase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,"markAfterBase(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatterBase,estimateDirection(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"spanWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,getInstance(com.google.gwt.i18n.client.HasDirection.Direction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,getInstance(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,mark(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,markAfter(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"spanWrap(java.lang.String, boolean)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,knownDirAttr(com.google.gwt.i18n.client.HasDirection.Direction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,endEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,getInstanceForCurrentLocale(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"unicodeWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"unicodeWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"getInstance(com.google.gwt.i18n.client.HasDirection.Direction, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"spanWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,startEdge(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,dirAttr(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,getInstanceForCurrentLocale(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,spanWrap(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"unicodeWrap(java.lang.String, boolean)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"spanWrap(java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"unicodeWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"dirAttr(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,unicodeWrap(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"markAfter(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"spanWrapWithKnownDir(com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"getInstance(boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiFormatter,"unicodeWrap(java.lang.String, boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"estimateDirection(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,startsWithRtl(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"endsWithLtr(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"endsWithRtl(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,startsWithLtr(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,estimateDirection(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,get(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,endsWithRtl(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"startsWithLtr(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"startsWithRtl(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"stripHtmlIfNeeded(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"hasAnyLtr(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,endsWithLtr(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,hasAnyRtl(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,hasAnyLtr(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.i18n.shared.BidiUtils,"hasAnyRtl(java.lang.String, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,getGlobal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,"compile(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,split(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,exec(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,"split(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,getIgnoreCase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,setLastIndex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,getLastIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,"replace(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,getMultiline(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,getSource(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,test(java.lang.String),,"[{'condition': 'true', 'entities': ['this.exec(input) != null', 'this.test(input)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.regexp.shared.RegExp,compile(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.safecss.shared.SafeStyles,asString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.safecss.shared.SafeStyles,hashCode(),,"[{'condition': 'true', 'entities': ['this.asString().hashCode()', 'this.hashCode()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.safecss.shared.SafeStyles,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.safehtml.shared.SafeHtml,hashCode(),,"[{'condition': 'true', 'entities': ['this.asString().hashCode()', 'this.hashCode()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.safehtml.shared.SafeHtml,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.safehtml.shared.SafeHtml,asString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.safehtml.shared.SafeUri,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.safehtml.shared.SafeUri,hashCode(),,"[{'condition': 'true', 'entities': ['this.asString().hashCode()', 'this.hashCode()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.safehtml.shared.SafeUri,asString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getVisibleItemCount(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"insertItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction, int)",,"[{'condition': 'true', 'entities': ['this.insertItem(item, dir, index)', 'this.insertItem(item, dir, item, index)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"insertItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,isMultipleSelect(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getItemText(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,com.google.gwt.user.client.ui.ListBox(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"addItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"setItemSelected(int, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,setName(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"setValue(int, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,setDirectionEstimator(com.google.gwt.i18n.shared.DirectionEstimator),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getValue(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,removeItem(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"setOptionText(com.google.gwt.dom.client.OptionElement, java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"setItemText(int, java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"insertItem(java.lang.String, java.lang.String, int)",,"[{'condition': 'true', 'entities': ['this.insertItem(item, null, value, index)', 'this.insertItem(item, value, index)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,setVisibleItemCount(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,isItemSelected(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"setItemText(int, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,addItem(java.lang.String),,"[{'condition': 'true', 'entities': ['this.addItem(item)', 'this.addItem(item, item)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,wrap(com.google.gwt.dom.client.Element),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,addChangeListener(com.google.gwt.user.client.ui.ChangeListener),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getItemCount(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,setSelectedIndex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,addChangeHandler(com.google.gwt.event.dom.client.ChangeHandler),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,com.google.gwt.user.client.ui.ListBox(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"insertItem(java.lang.String, int)",,"[{'condition': 'true', 'entities': ['this.insertItem(item, index)', 'this.insertItem(item, item, index)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getDirectionEstimator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,setMultipleSelect(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,com.google.gwt.user.client.ui.ListBox(com.google.gwt.dom.client.Element),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"addItem(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getSelectedIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,"addItem(java.lang.String, com.google.gwt.i18n.client.HasDirection.Direction)",,"[{'condition': 'true', 'entities': ['this.addItem(item, dir)', 'this.addItem(item, dir, item)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,onEnsureDebugId(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,removeChangeListener(com.google.gwt.user.client.ui.ChangeListener),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,getOptionText(com.google.gwt.dom.client.OptionElement),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.client.ui.ListBox,setDirectionEstimator(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"encodeResponseForSuccess(java.lang.reflect.Method, java.lang.Object, com.google.gwt.user.server.rpc.SerializationPolicy)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,decodeRequest(java.lang.String),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"decodeRequest(java.lang.String, java.lang.Class<?>, com.google.gwt.user.server.rpc.SerializationPolicyProvider)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"encodeResponseForSuccess(java.lang.reflect.Method, java.lang.Object, com.google.gwt.user.server.rpc.SerializationPolicy, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"decodeRequest(java.lang.String, java.lang.Class<?>)",,"[{'condition': 'true', 'entities': ['com.google.gwt.user.server.rpc.RPC.decodeRequest(encodedRequest)', 'com.google.gwt.user.server.rpc.RPC.decodeRequest(encodedRequest, type)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"invokeAndEncodeResponse(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,getDefaultSerializationPolicy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"encodeResponseForFailure(java.lang.reflect.Method, java.lang.Throwable)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"encodeResponseForFailure(java.lang.reflect.Method, java.lang.Throwable, com.google.gwt.user.server.rpc.SerializationPolicy, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"invokeAndEncodeResponse(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], com.google.gwt.user.server.rpc.SerializationPolicy)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"encodeResponseForSuccess(java.lang.reflect.Method, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"invokeAndEncodeResponse(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], com.google.gwt.user.server.rpc.SerializationPolicy, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.gwt.user.server.rpc.RPC,"encodeResponseForFailure(java.lang.reflect.Method, java.lang.Throwable, com.google.gwt.user.server.rpc.SerializationPolicy)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.autobean.vm.impl.TypeUtils,getDefaultPrimitiveValue(java.lang.Class<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.autobean.vm.impl.TypeUtils,ensureBaseType(java.lang.reflect.Type),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.web.bindery.autobean.vm.impl.TypeUtils,"getSingleParameterization(java.lang.Class<?>, java.lang.reflect.Type...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.autobean.vm.impl.TypeUtils,maybeAutobox(java.lang.Class<V>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.autobean.vm.impl.TypeUtils,isValueType(java.lang.Class<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.autobean.vm.impl.TypeUtils,"getParameterization(java.lang.Class<?>, java.lang.reflect.Type...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.Request,fire(com.google.web.bindery.requestfactory.shared.Receiver<? super T>),,"[{'condition': 'true', 'entities': ['this.fire(receiver)', 'this.to(...).fire()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.Request,to(com.google.web.bindery.requestfactory.shared.Receiver<? super T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.Request,fire(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.Request,with(java.lang.String...),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.Request,getRequestContext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,getProxyClass(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,getSerializer(com.google.web.bindery.requestfactory.shared.ProxyStore),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,getHistoryToken(com.google.web.bindery.requestfactory.shared.EntityProxyId<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,getProxyId(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,initialize(com.google.web.bindery.event.shared.EventBus),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,find(com.google.web.bindery.requestfactory.shared.EntityProxyId<P>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,getHistoryToken(java.lang.Class<? extends com.google.web.bindery.requestfactory.shared.EntityProxy>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,getEventBus(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,"initialize(com.google.web.bindery.event.shared.EventBus, com.google.web.bindery.requestfactory.shared.RequestTransport)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
com.google.web.bindery.requestfactory.shared.testing.FakeRequestFactory,getRequestTransport(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader(javax.xml.stream.XMLEventReader),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,"org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader(javax.xml.stream.XMLEventReader, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,getBuffer(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,internalNextEvent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,hasNext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,peek(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,mark(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,mark(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,reset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,close(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,bufferSize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.boot.jaxb.internal.stax.BufferedXMLEventReader,remove(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,"org.hibernate.criterion.Example(java.lang.Object, org.hibernate.criterion.Example.PropertySelector)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,create(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,setEscapeCharacter(java.lang.Character),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,enableLike(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,enableLike(org.hibernate.criterion.MatchMode),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,ignoreCase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,setPropertySelector(org.hibernate.criterion.Example.PropertySelector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,excludeZeroes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,excludeNone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,excludeProperty(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,"toSqlString(org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,"getTypedValues(org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,"addPropertyTypedValue(java.lang.Object, org.hibernate.type.Type, java.util.List<org.hibernate.engine.spi.TypedValue>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,"addComponentTypedValues(java.lang.String, java.lang.Object, org.hibernate.type.CompositeType, java.util.List<org.hibernate.engine.spi.TypedValue>, org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,"appendPropertyCondition(java.lang.String, java.lang.Object, org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery, java.lang.StringBuilder)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,"appendComponentCondition(java.lang.String, java.lang.Object, org.hibernate.type.CompositeType, org.hibernate.Criteria, org.hibernate.criterion.CriteriaQuery, java.lang.StringBuilder)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.criterion.Example,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,org.hibernate.dialect.pagination.SQLServer2005LimitHandler(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,supportsLimit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,useMaxForLimit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,supportsLimitOffset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,supportsVariableLimit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,convertToFirstRowValue(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,"processSql(java.lang.String, org.hibernate.engine.spi.RowSelection)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,"bindLimitParametersAtStartOfQuery(org.hibernate.engine.spi.RowSelection, java.sql.PreparedStatement, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,"bindLimitParametersAtEndOfQuery(org.hibernate.engine.spi.RowSelection, java.sql.PreparedStatement, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,"fillAliasInSelectClause(java.lang.StringBuilder, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,"encloseWithOuterQuery(java.lang.StringBuilder, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.dialect.pagination.SQLServer2005LimitHandler,"addTopExpression(java.lang.StringBuilder, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider,getAnyConnection(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider,releaseAnyConnection(java.sql.Connection),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider,getConnection(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider,"releaseConnection(java.lang.String, java.sql.Connection)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider,supportsAggressiveRelease(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.spi.ResultSetReturn,extract(java.sql.PreparedStatement),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.spi.ResultSetReturn,extract(java.sql.CallableStatement),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.spi.ResultSetReturn,"extract(java.sql.Statement, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.spi.ResultSetReturn,execute(java.sql.PreparedStatement),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.spi.ResultSetReturn,"execute(java.sql.Statement, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.spi.ResultSetReturn,executeUpdate(java.sql.PreparedStatement),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.jdbc.spi.ResultSetReturn,"executeUpdate(java.sql.Statement, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,"org.hibernate.engine.spi.SubselectFetch(java.lang.String, org.hibernate.persister.entity.Loadable, org.hibernate.engine.spi.QueryParameters, java.util.Set, java.util.Map)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,"org.hibernate.engine.spi.SubselectFetch(java.lang.String, java.lang.String, org.hibernate.persister.entity.Loadable, org.hibernate.engine.spi.QueryParameters, java.util.Set, java.util.Map)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,createSubselectFetchQueryFragment(org.hibernate.engine.spi.QueryParameters),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,getQueryParameters(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,getResult(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,toSubselectString(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.engine.spi.SubselectFetch,getNamedParameterLocMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int, int, org.hibernate.internal.util.collections.BoundedConcurrentHashMap.Eviction, org.hibernate.internal.util.collections.BoundedConcurrentHashMap.EvictionListener<K, V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int, int, org.hibernate.internal.util.collections.BoundedConcurrentHashMap.Eviction)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,org.hibernate.internal.util.collections.BoundedConcurrentHashMap(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,org.hibernate.internal.util.collections.BoundedConcurrentHashMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,segmentFor(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,get(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,containsKey(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,contains(java.lang.Object),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"putIfAbsent(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"putAll(java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,remove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"replace(K, V, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,"replace(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,entrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,keys(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.BoundedConcurrentHashMap,elements(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, float, int, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType, java.util.EnumSet<org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.Option>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, float, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap.ReferenceType)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,segmentFor(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,get(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,containsKey(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,containsValue(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,contains(java.lang.Object),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"put(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"putIfAbsent(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"putAll(java.util.Map<? extends K, ? extends V>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,remove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"remove(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"replace(K, V, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,"replace(K, V)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,purgeStaleEntries(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,keySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,values(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,entrySet(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,keys(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.collections.ConcurrentReferenceHashMap,elements(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,org.hibernate.internal.util.xml.BufferedXMLEventReader(javax.xml.stream.XMLEventReader),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,"org.hibernate.internal.util.xml.BufferedXMLEventReader(javax.xml.stream.XMLEventReader, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,getBuffer(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,internalNextEvent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,hasNext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,peek(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,mark(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,mark(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,reset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,close(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,bufferSize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.internal.util.xml.BufferedXMLEventReader,remove(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.loader.plan.exec.spi.EntityReferenceAliases,getTableAlias(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.loader.plan.exec.spi.EntityReferenceAliases,getColumnAliases(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.loader.plan.spi.BidirectionalEntityReference,getTargetEntityReference(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.loader.plan.spi.BidirectionalEntityReference,getQuerySpaceUid(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,hasRegisteredResources(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,releaseResources(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,"register(java.sql.Statement, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,release(java.sql.Statement),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,"register(java.sql.ResultSet, java.sql.Statement)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,"release(java.sql.ResultSet, java.sql.Statement)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,register(java.sql.Blob),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,release(java.sql.Blob),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,register(java.sql.Clob),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,release(java.sql.Clob),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,register(java.sql.NClob),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,release(java.sql.NClob),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.resource.jdbc.ResourceRegistry,cancelLastQuery(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,basic(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,basic(java.lang.Class),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,heuristicType(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,entity(java.lang.Class),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,entity(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,custom(java.lang.Class),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,"custom(java.lang.Class, java.util.Properties)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.hibernate.TypeHelper,"any(org.hibernate.type.Type, org.hibernate.type.Type)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,java.awt.geom.AffineTransform(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,java.awt.geom.AffineTransform(java.awt.geom.AffineTransform),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"java.awt.geom.AffineTransform(float, float, float, float, float, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,java.awt.geom.AffineTransform(float[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"java.awt.geom.AffineTransform(double, double, double, double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,java.awt.geom.AffineTransform(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"getTranslateInstance(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getRotateInstance(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"getRotateInstance(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"getRotateInstance(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"getRotateInstance(double, double, double, double)",,"[{'condition': 'true', 'entities': ['java.awt.geom.AffineTransform.getRotateInstance(java.lang.Math.atan2(vecy, vecx), anchorx, anchory)', 'this.getRotateInstance(vecx, vecy, anchorx, anchory)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.awt.geom.AffineTransform,getQuadrantRotateInstance(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"getQuadrantRotateInstance(int, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"getScaleInstance(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"getShearInstance(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getDeterminant(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,updateState(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getMatrix(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getScaleX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getScaleY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getShearX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getShearY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getTranslateX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,getTranslateY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"translate(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,rotate(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"rotate(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"rotate(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"rotate(double, double, double, double)",,"[{'condition': 'true', 'entities': ['this.rotate(java.lang.Math.atan2(vecy, vecx), anchorx, anchory)', 'this.rotate(vecx, vecy, anchorx, anchory)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.awt.geom.AffineTransform,quadrantRotate(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"quadrantRotate(int, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"scale(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"shear(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,setToIdentity(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setToTranslation(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,setToRotation(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setToRotation(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setToRotation(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setToRotation(double, double, double, double)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.awt.geom.AffineTransform,setToQuadrantRotation(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setToQuadrantRotation(int, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setToScale(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setToShear(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,setTransform(java.awt.geom.AffineTransform),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"setTransform(double, double, double, double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,concatenate(java.awt.geom.AffineTransform),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,preConcatenate(java.awt.geom.AffineTransform),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,createInverse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,invert(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"transform(java.awt.geom.Point2D, java.awt.geom.Point2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"transform(java.awt.geom.Point2D[], int, java.awt.geom.Point2D[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"transform(float[], int, float[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"transform(double[], int, double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"transform(float[], int, double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"transform(double[], int, float[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"inverseTransform(java.awt.geom.Point2D, java.awt.geom.Point2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"inverseTransform(double[], int, double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"deltaTransform(java.awt.geom.Point2D, java.awt.geom.Point2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,"deltaTransform(double[], int, double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,createTransformedShape(java.awt.Shape),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,isIdentity(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.geom.AffineTransform,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,java.awt.Graphics2D(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"draw3DRect(int, int, int, int, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"fill3DRect(int, int, int, int, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,draw(java.awt.Shape),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawString(java.lang.String, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawString(java.lang.String, float, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawString(java.text.AttributedCharacterIterator, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawString(java.text.AttributedCharacterIterator, float, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"drawGlyphVector(java.awt.font.GlyphVector, float, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,fill(java.awt.Shape),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"hit(java.awt.Rectangle, java.awt.Shape, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getDeviceConfiguration(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,setComposite(java.awt.Composite),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,setPaint(java.awt.Paint),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,setStroke(java.awt.Stroke),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"setRenderingHint(java.awt.RenderingHints.Key, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getRenderingHint(java.awt.RenderingHints.Key),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"setRenderingHints(java.util.Map<?, ?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"addRenderingHints(java.util.Map<?, ?>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getRenderingHints(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"translate(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"translate(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,rotate(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"rotate(double, double, double)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.awt.Graphics2D,"scale(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,"shear(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,transform(java.awt.geom.AffineTransform),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,setTransform(java.awt.geom.AffineTransform),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getTransform(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getPaint(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getComposite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,setBackground(java.awt.Color),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getBackground(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getStroke(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,clip(java.awt.Shape),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Graphics2D,getFontRenderContext(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,getSnapshot(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,getWidth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,getHeight(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,getSource(),,"[{'condition': 'true', 'entities': ['this.getSnapshot().getSource()', 'this.getSource()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.awt.image.VolatileImage,getGraphics(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,createGraphics(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,validate(java.awt.GraphicsConfiguration),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,contentsLost(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,getCapabilities(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.VolatileImage,getTransparency(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,addTileObserver(java.awt.image.TileObserver),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,removeTileObserver(java.awt.image.TileObserver),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,"getWritableTile(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,"releaseWritableTile(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,"isTileWritable(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,getWritableTileIndices(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,hasTileWriters(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.image.WritableRenderedImage,setData(java.awt.image.Raster),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,java.awt.Point(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,java.awt.Point(java.awt.Point),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,"java.awt.Point(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,getX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,getY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,getLocation(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,setLocation(java.awt.Point),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,"setLocation(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,"setLocation(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,"move(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,"translate(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.Point,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,java.awt.print.PrinterJob(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,getPrinterJob(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,lookupPrintServices(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,lookupStreamPrintServices(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,getPrintService(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,setPrintService(javax.print.PrintService),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,setPrintable(java.awt.print.Printable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,"setPrintable(java.awt.print.Printable, java.awt.print.PageFormat)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,setPageable(java.awt.print.Pageable),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,printDialog(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,printDialog(javax.print.attribute.PrintRequestAttributeSet),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,pageDialog(java.awt.print.PageFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,pageDialog(javax.print.attribute.PrintRequestAttributeSet),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,defaultPage(java.awt.print.PageFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,defaultPage(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,getPageFormat(javax.print.attribute.PrintRequestAttributeSet),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,validatePage(java.awt.print.PageFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,print(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,print(javax.print.attribute.PrintRequestAttributeSet),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,setCopies(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,getCopies(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,getUserName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,setJobName(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,getJobName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,cancel(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.awt.print.PrinterJob,isCancelled(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,java.io.DataInputStream(java.io.InputStream),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,read(byte[]),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.io.DataInputStream,"read(byte[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readFully(byte[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,"readFully(byte[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,skipBytes(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readBoolean(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readByte(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readUnsignedByte(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readShort(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readUnsignedShort(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readChar(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readInt(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readLong(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readFloat(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readDouble(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readLine(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readUTF(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.DataInputStream,readUTF(java.io.DataInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,java.io.File(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,"java.io.File(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,"java.io.File(java.io.File, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,java.io.File(java.net.URI),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,isInvalid(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getPrefixLength(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getParent(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getParentFile(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getPath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,isAbsolute(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getAbsolutePath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getAbsoluteFile(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.io.File,getCanonicalPath(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.io.File,getCanonicalFile(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,toURL(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,toURI(),,"[{'condition': 'true', 'entities': ['this.toPath().toUri()', 'this.toURI()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
java.io.File,canRead(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,canWrite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,exists(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,isDirectory(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,isFile(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,isHidden(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,lastModified(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,length(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,createNewFile(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,delete(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,deleteOnExit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,list(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,list(java.io.FilenameFilter),,"[{'condition': 'true', 'entities': ['this.list()', 'this.list(filter)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.io.File,listFiles(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,listFiles(java.io.FilenameFilter),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.io.File,listFiles(java.io.FileFilter),,"[{'condition': 'true', 'entities': ['this.listFiles()', 'this.listFiles(filter)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.io.File,mkdir(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,mkdirs(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,renameTo(java.io.File),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,setLastModified(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,setReadOnly(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,"setWritable(boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,setWritable(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,"setReadable(boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,setReadable(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,"setExecutable(boolean, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,setExecutable(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,canExecute(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,listRoots(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getTotalSpace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getFreeSpace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,getUsableSpace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,"createTempFile(java.lang.String, java.lang.String, java.io.File)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.io.File,"createTempFile(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,compareTo(java.io.File),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.File,toString(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.io.File,toPath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,read(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,read(byte[]),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.io.InputStream,"read(byte[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,skip(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,available(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,close(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,mark(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,reset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.io.InputStream,markSupported(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.OperatingSystemMXBean,getName(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.lang.management.OperatingSystemMXBean,getArch(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.lang.management.OperatingSystemMXBean,getVersion(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.lang.management.OperatingSystemMXBean,getAvailableProcessors(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.OperatingSystemMXBean,getSystemLoadAverage(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getVmName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getVmVendor(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getVmVersion(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getSpecName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getSpecVendor(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getSpecVersion(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getManagementSpecVersion(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getClassPath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getLibraryPath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,isBootClassPathSupported(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getBootClassPath(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getInputArguments(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getUptime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getStartTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.management.RuntimeMXBean,getSystemProperties(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,sin(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,cos(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,tan(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,asin(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,acos(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,atan(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,toRadians(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,toDegrees(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,exp(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,log(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,log10(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,sqrt(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,cbrt(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"IEEEremainder(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,ceil(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,floor(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,rint(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"atan2(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"pow(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,round(float),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,round(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,random(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"addExact(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"addExact(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"subtractExact(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"subtractExact(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"multiplyExact(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"multiplyExact(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,incrementExact(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,incrementExact(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,decrementExact(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,decrementExact(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,negateExact(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,negateExact(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,toIntExact(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"floorDiv(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"floorDiv(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"floorMod(int, int)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.lang.Math,"floorMod(long, long)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.lang.Math,abs(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,abs(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,abs(float),,"[{'condition': 'true', 'entities': ['java.lang.Float.intBitsToFloat(0x7fffffff & java.lang.Float.floatToIntBits(a))', 'java.lang.Math.abs(a)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.lang.Math,abs(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"max(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"max(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"max(float, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"max(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"min(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"min(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"min(float, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"min(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,ulp(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,ulp(float),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,signum(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,signum(float),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,sinh(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,cosh(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,tanh(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"hypot(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,expm1(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,log1p(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"copySign(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"copySign(float, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,getExponent(float),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,getExponent(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"nextAfter(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"nextAfter(float, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,nextUp(double),,"[{'condition': 'true', 'entities': ['java.lang.Math.nextAfter(d, java.lang.Double.POSITIVE_INFINITY)', 'java.lang.Math.nextUp(d)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.lang.Math,nextUp(float),,"[{'condition': 'true', 'entities': ['java.lang.Math.nextAfter(f, java.lang.Float.POSITIVE_INFINITY)', 'this.nextUp(f)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.lang.Math,nextDown(double),,"[{'condition': 'true', 'entities': ['java.lang.Math.nextAfter(d, java.lang.Double.NEGATIVE_INFINITY)', 'java.lang.Math.nextDown(d)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.lang.Math,nextDown(float),,"[{'condition': 'true', 'entities': ['java.lang.Math.nextAfter(f, java.lang.Float.NEGATIVE_INFINITY)', 'this.nextDown(f)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.lang.Math,"scalb(double, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,"scalb(float, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,powerOfTwoD(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.Math,powerOfTwoF(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"java.lang.reflect.Field(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, int, int, java.lang.String, byte[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getDeclaringClass(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getModifiers(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,isEnumConstant(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,isSynthetic(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getGenericType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,toGenericString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,get(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getBoolean(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getByte(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getChar(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getShort(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getInt(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getLong(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getFloat(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getDouble(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"set(java.lang.Object, java.lang.Object)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setBoolean(java.lang.Object, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setByte(java.lang.Object, byte)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setChar(java.lang.Object, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setShort(java.lang.Object, short)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setInt(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setLong(java.lang.Object, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setFloat(java.lang.Object, float)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,"setDouble(java.lang.Object, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getAnnotation(java.lang.Class<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getAnnotationsByType(java.lang.Class<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getDeclaredAnnotations(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.reflect.Field,getAnnotatedType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,java.lang.String(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,java.lang.String(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,java.lang.String(char[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(char[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(int[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(byte[], int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(byte[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(byte[], int, int, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(byte[], int, int, java.nio.charset.Charset)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(byte[], java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(byte[], java.nio.charset.Charset)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(byte[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,java.lang.String(byte[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,java.lang.String(java.lang.StringBuffer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,java.lang.String(java.lang.StringBuilder),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"java.lang.String(char[], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,length(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,charAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,codePointAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,codePointBefore(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"codePointCount(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"offsetByCodePoints(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"getChars(char[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"getChars(int, int, char[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"getBytes(int, int, byte[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,getBytes(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,getBytes(java.nio.charset.Charset),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,getBytes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,contentEquals(java.lang.StringBuffer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,contentEquals(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,equalsIgnoreCase(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,compareTo(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,compareToIgnoreCase(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"regionMatches(int, java.lang.String, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"regionMatches(boolean, int, java.lang.String, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"startsWith(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,startsWith(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,endsWith(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,indexOf(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"indexOf(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,lastIndexOf(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"lastIndexOf(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,indexOf(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"indexOf(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"indexOf(char[], int, int, java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"indexOf(char[], int, int, char[], int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,lastIndexOf(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"lastIndexOf(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"lastIndexOf(char[], int, int, java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"lastIndexOf(char[], int, int, char[], int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,substring(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"substring(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"subSequence(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,concat(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"replace(char, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,matches(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,contains(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"replaceFirst(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"replaceAll(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"replace(java.lang.CharSequence, java.lang.CharSequence)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"split(java.lang.String, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,split(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"join(java.lang.CharSequence, java.lang.CharSequence...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"join(java.lang.CharSequence, java.lang.Iterable<? extends java.lang.CharSequence>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,toLowerCase(java.util.Locale),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,toLowerCase(),,"[{'condition': 'true', 'entities': ['this.toLowerCase()', 'this.toLowerCase(java.util.Locale.getDefault())']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.lang.String,toUpperCase(java.util.Locale),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,toUpperCase(),,"[{'condition': 'true', 'entities': ['this.toUpperCase()', 'this.toUpperCase(java.util.Locale.getDefault())']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.lang.String,trim(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,toCharArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"format(java.lang.String, java.lang.Object...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"format(java.util.Locale, java.lang.String, java.lang.Object...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,valueOf(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,valueOf(char[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"valueOf(char[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,"copyValueOf(char[], int, int)",,"[{'condition': 'true', 'entities': ['java.lang.String.valueOf(data, offset, count)', 'this.copyValueOf(data, offset, count)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.lang.String,copyValueOf(char[]),,"[{'condition': 'true', 'entities': ['java.lang.String.valueOf(data)', 'this.copyValueOf(data)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.lang.String,valueOf(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,valueOf(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,valueOf(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,valueOf(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,valueOf(float),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,valueOf(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.String,intern(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,setIn(java.io.InputStream),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,setOut(java.io.PrintStream),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,setErr(java.io.PrintStream),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,console(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,inheritedChannel(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,setSecurityManager(java.lang.SecurityManager),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,getSecurityManager(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,currentTimeMillis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,nanoTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,"arraycopy(java.lang.Object, int, java.lang.Object, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,identityHashCode(java.lang.Object),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.lang.System,getProperties(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,lineSeparator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,setProperties(java.util.Properties),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,getProperty(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,"getProperty(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,"setProperty(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,clearProperty(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,getenv(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,getenv(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,exit(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,gc(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,runFinalization(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,runFinalizersOnExit(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,load(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,loadLibrary(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.lang.System,mapLibraryName(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,getId(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,getCalendarType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"date(java.time.chrono.Era, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"date(int, int, int)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.time.chrono.IsoChronology,"dateYearDay(java.time.chrono.Era, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"dateYearDay(int, int)",,"[{'condition': 'true', 'entities': ['java.time.LocalDate.ofYearDay(prolepticYear, dayOfYear)', 'this.dateYearDay(prolepticYear, dayOfYear)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.time.chrono.IsoChronology,dateEpochDay(long),,"[{'condition': 'true', 'entities': ['java.time.LocalDate.ofEpochDay(epochDay)', 'this.dateEpochDay(epochDay)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.time.chrono.IsoChronology,date(java.time.temporal.TemporalAccessor),,"[{'condition': 'true', 'entities': ['java.time.LocalDate.from(temporal)', 'this.date(temporal)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.time.chrono.IsoChronology,localDateTime(java.time.temporal.TemporalAccessor),,"[{'condition': 'true', 'entities': ['java.time.LocalDateTime.from(temporal)', 'this.localDateTime(temporal)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.time.chrono.IsoChronology,zonedDateTime(java.time.temporal.TemporalAccessor),,"[{'condition': 'true', 'entities': ['java.time.ZonedDateTime.from(temporal)', 'this.zonedDateTime(temporal)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.time.chrono.IsoChronology,"zonedDateTime(java.time.Instant, java.time.ZoneId)",,"[{'condition': 'true', 'entities': ['java.time.ZonedDateTime.ofInstant(instant, zone)', 'this.zonedDateTime(instant, zone)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.time.chrono.IsoChronology,dateNow(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,dateNow(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,dateNow(java.time.Clock),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,isLeapYear(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"prolepticYear(java.time.chrono.Era, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,eraOf(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,eras(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"resolveDate(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"resolveProlepticMonth(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"resolveYearOfEra(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"resolveYMD(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,range(java.time.temporal.ChronoField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,"period(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.chrono.IsoChronology,writeReplace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,java.time.Clock(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,systemUTC(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,systemDefaultZone(),,"[{'condition': 'true', 'entities': ['java.time.Clock.system(java.time.ZoneId.systemDefault())', 'this.systemDefaultZone()']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.Clock,system(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,tickSeconds(java.time.ZoneId),,"[{'condition': 'true', 'entities': ['java.time.Clock.tick(java.time.Clock.system(zone), java.time.Duration.ofSeconds(1))', 'this.tickSeconds(zone)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.Clock,tickMinutes(java.time.ZoneId),,"[{'condition': 'true', 'entities': ['java.time.Clock.tick(java.time.Clock.system(zone), java.time.Duration.ofMinutes(1))', 'this.tickMinutes(zone)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.Clock,"tick(java.time.Clock, java.time.Duration)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,"fixed(java.time.Instant, java.time.ZoneId)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,"offset(java.time.Clock, java.time.Duration)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,getZone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,withZone(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,millis(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.time.Clock,instant(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Clock,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,java.time.format.DateTimeFormatterBuilder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"getLocalizedDateTimePattern(java.time.format.FormatStyle, java.time.format.FormatStyle, java.time.chrono.Chronology, java.util.Locale)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,parseCaseSensitive(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,parseCaseInsensitive(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,parseStrict(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,parseLenient(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"parseDefaulting(java.time.temporal.TemporalField, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendValue(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendValue(java.time.temporal.TemporalField, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendValue(java.time.temporal.TemporalField, int, int, java.time.format.SignStyle)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendValueReduced(java.time.temporal.TemporalField, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendValueReduced(java.time.temporal.TemporalField, int, int, java.time.chrono.ChronoLocalDate)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendFraction(java.time.temporal.TemporalField, int, int, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendText(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendText(java.time.temporal.TemporalField, java.time.format.TextStyle)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendText(java.time.temporal.TemporalField, java.util.Map<java.lang.Long, java.lang.String>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendInstant(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendInstant(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendOffsetId(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendOffset(java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendLocalizedOffset(java.time.format.TextStyle),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendZoneId(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendZoneRegionId(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendZoneOrOffsetId(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendZoneText(java.time.format.TextStyle),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendZoneText(java.time.format.TextStyle, java.util.Set<java.time.ZoneId>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendChronologyId(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendChronologyText(java.time.format.TextStyle),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"appendLocalized(java.time.format.FormatStyle, java.time.format.FormatStyle)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendLiteral(char),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendLiteral(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,append(java.time.format.DateTimeFormatter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendOptional(java.time.format.DateTimeFormatter),,"[{'condition': 'true', 'entities': ['this.appendOptional(formatter)', 'this.optionalStart().append(formatter).optionalEnd()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,appendPattern(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,padNext(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"padNext(int, char)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,optionalStart(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,optionalEnd(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,toFormatter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,toFormatter(java.util.Locale),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.format.DateTimeFormatterBuilder,"toFormatter(java.time.format.ResolverStyle, java.time.chrono.Chronology)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,now(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,now(java.time.Clock),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,ofEpochSecond(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,"ofEpochSecond(long, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,ofEpochMilli(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,from(java.time.temporal.TemporalAccessor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,parse(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,isSupported(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,isSupported(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,range(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,get(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,getLong(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,getEpochSecond(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,getNano(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,with(java.time.temporal.TemporalAdjuster),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,"with(java.time.temporal.TemporalField, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,truncatedTo(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,plus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,"plus(long, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,plusSeconds(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,plusMillis(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,plusNanos(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,minus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,"minus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.minus(amountToSubtract, unit)', 'this.plus(amountToSubtract, unit)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.Instant,minusSeconds(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,minusMillis(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,minusNanos(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,query(java.time.temporal.TemporalQuery<R>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,adjustInto(java.time.temporal.Temporal),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,atOffset(java.time.ZoneOffset),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,atZone(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,toEpochMilli(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,compareTo(java.time.Instant),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,isAfter(java.time.Instant),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,isBefore(java.time.Instant),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,writeExternal(java.io.DataOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Instant,readExternal(java.io.DataInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,now(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,now(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,now(java.time.Clock),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"of(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"of(int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"of(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,ofSecondOfDay(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,ofNanoOfDay(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,from(java.time.temporal.TemporalAccessor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,parse(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,isSupported(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,isSupported(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,range(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,get(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,getLong(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,getHour(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,getMinute(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,getSecond(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,getNano(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,with(java.time.temporal.TemporalAdjuster),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"with(java.time.temporal.TemporalField, long)",,"[{'condition': 'true', 'entities': ['this.with(field, newValue)', 'this.with(field.adjustInto(this, newValue))']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
java.time.LocalTime,withHour(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,withMinute(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,withSecond(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,withNano(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,truncatedTo(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,plus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"plus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.plus(amountToAdd, unit)', 'this.plusNanos(amountToAdd * 1000000000)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
java.time.LocalTime,plusHours(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,plusMinutes(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,plusSeconds(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,plusNanos(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,minus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"minus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.minus(amountToSubtract, unit)', 'this.plus(amountToSubtract, unit)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.LocalTime,minusHours(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,minusMinutes(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,minusSeconds(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,minusNanos(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,query(java.time.temporal.TemporalQuery<R>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,adjustInto(java.time.temporal.Temporal),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,format(java.time.format.DateTimeFormatter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,atDate(java.time.LocalDate),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,atOffset(java.time.ZoneOffset),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,toSecondOfDay(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,toNanoOfDay(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,compareTo(java.time.LocalTime),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,isAfter(java.time.LocalTime),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,isBefore(java.time.LocalTime),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,writeExternal(java.io.DataOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.LocalTime,readExternal(java.io.DataInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,now(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,now(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,now(java.time.Clock),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,"of(java.time.Month, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,"of(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,from(java.time.temporal.TemporalAccessor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,parse(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,isSupported(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,range(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,get(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,getLong(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,getMonthValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,getMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,getDayOfMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,isValidYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,withMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,with(java.time.Month),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,withDayOfMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,query(java.time.temporal.TemporalQuery<R>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,adjustInto(java.time.temporal.Temporal),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,format(java.time.format.DateTimeFormatter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,atYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,compareTo(java.time.MonthDay),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,isAfter(java.time.MonthDay),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,isBefore(java.time.MonthDay),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,writeExternal(java.io.DataOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.MonthDay,readExternal(java.io.DataInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,timeLineOrder(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,now(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,now(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,now(java.time.Clock),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneOffset)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"of(java.time.LocalDateTime, java.time.ZoneOffset)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"of(int, int, int, int, int, int, int, java.time.ZoneOffset)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"ofInstant(java.time.Instant, java.time.ZoneId)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,from(java.time.temporal.TemporalAccessor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,parse(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,isSupported(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,isSupported(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,range(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,get(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getLong(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getOffset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withOffsetSameLocal(java.time.ZoneOffset),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withOffsetSameInstant(java.time.ZoneOffset),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toLocalDateTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toLocalDate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getMonthValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getDayOfMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getDayOfYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getDayOfWeek(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toLocalTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getHour(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getMinute(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getSecond(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,getNano(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,with(java.time.temporal.TemporalAdjuster),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"with(java.time.temporal.TemporalField, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withDayOfMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withDayOfYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withHour(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withMinute(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withSecond(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,withNano(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,truncatedTo(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"plus(long, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusYears(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusMonths(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusWeeks(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusDays(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusHours(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusMinutes(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusSeconds(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,plusNanos(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"minus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.minus(amountToSubtract, unit)', 'this.plus(amountToSubtract, unit)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.OffsetDateTime,minusYears(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minusMonths(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minusWeeks(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minusDays(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minusHours(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minusMinutes(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minusSeconds(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,minusNanos(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,query(java.time.temporal.TemporalQuery<R>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,adjustInto(java.time.temporal.Temporal),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,format(java.time.format.DateTimeFormatter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,atZoneSameInstant(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,atZoneSimilarLocal(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toOffsetTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toZonedDateTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toInstant(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toEpochSecond(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,compareTo(java.time.OffsetDateTime),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,isAfter(java.time.OffsetDateTime),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,isBefore(java.time.OffsetDateTime),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,isEqual(java.time.OffsetDateTime),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,writeExternal(java.io.ObjectOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.OffsetDateTime,readExternal(java.io.ObjectInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,ofDateAdjuster(java.util.function.UnaryOperator<java.time.LocalDate>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,firstDayOfMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,lastDayOfMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,firstDayOfNextMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,firstDayOfYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,lastDayOfYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,firstDayOfNextYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,firstInMonth(java.time.DayOfWeek),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,lastInMonth(java.time.DayOfWeek),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,"dayOfWeekInMonth(int, java.time.DayOfWeek)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,next(java.time.DayOfWeek),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,nextOrSame(java.time.DayOfWeek),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,previous(java.time.DayOfWeek),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.TemporalAdjusters,previousOrSame(java.time.DayOfWeek),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,isSupported(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,with(java.time.temporal.TemporalAdjuster),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,"with(java.time.temporal.TemporalField, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,plus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,"plus(long, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,minus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,"minus(long, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.temporal.Temporal,"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,now(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,now(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,now(java.time.Clock),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,"of(int, java.time.Month)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,"of(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,from(java.time.temporal.TemporalAccessor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,parse(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,isSupported(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,isSupported(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,range(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,get(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,getLong(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,getYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,getMonthValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,getMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,isLeapYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,isValidDay(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,lengthOfMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,lengthOfYear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,with(java.time.temporal.TemporalAdjuster),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,"with(java.time.temporal.TemporalField, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,withYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,withMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,plus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,"plus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.plus(amountToAdd, unit)', 'this.plusYears(amountToAdd)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
java.time.YearMonth,plusYears(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,plusMonths(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,minus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,"minus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.minus(amountToSubtract, unit)', 'this.plus(amountToSubtract, unit)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.YearMonth,minusYears(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,minusMonths(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,query(java.time.temporal.TemporalQuery<R>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,adjustInto(java.time.temporal.Temporal),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,format(java.time.format.DateTimeFormatter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,atDay(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,atEndOfMonth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,compareTo(java.time.YearMonth),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,isAfter(java.time.YearMonth),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,isBefore(java.time.YearMonth),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,writeExternal(java.io.DataOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.YearMonth,readExternal(java.io.DataInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,now(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,now(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,now(java.time.Clock),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,of(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,from(java.time.temporal.TemporalAccessor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,parse(java.lang.CharSequence),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,"parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,isLeap(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,getValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,isSupported(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,isSupported(java.time.temporal.TemporalUnit),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,range(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,get(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,getLong(java.time.temporal.TemporalField),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,isLeap(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,isValidMonthDay(java.time.MonthDay),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,length(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,with(java.time.temporal.TemporalAdjuster),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,"with(java.time.temporal.TemporalField, long)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,plus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,"plus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.plus(amountToAdd, unit)', 'this.plusYears(amountToAdd)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
java.time.Year,plusYears(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,minus(java.time.temporal.TemporalAmount),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,"minus(long, java.time.temporal.TemporalUnit)",,"[{'condition': 'true', 'entities': ['this.minus(amountToSubtract, unit)', 'this.plus(amountToSubtract, unit)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
java.time.Year,minusYears(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,query(java.time.temporal.TemporalQuery<R>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,adjustInto(java.time.temporal.Temporal),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,"until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,format(java.time.format.DateTimeFormatter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,atDay(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,atMonth(java.time.Month),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,atMonth(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,atMonthDay(java.time.MonthDay),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,compareTo(java.time.Year),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,isAfter(java.time.Year),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,isBefore(java.time.Year),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,writeExternal(java.io.DataOutput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.time.Year,readExternal(java.io.DataInput),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,get(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,java.util.AbstractList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,"set(int, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,add(E),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.util.AbstractList,lastIndexOf(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,"removeRange(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,"subList(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,listIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,indexOf(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,"add(int, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,remove(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,listIterator(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.AbstractList,"addAll(int, java.util.Collection<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,java.util.ArrayDeque(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,java.util.ArrayDeque(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,java.util.ArrayDeque(java.util.Collection<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,addFirst(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,addLast(E),,"[{'condition': 'true', 'entities': ['this.add(e)', 'this.addLast(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,offerFirst(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,offerLast(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,removeFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,removeLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,pollFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,pollLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,getFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,getLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,peekFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,peekLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,removeFirstOccurrence(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,removeLastOccurrence(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,add(E),,"[{'condition': 'true', 'entities': ['this.add(e)', 'this.addLast(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,offer(E),,"[{'condition': 'true', 'entities': ['this.offer(e)', 'this.offerLast(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,remove(),,"[{'condition': 'true', 'entities': ['this.remove()', 'this.removeFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,poll(),,"[{'condition': 'true', 'entities': ['this.poll()', 'this.pollFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,element(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.util.ArrayDeque,peek(),,"[{'condition': 'true', 'entities': ['this.peek()', 'this.peekFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,push(E),,"[{'condition': 'true', 'entities': ['this.addFirst(e)', 'this.push(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,pop(),,"[{'condition': 'true', 'entities': ['this.pop()', 'this.removeFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,iterator(),,"[{'condition': 'true', 'entities': ['this.descendingIterator()', 'this.iterator()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
java.util.ArrayDeque,descendingIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,remove(java.lang.Object),,"[{'condition': 'true', 'entities': ['this.remove(o)', 'this.removeFirstOccurrence(o)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.ArrayDeque,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,toArray(T[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.ArrayDeque,spliterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,java.util.concurrent.LinkedBlockingDeque(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,java.util.concurrent.LinkedBlockingDeque(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,unlink(java.util.concurrent.LinkedBlockingDeque.Node<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,addFirst(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,addLast(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,offerFirst(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,offerLast(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,putFirst(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,putLast(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,"offerFirst(E, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,"offerLast(E, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,removeFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,removeLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,pollFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,pollLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,takeFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,takeLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,"pollFirst(long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,"pollLast(long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,getFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,getLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,peekFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,peekLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,removeFirstOccurrence(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,removeLastOccurrence(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,add(E),,"[{'condition': 'true', 'entities': ['this.add(e)', 'this.addLast(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,offer(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,put(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,"offer(E, long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,remove(),,"[{'condition': 'true', 'entities': ['this.remove()', 'this.removeFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,poll(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,take(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,"poll(long, java.util.concurrent.TimeUnit)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,element(),,"[{'condition': 'true', 'entities': ['this.element()', 'this.getFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,peek(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,remainingCapacity(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,drainTo(java.util.Collection<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,"drainTo(java.util.Collection<? super E>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,push(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,pop(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,remove(java.lang.Object),,"[{'condition': 'true', 'entities': ['this.remove(o)', 'this.removeFirstOccurrence(o)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,toArray(T[]),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,descendingIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.concurrent.LinkedBlockingDeque,spliterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getInstance(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getInstance(java.util.Locale),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getAvailableCurrencies(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getCurrencyCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getSymbol(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getSymbol(java.util.Locale),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getDefaultFractionDigits(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getNumericCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getDisplayName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,getDisplayName(java.util.Locale),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Currency,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,addFirst(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,addLast(E),,"[{'condition': 'true', 'entities': ['this.add(e)', 'this.addLast(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,offerFirst(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,offerLast(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,removeFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,removeLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,pollFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,pollLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,getFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,getLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,peekFirst(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,peekLast(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,removeFirstOccurrence(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,removeLastOccurrence(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,add(E),,"[{'condition': 'true', 'entities': ['this.add(e)', 'this.addLast(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,offer(E),,"[{'condition': 'true', 'entities': ['this.offer(e)', 'this.offerLast(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,remove(),,"[{'condition': 'true', 'entities': ['this.remove()', 'this.removeFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,poll(),,"[{'condition': 'true', 'entities': ['this.poll()', 'this.pollFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,element(),,"[{'condition': 'true', 'entities': ['this.element()', 'this.getFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,peek(),,"[{'condition': 'true', 'entities': ['this.peek()', 'this.peekFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,push(E),,"[{'condition': 'true', 'entities': ['this.addFirst(e)', 'this.push(e)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,pop(),,"[{'condition': 'true', 'entities': ['this.pop()', 'this.removeFirst()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,remove(java.lang.Object),,"[{'condition': 'true', 'entities': ['this.remove(o)', 'this.removeFirstOccurrence(o)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Deque,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Deque,descendingIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,add(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,lastIndexOf(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,retainAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,containsAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,replaceAll(java.util.function.UnaryOperator<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,"subList(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,indexOf(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,toArray(T[]),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.util.List,"set(int, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,remove(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,remove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,listIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,spliterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,get(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,"add(int, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,"addAll(int, java.util.Collection<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,removeAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,listIterator(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,sort(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.List,addAll(java.util.Collection<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"java.util.SimpleTimeZone(int, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"java.util.SimpleTimeZone(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,setStartYear(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"setStartRule(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"setStartRule(int, int, int)",,"[{'condition': 'true', 'entities': ['this.setStartRule(startMonth, startDay, 0, startTime)', 'this.setStartRule(startMonth, startDay, startTime)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.SimpleTimeZone,"setStartRule(int, int, int, int, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"setEndRule(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"setEndRule(int, int, int)",,"[{'condition': 'true', 'entities': ['this.setEndRule(endMonth, endDay, 0, endTime)', 'this.setEndRule(endMonth, endDay, endTime)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.SimpleTimeZone,"setEndRule(int, int, int, int, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,getOffset(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"getOffsets(long, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,"getOffset(int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,getRawOffset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,setRawOffset(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,setDSTSavings(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,getDSTSavings(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,useDaylightTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,observesDaylightTime(),,"[{'condition': 'true', 'entities': ['this.observesDaylightTime()', 'this.useDaylightTime()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.SimpleTimeZone,inDaylightTime(java.util.Date),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,hasSameRules(java.util.TimeZone),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.SimpleTimeZone,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Stack,java.util.Stack(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Stack,pop(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Stack,push(E),,"[{'condition': 'true', 'entities': ['this.addElement(item)', 'this.push(item)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Stack,empty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Stack,search(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Stack,peek(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,java.util.TimeZone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,"getOffset(int, int, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getOffset(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,"getOffsets(long, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,setRawOffset(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getRawOffset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getID(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,setID(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getDisplayName(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.util.TimeZone,getDisplayName(java.util.Locale),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.util.TimeZone,"getDisplayName(boolean, int)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
java.util.TimeZone,"getDisplayName(boolean, int, java.util.Locale)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getDSTSavings(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,useDaylightTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,observesDaylightTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,inDaylightTime(java.util.Date),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getTimeZone(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getTimeZone(java.time.ZoneId),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,toZoneId(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getAvailableIDs(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getAvailableIDs(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getDefault(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,getDefaultRef(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,setDefault(java.util.TimeZone),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,hasSameRules(java.util.TimeZone),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.TimeZone,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,lastIndexOf(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,isEmpty(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"setElementAt(E, int)",,"[{'condition': 'true', 'entities': ['this.set(index, obj)', 'this.setElementAt(obj, index)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Vector,"lastIndexOf(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,removeIf(java.util.function.Predicate<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,elementData(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,lastElement(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,remove(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,removeAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,java.util.Vector(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,containsAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,java.util.Vector(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,removeAllElements(),,"[{'condition': 'true', 'entities': ['this.clear()', 'this.removeAllElements()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Vector,ensureCapacity(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"insertElementAt(E, int)",,"[{'condition': 'true', 'entities': ['this.add(index, obj)', 'this.insertElementAt(obj, index)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Vector,addAll(java.util.Collection<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,forEach(java.util.function.Consumer<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,sort(java.util.Comparator<? super E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,addElement(E),,"[{'condition': 'true', 'entities': ['this.add(obj)', 'this.addElement(obj)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Vector,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,get(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,elements(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"subList(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,retainAll(java.util.Collection<?>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,listIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,java.util.Vector(java.util.Collection<? extends E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,removeElementAt(int),,"[{'condition': 'true', 'entities': ['this.remove(index)', 'this.removeElementAt(index)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Vector,add(E),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"removeRange(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,trimToSize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,capacity(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,copyInto(java.lang.Object[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,listIterator(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"add(int, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,setSize(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"addAll(int, java.util.Collection<? extends E>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,spliterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"java.util.Vector(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"indexOf(java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,firstElement(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,replaceAll(java.util.function.UnaryOperator<E>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,"set(int, E)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,remove(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,toArray(T[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,removeElement(java.lang.Object),,"[{'condition': 'true', 'entities': ['this.remove(obj)', 'this.removeElement(obj)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Vector,contains(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,indexOf(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
java.util.Vector,elementAt(int),,"[{'condition': 'true', 'entities': ['this.elementAt(index)', 'this.get(index)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
java.util.Vector,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.HermiteInterpolator,"addSamplePoint(double, double[]...)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.HermiteInterpolator,getPolynomials(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.HermiteInterpolator,value(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.HermiteInterpolator,value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.HermiteInterpolator,org.apache.commons.math3.analysis.interpolation.HermiteInterpolator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.LoessInterpolator,org.apache.commons.math3.analysis.interpolation.LoessInterpolator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.LoessInterpolator,"smooth(double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.LoessInterpolator,"org.apache.commons.math3.analysis.interpolation.LoessInterpolator(double, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.LoessInterpolator,"org.apache.commons.math3.analysis.interpolation.LoessInterpolator(double, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.LoessInterpolator,"interpolate(double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.LoessInterpolator,"smooth(double[], double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator,"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator,"interpolate(double[][], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator,org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getSqr2Split(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getLn2(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,setIEEEFlagsBits(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,newDfp(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,newDfp(org.apache.commons.math3.dfp.Dfp),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getE(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,newDfp(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getSqr2Reciprocal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,setIEEEFlags(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getSqr3(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getTwo(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,"newDfp(byte, byte)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getZero(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getLn5(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,"computeLn(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getSqr2(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getRuntimeClass(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,clearIEEEFlags(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getLn5Split(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getLn2Split(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getPi(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getIEEEFlags(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getESplit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,setRoundingMode(org.apache.commons.math3.dfp.DfpField.RoundingMode),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getPiSplit(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getRoundingMode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getSqr3Reciprocal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,"computeExp(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getLn10(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,newDfp(byte),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,newDfp(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,newDfp(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,newDfp(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getRadixDigits(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,org.apache.commons.math3.dfp.DfpField(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.dfp.DfpField,getOne(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,addObservedPoint(org.apache.commons.math3.fitting.WeightedObservedPoint),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,"fit(int, T, double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,"addObservedPoint(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,getObservations(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,clearObservations(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,"fit(T, double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,"addObservedPoint(double, double)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.fitting.CurveFitter,org.apache.commons.math3.fitting.CurveFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker,org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker,"converged(int, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker,"org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.WeightedObservedPoints,"add(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.WeightedObservedPoints,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.WeightedObservedPoints,"add(double, double)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.fitting.WeightedObservedPoints,toList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.fitting.WeightedObservedPoints,add(org.apache.commons.math3.fitting.WeightedObservedPoint),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,isNaN(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,distance(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,getX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,getZero(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,negate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,getNorm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,getNorm1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distance(p1, p2)', 'p1.subtract(p2).getNorm()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distanceInf(p1, p2)', 'p1.subtract(p2).getNormInf()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,toString(java.text.NumberFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,getSpace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,getNormSq(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,isInfinite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,getNormInf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distanceSq(p1, p2)', 'p1.subtract(p2).getNormSq()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,normalize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,"org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.oned.Vector1D,scalarMultiply(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, T, T, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getAxis(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyTo(T[], T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",,"[{'condition': 'true', 'entities': ['this.distance(r1, r2)', 'this.distance(r1, r2)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"composeInverse(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"composeInverse(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getQ0(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyInverseTo(double[], T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getQ1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyTo(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention, T, T, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getQ3(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(T, T, T, T, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(T[][], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getAxis(org.apache.commons.math3.geometry.euclidean.threed.RotationConvention),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyInverseTo(T[], T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,toRotation(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getMatrix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getQ2(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyTo(double[], T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,revert(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"compose(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,"[{'condition': 'true', 'entities': ['r.compose(this, convention)', 'this.compose(r, convention)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,getAngle(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"org.apache.commons.math3.geometry.euclidean.threed.FieldRotation(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"angle(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,scalarMultiply(T),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,scalarMultiply(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,isNaN(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,isInfinite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,normalize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"angle(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"subtract(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"subtract(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"subtract(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"subtract(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,"[{'condition': 'true', 'entities': ['this.distance(v1, v2)', 'v1.subtract(v2).getNorm()']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['this.distance(v1, v2)', 'v1.subtract(v2).getNorm()']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getNormSq(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getDelta(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,toVector3D(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"add(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"add(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"add(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"add(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,add(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,add(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,negate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getAlpha(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(double, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,"[{'condition': 'true', 'entities': ['this.distanceInf(v1, v2)', 'v1.subtract(v2).getNormInf()']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['this.distanceInf(v1, v2)', 'v1.subtract(v2).getNormInf()']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,toString(java.text.NumberFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,orthogonal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getZ(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getNorm1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance1(v1, v2)', 'v1.subtract(v2).getNorm1()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance1(v1, v2)', 'v1.subtract(v2).getNorm1()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D(T, T, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getNorm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceSq(v1, v2)', 'v1.subtract(v2).getNormSq()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceSq(v1, v2)', 'v1.subtract(v2).getNormSq()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,subtract(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,subtract(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,getNormInf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getAxis(org.apache.commons.math3.geometry.euclidean.threed.RotationConvention),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,"[{'condition': 'true', 'entities': ['r.compose(this, convention)', 'this.compose(r, convention)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getQ0(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"applyInverseTo(double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"distance(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.Rotation)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getQ2(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getAngle(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getMatrix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(double[][], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,revert(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention, double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"applyTo(double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getQ3(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"composeInverse(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"org.apache.commons.math3.geometry.euclidean.threed.Rotation(double, double, double, double, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,"getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getQ1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Rotation,getAxis(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,scalarMultiply(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getZero(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getNorm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getNormInf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,crossProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getSpace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,negate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(v1, v2)', 'v1.subtract(v2).getNorm1()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(v1, v2)', 'v1.subtract(v2).getNormSq()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(v1, v2)', 'v1.subtract(v2).getNorm()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,isInfinite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getAlpha(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getZ(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getNorm1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,normalize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,toString(java.text.NumberFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getDelta(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,distance(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,orthogonal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,getNormSq(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(v1, v2)', 'v1.subtract(v2).getNormInf()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,"org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.threed.Vector3D,isNaN(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,scalarMultiply(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(p1, p2)', 'p1.subtract(p2).getNormSq()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,normalize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(p1, p2)', 'p1.subtract(p2).getNorm()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,distance(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getNormSq(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getNorm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,toString(java.text.NumberFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,isInfinite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getNormInf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getNorm1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getY(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,"[{'condition': 'true', 'entities': ['org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceInf(p1, p2)', 'p1.subtract(p2).getNormInf()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,negate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,isNaN(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getZero(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getX(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,"org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.euclidean.twod.Vector2D,getSpace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getXAxis(),,"[{'condition': 'true', 'entities': ['this.getPointAt(0.0)', 'this.getXAxis()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,copySelf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,project(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getPole(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getInsideArc(org.apache.commons.math3.geometry.spherical.twod.Circle),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getOffset(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getTransform(org.apache.commons.math3.geometry.euclidean.threed.Rotation),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,wholeSpace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getReverse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getPointAt(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,toSubSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,wholeHyperplane(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.spherical.twod.Sphere2D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.spherical.twod.Circle),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getTolerance(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,revertSelf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getYAxis(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,"org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,"org.apache.commons.math3.geometry.spherical.twod.Circle(org.apache.commons.math3.geometry.spherical.twod.S2Point, org.apache.commons.math3.geometry.spherical.twod.S2Point, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,toSpace(org.apache.commons.math3.geometry.Point<org.apache.commons.math3.geometry.spherical.oned.Sphere1D>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.spherical.twod.Circle,getOffset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,getZero(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,distance1(org.apache.commons.math3.geometry.Vector<S>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,getNorm1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,distanceSq(org.apache.commons.math3.geometry.Vector<S>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,add(org.apache.commons.math3.geometry.Vector<S>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,dotProduct(org.apache.commons.math3.geometry.Vector<S>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,getNormSq(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,normalize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,distance(org.apache.commons.math3.geometry.Vector<S>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,getNorm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,toString(java.text.NumberFormat),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,distanceInf(org.apache.commons.math3.geometry.Vector<S>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,subtract(org.apache.commons.math3.geometry.Vector<S>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,scalarMultiply(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,"subtract(double, org.apache.commons.math3.geometry.Vector<S>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,getNormInf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,negate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,isInfinite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.geometry.Vector,"add(double, org.apache.commons.math3.geometry.Vector<S>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"org.apache.commons.math3.linear.Array2DRowRealMatrix(double[][], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,add(org.apache.commons.math3.linear.Array2DRowRealMatrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"createMatrix(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,org.apache.commons.math3.linear.Array2DRowRealMatrix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"addToEntry(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,getDataRef(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"multiplyEntry(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,org.apache.commons.math3.linear.Array2DRowRealMatrix(double[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,operate(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"getEntry(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"org.apache.commons.math3.linear.Array2DRowRealMatrix(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,getData(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"setSubMatrix(double[][], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,getRowDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,preMultiply(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,"setEntry(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,org.apache.commons.math3.linear.Array2DRowRealMatrix(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,getColumnDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.Array2DRowRealMatrix,walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"addToEntry(int, int, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,scalarMultiply(T),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setRowVector(int, org.apache.commons.math3.linear.FieldVector<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getColumnMatrix(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getRowMatrix(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getRowDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,multiply(org.apache.commons.math3.linear.FieldMatrix<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getRow(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getColumnDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>, int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,subtract(org.apache.commons.math3.linear.BlockFieldMatrix<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setColumn(int, T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,operate(T[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,transpose(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,subtract(org.apache.commons.math3.linear.FieldMatrix<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setEntry(int, int, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getColumnVector(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,org.apache.commons.math3.linear.BlockFieldMatrix(T[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getColumn(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"getSubMatrix(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"org.apache.commons.math3.linear.BlockFieldMatrix(int, int, T[][], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"createBlocksLayout(org.apache.commons.math3.Field<T>, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,add(org.apache.commons.math3.linear.BlockFieldMatrix<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getData(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,multiply(org.apache.commons.math3.linear.BlockFieldMatrix<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,toBlocksLayout(T[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setRowMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,add(org.apache.commons.math3.linear.FieldMatrix<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"org.apache.commons.math3.linear.BlockFieldMatrix(org.apache.commons.math3.Field<T>, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"createMatrix(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor<T>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,preMultiply(T[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setColumnMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,scalarAdd(T),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setRow(int, T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"multiplyEntry(int, int, T)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"getEntry(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,getRowVector(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setColumnVector(int, org.apache.commons.math3.linear.FieldVector<T>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.BlockFieldMatrix,"setSubMatrix(T[][], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.CholeskyDecomposition,getDeterminant(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.CholeskyDecomposition,getSolver(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.CholeskyDecomposition,getLT(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.CholeskyDecomposition,getL(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.CholeskyDecomposition,org.apache.commons.math3.linear.CholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.CholeskyDecomposition,"org.apache.commons.math3.linear.CholeskyDecomposition(org.apache.commons.math3.linear.RealMatrix, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapAdd(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapSubtract(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapDivideToSelf(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapDivide(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,checkVectorDimensions(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"combineToSelf(double, double, org.apache.commons.math3.linear.RealVector)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapAddToSelf(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"checkIndices(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"setEntry(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"combine(double, double, org.apache.commons.math3.linear.RealVector)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,append(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,unitize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getL1Distance(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getNorm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,isNaN(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getMaxValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,subtract(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getDistance(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,projection(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,set(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getEntry(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getMinValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,append(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,checkIndex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,sparseIterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,add(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,unmodifiableRealVector(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"setSubVector(int, org.apache.commons.math3.linear.RealVector)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,ebeMultiply(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getMaxIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,isInfinite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,ebeDivide(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapMultiply(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,checkVectorDimensions(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,outerProduct(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,map(org.apache.commons.math3.analysis.UnivariateFunction),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapMultiplyToSelf(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"addToEntry(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getMinIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getL1Norm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getLInfDistance(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,mapSubtractToSelf(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,toArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,dotProduct(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,getLInfNorm(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,iterator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,"getSubVector(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,cosine(org.apache.commons.math3.linear.RealVector),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.linear.RealVector,unitVector(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEStateAndDerivative,"org.apache.commons.math3.ode.FieldODEStateAndDerivative(T, T[], T[], T[][], T[][])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEStateAndDerivative,getDerivative(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEStateAndDerivative,"org.apache.commons.math3.ode.FieldODEStateAndDerivative(T, T[], T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEStateAndDerivative,getSecondaryDerivative(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,"org.apache.commons.math3.ode.FieldODEState(T, T[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,"org.apache.commons.math3.ode.FieldODEState(T, T[], T[][])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,"copy(org.apache.commons.math3.Field<T>, T[][])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,getStateDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,getNumberOfSecondaryStates(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,getState(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,getSecondaryStateDimension(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,getTime(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.ode.FieldODEState,getSecondaryState(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,"setPoint(int, org.apache.commons.math3.optim.PointValuePair)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,getPoints(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,getDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,getPoint(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,setPoints(org.apache.commons.math3.optim.PointValuePair[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,"evaluate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optim.PointValuePair>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,"replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair, java.util.Comparator<org.apache.commons.math3.optim.PointValuePair>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,"iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optim.PointValuePair>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(double[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,build(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex,getSize(),,"[{'condition': 'true', 'entities': ['this.getDimension() + 1', 'this.getSize()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,"evaluate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,org.apache.commons.math3.optimization.direct.AbstractSimplex(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,getSize(),,"[{'condition': 'true', 'entities': ['this.getDimension() + 1', 'this.getSize()']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,org.apache.commons.math3.optimization.direct.AbstractSimplex(double[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,getDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,getPoints(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,getPoint(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,"org.apache.commons.math3.optimization.direct.AbstractSimplex(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,build(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,"setPoint(int, org.apache.commons.math3.optimization.PointValuePair)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,org.apache.commons.math3.optimization.direct.AbstractSimplex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,"iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,"replaceWorstPoint(org.apache.commons.math3.optimization.PointValuePair, java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.direct.AbstractSimplex,setPoints(org.apache.commons.math3.optimization.PointValuePair[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,getObservations(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,"addObservedPoint(double, double)",,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,"addObservedPoint(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,clearObservations(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,"fit(T, double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,"fit(int, T, double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.optimization.fitting.CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,org.apache.commons.math3.optimization.fitting.CurveFitter(org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.optimization.fitting.CurveFitter,addObservedPoint(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,append(org.apache.commons.math3.stat.correlation.StorelessCovariance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,increment(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,getData(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,org.apache.commons.math3.stat.correlation.StorelessCovariance(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,"getCovariance(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,getN(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,getCovarianceMatrix(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.correlation.StorelessCovariance,"org.apache.commons.math3.stat.correlation.StorelessCovariance(int, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,"evaluate(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,"incrementAll(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,incrementAll(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,increment(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,getResult(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic,evaluate(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,sumSq(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,sumLog(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,mean(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,populationVariance(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"meanDifference(double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"max(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,normalize(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"variance(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"sumSq(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"sumDifference(double[], double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,geometricMean(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"percentile(double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"variance(double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"geometricMean(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,product(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,min(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,sum(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"populationVariance(double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,max(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"mode(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"product(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"populationVariance(double[], double, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"sumLog(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"variance(double[], double, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,variance(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,mode(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"sum(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"varianceDifference(double[], double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"mean(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"min(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"populationVariance(double[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.stat.StatUtils,"percentile(double[], int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,abs(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,compareTo(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,cbrt(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,pow(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,log1p(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,hashCode(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,sqrt(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,pow(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,sin(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,multiply(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,atan(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,cos(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,asinh(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,hypot(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,divide(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,divide(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,reciprocal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,longValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,ceil(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,scalb(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,subtract(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,subtract(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,equals(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,log10(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,floatValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,byteValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,floor(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,signum(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,toString(),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
org.apache.commons.math3.util.Decimal64,rint(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,rootN(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,round(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,multiply(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,multiply(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,tanh(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(org.apache.commons.math3.util.Decimal64[], org.apache.commons.math3.util.Decimal64[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(double[], org.apache.commons.math3.util.Decimal64[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,atan2(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,shortValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,getField(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,exp(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,doubleValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,pow(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,"linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,add(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,add(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,acosh(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,log(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,asin(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,getReal(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,intValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,isInfinite(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,acos(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,sinh(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,isNaN(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,tan(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,atanh(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,cosh(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,expm1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,negate(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,remainder(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,remainder(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,copySign(org.apache.commons.math3.util.Decimal64),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
org.apache.commons.math3.util.Decimal64,copySign(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,weka.associations.Apriori(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,globalInfo(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getTechnicalInformation(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,resetOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,removeMissingColumns(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getCapabilities(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,buildAssociations(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,mineCARs(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getInstancesNoClass(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getInstancesOnlyClass(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,listOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setOptions(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,metricString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,removeAllMissingColsTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setRemoveAllMissingCols(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getRemoveAllMissingCols(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,upperBoundMinSupportTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getUpperBoundMinSupport(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setUpperBoundMinSupport(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setClassIndex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getClassIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,classIndexTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setCar(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getCar(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,carTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,lowerBoundMinSupportTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getLowerBoundMinSupport(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setLowerBoundMinSupport(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getMetricType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,metricTypeTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setMetricType(weka.core.SelectedTag),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,minMetricTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getMinMetric(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setMinMetric(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,numRulesTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getNumRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setNumRules(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,deltaTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getDelta(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setDelta(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,significanceLevelTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getSignificanceLevel(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setSignificanceLevel(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setOutputItemSets(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getOutputItemSets(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,outputItemSetsTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setVerbose(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getVerbose(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,verboseTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,treatZeroAsMissingTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,setTreatZeroAsMissing(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getTreatZeroAsMissing(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getAllTheRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getAssociationRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getRuleMetricNames(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,canProduceRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.Apriori,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.AssociationRulesProducer,getAssociationRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.AssociationRulesProducer,getRuleMetricNames(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.AssociationRulesProducer,canProduceRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,weka.associations.FilteredAssociator(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,globalInfo(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,defaultAssociatorString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,listOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,setOptions(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,filterTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,setFilter(weka.filters.Filter),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getFilter(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,classIndexTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,setClassIndex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getClassIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getFilterSpec(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getCapabilities(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,buildAssociations(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getAssociationRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getRuleMetricNames(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,canProduceRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FilteredAssociator,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,weka.associations.FPGrowth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,"generateRulesBruteForce(weka.associations.FPGrowth.FrequentItemSets, weka.associations.DefaultAssociationRule.METRIC_TYPE, double, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,"pruneRules(java.util.List<weka.associations.AssociationRule>, java.util.ArrayList<weka.associations.Item>, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getCapabilities(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,globalInfo(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getTechnicalInformation(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getSingletons(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getSingletons(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,"buildFPTree(java.util.ArrayList<weka.associations.BinaryItem>, java.lang.Object, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,"mineTree(weka.associations.FPGrowth.FPTreeRoot, weka.associations.FPGrowth.FrequentItemSets, int, weka.associations.FPGrowth.FrequentBinaryItemSet, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,resetOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,positiveIndexTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setPositiveIndex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getPositiveIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setNumRulesToFind(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getNumRulesToFind(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,numRulesToFindTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setMetricType(weka.core.SelectedTag),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setMaxNumberOfItems(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getMaxNumberOfItems(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,maxNumberOfItemsTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getMetricType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,metricTypeTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,minMetricTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getMinMetric(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setMinMetric(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,transactionsMustContainTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setTransactionsMustContain(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getTransactionsMustContain(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,rulesMustContainTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setRulesMustContain(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getRulesMustContain(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,useORForMustContainListTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setUseORForMustContainList(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getUseORForMustContainList(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,deltaTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getDelta(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setDelta(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,lowerBoundMinSupportTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getLowerBoundMinSupport(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setLowerBoundMinSupport(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,upperBoundMinSupportTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getUpperBoundMinSupport(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setUpperBoundMinSupport(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,findAllRulesForSupportLevelTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setFindAllRulesForSupportLevel(boolean),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getFindAllRulesForSupportLevel(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setOffDiskReportingFrequency(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getAssociationRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getRuleMetricNames(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,canProduceRules(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,listOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,setOptions(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,buildAssociations(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,graph(weka.associations.FPGrowth.FPTreeRoot),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.associations.FPGrowth,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.classifiers.trees.j48.GainRatioSplitCrit,splitCritValue(weka.classifiers.trees.j48.Distribution),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.classifiers.trees.j48.GainRatioSplitCrit,"splitCritValue(weka.classifiers.trees.j48.Distribution, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.classifiers.trees.j48.GainRatioSplitCrit,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.classifiers.trees.j48.InfoGainSplitCrit,splitCritValue(weka.classifiers.trees.j48.Distribution),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.classifiers.trees.j48.InfoGainSplitCrit,"splitCritValue(weka.classifiers.trees.j48.Distribution, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.classifiers.trees.j48.InfoGainSplitCrit,"splitCritValue(weka.classifiers.trees.j48.Distribution, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.classifiers.trees.j48.InfoGainSplitCrit,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BatchPredictor,setBatchSize(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BatchPredictor,getBatchSize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BatchPredictor,distributionsForInstances(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BatchPredictor,implementsMoreEfficientBatchPrediction(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,weka.core.BinarySparseInstance(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,weka.core.BinarySparseInstance(weka.core.SparseInstance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,"weka.core.BinarySparseInstance(double, double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,"weka.core.BinarySparseInstance(double, int[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,weka.core.BinarySparseInstance(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,copy(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,mergeInstance(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,replaceMissingValues(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,"setValue(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,"setValueSparse(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,toDoubleArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,value(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,valueSparse(int),,[],0,0,0,,0,0,1,0,0,1,0,0,0,0
weka.core.BinarySparseInstance,forceDeleteAttributeAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,forceInsertAttributeAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.BinarySparseInstance,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Copyable,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,weka.core.DenseInstance(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,"weka.core.DenseInstance(double, double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,weka.core.DenseInstance(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,copy(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,index(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,mergeInstance(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,numAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,numValues(),,"[{'condition': 'true', 'entities': ['this.numAttributes()', 'this.numValues()']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
weka.core.DenseInstance,replaceMissingValues(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,"setValue(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,"setValueSparse(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,toDoubleArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,toStringNoWeight(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,toStringNoWeight(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,value(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,forceDeleteAttributeAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,forceInsertAttributeAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.DenseInstance,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,weka.core.Instances(java.io.Reader),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"weka.core.Instances(java.io.Reader, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,weka.core.Instances(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"weka.core.Instances(weka.core.Instances, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"weka.core.Instances(weka.core.Instances, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"weka.core.Instances(java.lang.String, java.util.ArrayList<weka.core.Attribute>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"initialize(weka.core.Instances, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,stringFreeStructure(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,add(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"add(int, weka.core.Instance)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,attribute(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,attribute(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,checkForAttributeType(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,checkForStringAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,checkInstance(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,classAttribute(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,classIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,compactify(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,delete(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,delete(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,deleteAttributeAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,deleteAttributeType(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,deleteStringAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,deleteWithMissing(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,deleteWithMissing(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,deleteWithMissingClass(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,enumerateAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,enumerateInstances(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,equalHeadersMsg(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,equalHeaders(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,firstInstance(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,getRandomNumberGenerator(long),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"insertAttributeAt(weka.core.Attribute, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,instance(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,get(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"kthSmallestValue(weka.core.Attribute, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"kthSmallestValue(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,lastInstance(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,meanOrMode(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,meanOrMode(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,numAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,numClasses(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,numDistinctValues(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,numDistinctValues(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,numInstances(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,size(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,randomize(java.util.Random),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,readInstance(java.io.Reader),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"replaceAttributeAt(weka.core.Attribute, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,relationName(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,remove(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"renameAttribute(int, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"renameAttribute(weka.core.Attribute, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"renameAttributeValue(int, int, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"renameAttributeValue(weka.core.Attribute, java.lang.String, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,resample(java.util.Random),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,resampleWithWeights(java.util.Random),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"resampleWithWeights(java.util.Random, boolean[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"resampleWithWeights(java.util.Random, boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"resampleWithWeights(java.util.Random, boolean[], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"resampleWithWeights(java.util.Random, double[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"resampleWithWeights(java.util.Random, double[], boolean[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"resampleWithWeights(java.util.Random, double[], boolean[], boolean)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"set(int, weka.core.Instance)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,setClass(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,setClassIndex(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,setRelationName(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,sortBasedOnNominalAttribute(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,sort(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,sort(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,stableSort(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,stableSort(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,stratify(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,sumOfWeights(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"testCV(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,stringWithoutHeader(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"trainCV(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"trainCV(int, int, java.util.Random)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,variances(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,variance(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,variance(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,attributeStats(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,attributeToDoubleArray(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,toSummaryString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"copyInstances(int, weka.core.Instances, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,instancesAndWeights(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,stratStep(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"swap(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,"mergeInstances(weka.core.Instances, weka.core.Instances)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,test(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instances,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,attribute(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,attributeSparse(int),,"[{'condition': 'true', 'entities': ['this.attribute(indexOfIndex)', 'this.attributeSparse(indexOfIndex)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
weka.core.Instance,classAttribute(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,classIndex(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,classIsMissing(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,classValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,copy(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,dataset(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,deleteAttributeAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,enumerateAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,equalHeaders(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,equalHeadersMsg(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,hasMissingValue(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,index(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,insertAttributeAt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,isMissing(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,isMissingSparse(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,isMissing(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,mergeInstance(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,numAttributes(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,numClasses(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,numValues(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,replaceMissingValues(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,setClassMissing(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,setClassValue(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,setClassValue(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,setDataset(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,setMissing(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,setMissing(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,"setValue(int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,"setValueSparse(int, double)",,"[{'condition': 'true', 'entities': ['this.setValue(indexOfIndex, value)', 'this.setValueSparse(indexOfIndex, value)']}]",1,0,0,,0,1,0,0,1,0,0,0,0,0
weka.core.Instance,"setValue(int, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,"setValue(weka.core.Attribute, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,"setValue(weka.core.Attribute, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,setWeight(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,relationalValue(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,relationalValue(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,stringValue(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,stringValue(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,toDoubleArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,toStringNoWeight(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,toStringNoWeight(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,toStringMaxDecimalDigits(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,"toString(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,toString(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,"toString(weka.core.Attribute, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,toString(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,value(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,valueSparse(int),,"[{'condition': 'true', 'entities': ['this.value(indexOfIndex)', 'this.valueSparse(indexOfIndex)']}]",1,0,0,,0,1,1,1,0,0,0,0,0,0
weka.core.Instance,value(weka.core.Attribute),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.Instance,weight(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"weka.core.matrix.Matrix(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"weka.core.matrix.Matrix(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,weka.core.matrix.Matrix(double[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"weka.core.matrix.Matrix(double[][], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"weka.core.matrix.Matrix(double[], int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,weka.core.matrix.Matrix(java.io.Reader),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,constructWithCopy(double[][]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,copy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,clone(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,getArray(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,getArrayCopy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,getColumnPackedCopy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,getRowPackedCopy(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,getRowDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,getColumnDimension(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"get(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"getMatrix(int, int, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"getMatrix(int[], int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"getMatrix(int, int, int[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"getMatrix(int[], int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"set(int, int, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"setMatrix(int, int, int, int, weka.core.matrix.Matrix)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"setMatrix(int[], int[], weka.core.matrix.Matrix)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"setMatrix(int[], int, int, weka.core.matrix.Matrix)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"setMatrix(int, int, int[], weka.core.matrix.Matrix)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,isSymmetric(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,isSquare(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,transpose(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,norm1(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,norm2(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,normInf(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,normF(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,uminus(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,plus(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,plusEquals(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,minus(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,minusEquals(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,arrayTimes(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,arrayTimesEquals(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,arrayRightDivide(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,arrayRightDivideEquals(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,arrayLeftDivide(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,arrayLeftDivideEquals(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,times(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,timesEquals(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,times(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,lu(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,qr(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,chol(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,svd(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,eig(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,solve(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,solveTranspose(weka.core.matrix.Matrix),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,inverse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,sqrt(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"regression(weka.core.matrix.Matrix, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"regression(weka.core.matrix.Matrix, double[], double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,det(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,rank(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,cond(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,trace(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"random(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"identity(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"print(int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"print(java.io.PrintWriter, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"print(java.text.NumberFormat, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,"print(java.io.PrintWriter, java.text.NumberFormat, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,read(java.io.BufferedReader),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,write(java.io.Writer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,toMatlab(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,parseMatlab(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.matrix.Matrix,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,weka.core.neighboursearch.CoverTree(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,globalInfo(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,getTechnicalInformation(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,listOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,setOptions(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,getOptions(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,dist_of_scale(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,get_scale(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,new_node(java.lang.Integer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,new_leaf(java.lang.Integer),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,max_set(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"split(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"dist_split(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.CoverTree.DistanceNode, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"batch_insert(java.lang.Integer, int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.DistanceNode>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,buildCoverTree(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"setter(weka.core.neighboursearch.CoverTree.MyHeap, double, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"update(weka.core.neighboursearch.CoverTree.MyHeap, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"getCoverSet(int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"copy_zero_set(weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"copy_cover_sets(weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"print_cover_sets(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, int, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"SWAP(int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"compare(int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,halfsort(weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"shell(double, double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"descend(weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.MyHeap, int, int, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"brute_nearest(int, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.NearestNeighbourSearch.NeighborList>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"internal_batch_nearest_neighbor(int, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>>, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.CoverTree.d_node>, int, int, weka.core.neighboursearch.CoverTree.MyHeap, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.NearestNeighbourSearch.NeighborList>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"batch_nearest_neighbor(int, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.CoverTree.CoverTreeNode, weka.core.neighboursearch.covertrees.Stack<weka.core.neighboursearch.NearestNeighbourSearch.NeighborList>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"findKNearest(weka.core.Instance, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"kNearestNeighbours(weka.core.Instance, int)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,nearestNeighbour(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,getDistances(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,checkMissing(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,setInstances(weka.core.Instances),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,update(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,addInstanceInfo(weka.core.Instance),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,setDistanceFunction(weka.core.DistanceFunction),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,baseTipText(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,getBase(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,setBase(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,measureTreeSize(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,measureNumLeaves(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,measureMaxDepth(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,enumerateMeasures(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,getMeasure(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,print(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,println(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,print(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,println(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,print_space(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,"print(int, weka.core.neighboursearch.CoverTree.CoverTreeNode)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.neighboursearch.CoverTree,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Apply,"weka.core.pmml.Apply(org.w3c.dom.Element, weka.core.pmml.FieldMetaInfo.Optype, java.util.ArrayList<weka.core.Attribute>, weka.core.pmml.TransformationDictionary)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Apply,setFieldDefs(java.util.ArrayList<weka.core.Attribute>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Apply,getResult(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Apply,getResultCategorical(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Apply,getOutputDef(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Apply,toString(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,weka.core.pmml.Array(org.w3c.dom.Element),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,"weka.core.pmml.Array(weka.core.pmml.Array.ArrayType, java.util.List<java.lang.Object>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,"create(java.util.List<java.lang.Object>, java.util.List<java.lang.Integer>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,getType(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,isSparse(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,numValues(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,contains(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,contains(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,contains(double),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,contains(float),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,index(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,value(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,actualValue(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueString(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueDouble(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueFloat(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueInt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueSparse(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueSparseString(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueSparseDouble(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueSparseFloat(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,valueSparseInt(int),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Array,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,"weka.core.pmml.Expression(weka.core.pmml.FieldMetaInfo.Optype, java.util.ArrayList<weka.core.Attribute>)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,setFieldDefs(java.util.ArrayList<weka.core.Attribute>),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,getResult(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,getResultContinuous(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,getResultCategorical(double[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,getOutputDef(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,getFieldDef(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,getFieldDefIndex(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,getOptype(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.pmml.Expression,toString(java.lang.String),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,weka.core.xml.XMLSerializationMethodHandler(java.lang.Object),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,"addMethods(weka.core.xml.MethodHandler, java.lang.reflect.Method, java.lang.reflect.Method[])",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,addMethods(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,"findReadMethod(java.lang.Object, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,"findWriteMethod(java.lang.Object, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,clear(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,read(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,write(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,"register(java.lang.Object, java.lang.Class<?>, java.lang.String)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.core.xml.XMLSerializationMethodHandler,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.experiment.Stats,add(double),,"[{'condition': 'true', 'entities': ['this.add(value)', 'this.add(value, 1)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
weka.experiment.Stats,"add(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.experiment.Stats,subtract(double),,"[{'condition': 'true', 'entities': ['this.subtract(value)', 'this.subtract(value, 1)']}]",1,0,0,,1,0,0,1,0,0,0,0,0,0
weka.experiment.Stats,"subtract(double, double)",,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.experiment.Stats,calculateDerived(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.experiment.Stats,toString(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.experiment.Stats,getRevision(),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
weka.experiment.Stats,main(java.lang.String[]),,[],0,0,0,,0,0,0,0,0,0,0,0,0,0
