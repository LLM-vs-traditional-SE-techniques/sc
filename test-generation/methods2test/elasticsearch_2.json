{
	"project": "Elasticsearch",
	"package": "org.elasticsearch.action.index",
	"class": "IndexRequest",
	"method_signature": "IndexRequest source(Map source, XContentType contentType)",
	"method": "public IndexRequest source(Map source, XContentType contentType) throws ElasticsearchGenerationException {\n        try {\n            XContentBuilder builder = XContentFactory.contentBuilder(contentType);\n            builder.map(source);\n            return source(builder);\n        } catch (IOException e) {\n            throw new ElasticsearchGenerationException(\"Failed to generate [\" + source + \"]\", e);\n        }\n    }",
	"helpers": ["IndexRequest()", "Map<String, Object> sourceAsMap()", "XContentType getContentType()"],
	"example_same_class": {
		"method_signature": "IndexRequest opType(String opType)",
		"method": "public IndexRequest opType(String opType) {\n        String op = opType.toLowerCase(Locale.ROOT);\n        if (op.equals(\"create\")) {\n            opType(OpType.CREATE);\n        } else if (op.equals(\"index\")) {\n            opType(OpType.INDEX);\n        } else {\n            throw new IllegalArgumentException(\"opType must be 'create' or 'index', found: [\" + opType + \"]\");\n        }\n        return this;\n    }",
		"test": "public void testReadBogusString() {\n        try {\n            IndexRequest indexRequest = new IndexRequest(\"\");\n            indexRequest.opType(\"foobar\");\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), equalTo(\"opType must be 'create' or 'index', found: [foobar]\"));\n        }    }"
	},
	"example_different_project": {
		"id": "hibernate_1",
		"method_signature": "",
		"method": "public <X> Boolean wrap(X value, WrapperOptions options) {\n		if ( value == null ) {\n			return null;\n		}\n		if ( Boolean.class.isInstance( value ) ) {\n			return (Boolean) value;\n		}\n		if ( Number.class.isInstance( value ) ) {\n			final int intValue = ( (Number) value ).intValue();\n			return intValue == 0 ? FALSE : TRUE;\n		}\n		if ( Character.class.isInstance( value ) ) {\n			return isTrue( (Character) value ) ? TRUE : FALSE;\n		}\n		if ( String.class.isInstance( value ) ) {\n			return isTrue((String) value) ? TRUE : FALSE;\n		}\n		throw unknownWrap( value.getClass() );\n	}",
		"test": "public void testWrapShouldReturnTrueWhenYStringGiven() {\n        // given\n        BooleanTypeDescriptor underTest = new BooleanTypeDescriptor();\n        // when\n        Boolean result = underTest.wrap(\"Y\", null);\n        // then\n        assertTrue(result);\n    }"
	},
	"method_class_imports": "import org.elasticsearch.action.index.*;\nimport org.elasticsearch.ElasticsearchGenerationException;\nimport org.elasticsearch.Version;\nimport org.elasticsearch.action.ActionRequestValidationException;\nimport org.elasticsearch.action.CompositeIndicesRequest;\nimport org.elasticsearch.action.DocWriteRequest;\nimport org.elasticsearch.action.RoutingMissingException;\nimport org.elasticsearch.action.support.replication.ReplicatedWriteRequest;\nimport org.elasticsearch.action.support.replication.ReplicationRequest;\nimport org.elasticsearch.client.Requests;\nimport org.elasticsearch.cluster.metadata.MappingMetaData;\nimport org.elasticsearch.cluster.metadata.MetaData;\nimport org.elasticsearch.common.Nullable;\nimport org.elasticsearch.common.UUIDs;\nimport org.elasticsearch.common.bytes.BytesArray;\nimport org.elasticsearch.common.bytes.BytesReference;\nimport org.elasticsearch.common.io.stream.StreamInput;\nimport org.elasticsearch.common.io.stream.StreamOutput;\nimport org.elasticsearch.common.lucene.uid.Versions;\nimport org.elasticsearch.common.unit.ByteSizeValue;\nimport org.elasticsearch.common.unit.TimeValue;\nimport org.elasticsearch.common.xcontent.XContentBuilder;\nimport org.elasticsearch.common.xcontent.XContentFactory;\nimport org.elasticsearch.common.xcontent.XContentHelper;\nimport org.elasticsearch.common.xcontent.XContentType;\nimport org.elasticsearch.index.IndexSettings;\nimport org.elasticsearch.index.VersionType;\nimport org.elasticsearch.index.shard.ShardId;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Objects;\nimport static org.elasticsearch.action.ValidateActions.addValidationError;\nimport java.util.*;",
	"test_class_imports": "import org.elasticsearch.Version;\nimport org.elasticsearch.action.ActionRequestValidationException;\nimport org.elasticsearch.action.DocWriteRequest;\nimport org.elasticsearch.action.support.ActiveShardCount;\nimport org.elasticsearch.action.support.replication.ReplicationResponse;\nimport org.elasticsearch.common.bytes.BytesArray;\nimport org.elasticsearch.common.io.stream.BytesStreamOutput;\nimport org.elasticsearch.common.io.stream.StreamInput;\nimport org.elasticsearch.common.unit.ByteSizeValue;\nimport org.elasticsearch.common.xcontent.XContentType;\nimport org.elasticsearch.index.VersionType;\nimport org.elasticsearch.index.seqno.SequenceNumbers;\nimport org.elasticsearch.index.shard.ShardId;\nimport org.elasticsearch.rest.RestStatus;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;"
}